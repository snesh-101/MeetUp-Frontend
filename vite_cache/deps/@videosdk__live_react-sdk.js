import {
  require_react
} from "./chunk-6GAV2S6I.js";
import {
  __commonJS,
  __publicField,
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter2() {
      EventEmitter2.init.call(this);
    }
    module.exports = EventEmitter2;
    module.exports.once = once;
    EventEmitter2.EventEmitter = EventEmitter2;
    EventEmitter2.prototype._events = void 0;
    EventEmitter2.prototype._eventsCount = 0;
    EventEmitter2.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter2, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter2.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter2.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter2.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter2.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter2.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = type === "error";
      var events2 = this._events;
      if (events2 !== void 0)
        doError = doError && events2.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events2[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events2;
      var existing;
      checkListener(listener);
      events2 = target._events;
      if (events2 === void 0) {
        events2 = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events2.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events2 = target._events;
        }
        existing = events2[type];
      }
      if (existing === void 0) {
        existing = events2[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events2[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter2.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter2.prototype.on = EventEmitter2.prototype.addListener;
    EventEmitter2.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter2.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter2.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter2.prototype.removeListener = function removeListener(type, listener) {
      var list, events2, position, i, originalListener;
      checkListener(listener);
      events2 = this._events;
      if (events2 === void 0)
        return this;
      list = events2[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events2[type];
          if (events2.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events2[type] = list[0];
        if (events2.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events2, i;
      events2 = this._events;
      if (events2 === void 0)
        return this;
      if (events2.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events2[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events2[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events2);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener") continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events2[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events2 = target._events;
      if (events2 === void 0)
        return [];
      var evlistener = events2[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter2.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter2.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter2.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter2.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events2 = this._events;
      if (events2 !== void 0) {
        var evlistener = events2[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/@videosdk.live/js-sdk/videosdk.js
var require_videosdk = __commonJS({
  "node_modules/@videosdk.live/js-sdk/videosdk.js"(exports, module) {
    !function(e, t) {
      if ("object" == typeof exports && "object" == typeof module)
        module.exports = t();
      else if ("function" == typeof define && define.amd) define([], t);
      else {
        var r = t();
        for (var n in r) ("object" == typeof exports ? exports : e)[n] = r[n];
      }
    }(
      self,
      () => (() => {
        var e = {
          11: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome74 = void 0;
            const a = i(r2(7363)), o = r2(2994), c = i(r2(1765)), d = i(r2(8046)), l = i(r2(5544)), u = i(r2(5938)), p = i(r2(4256)), h = r2(4893), m = r2(521), f = r2(1305), g = r2(3303), v = new o.Logger("Chrome74"), _ = { OS: 1024, MIS: 1024 };
            class y extends m.HandlerInterface {
              static createFactory() {
                return () => new y();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome74";
              }
              close() {
                if (v.debug("close()"), !this._closed) {
                  if (this._closed = true, this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                v.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = a.parse(t3.sdp), n3 = l.extractRtpCapabilities({ sdpObject: r3 });
                  return p.addNackSuppportForOpus(n3), n3;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return v.debug("getNativeSctpCapabilities()"), { numStreams: _ };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                v.debug("run()"), this._direction = e3, this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, n3.role && "auto" !== n3.role && (this._forcedLocalDtlsRole = "server" === n3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : (v.warn(
                  "run() | pc.connectionState not supported, using pc.iceConnectionState"
                ), this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                ));
              }
              async updateIceServers(e3) {
                this.assertNotClosed(), v.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), v.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    v.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    v.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    v.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    v.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1 && t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                });
                const s2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, n3);
                const i2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                i2.codecs = d.reduceCodecs(i2.codecs, n3);
                const o2 = this._remoteSdp.getNextMediaSectionIdx(), p2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                });
                let h2, m2 = await this._pc.createOffer(), f2 = a.parse(m2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f2
                });
                let _2 = false;
                const y2 = (0, g.parse)((t3 || [{}])[0].scalabilityMode);
                t3 && 1 === t3.length && y2.spatialLayers > 1 && "video/vp9" === s2.codecs[0].mimeType.toLowerCase() && (v.debug("send() | enabling legacy simulcast for VP9 SVC"), _2 = true, f2 = a.parse(m2.sdp), h2 = f2.media[o2.idx], u.addLegacySimulcast({
                  offerMediaObject: h2,
                  numStreams: y2.spatialLayers
                }), m2 = { type: "offer", sdp: a.write(f2) }), v.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m2
                ), await this._pc.setLocalDescription(m2);
                const b = p2.mid;
                if (s2.mid = b, f2 = a.parse(this._pc.localDescription.sdp), h2 = f2.media[o2.idx], s2.rtcp.cname = l.getCname({ offerMediaObject: h2 }), t3)
                  if (1 === t3.length) {
                    let e4 = u.getRtpEncodings({ offerMediaObject: h2 });
                    Object.assign(e4[0], t3[0]), _2 && (e4 = [e4[0]]), s2.encodings = e4;
                  } else s2.encodings = t3;
                else s2.encodings = u.getRtpEncodings({ offerMediaObject: h2 });
                if (s2.encodings.length > 1 && ("video/vp8" === s2.codecs[0].mimeType.toLowerCase() || "video/h264" === s2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of s2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${y2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: h2,
                  reuseMid: o2.reuseMid,
                  offerRtpParameters: s2,
                  answerRtpParameters: i2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return v.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ), await this._pc.setRemoteDescription(w), this._mapMidTransceiver.set(b, p2), { localId: b, rtpParameters: s2, rtpSender: p2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), v.debug("stopSending() [localId:%s]", e3), this._closed)
                  return;
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                v.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                v.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (this._remoteSdp.resumeSendingMediaSection(e3), !t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly";
                const r3 = await this._pc.createOffer();
                v.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? v.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : v.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                v.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  n3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                v.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                v.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % _.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), v.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: n4,
                    rtpParameters: s3,
                    streamId: i3
                  } = t4;
                  v.debug("receive() [trackId:%s, kind:%s]", e4, n4);
                  const a2 = s3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, a2), this._remoteSdp.receive({
                    mid: a2,
                    kind: n4,
                    offerRtpParameters: s3,
                    streamId: i3 || s3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
                let s2 = await this._pc.createAnswer();
                const i2 = a.parse(s2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: n4 } = t4, s3 = r3.get(e4), a2 = i2.media.find((e5) => String(e5.mid) === s3);
                  l.applyCodecParameters({
                    offerRtpParameters: n4,
                    answerMediaObject: a2
                  });
                }
                s2 = { type: "answer", sdp: a.write(i2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: i2
                }), v.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                for (const n4 of e3) {
                  const { trackId: e4 } = n4, s3 = r3.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === s3);
                  if (!i3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(s3, i3), t3.push({
                    localId: s3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  v.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  v.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  v.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                v.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  v.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new h.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome74 = y;
          },
          19: function(e2, t2, r2) {
            var n2, s, i, a, o, c, d, l, u;
            e2.exports = (u = r2(9021), r2(3009), r2(1025), s = (n2 = u).lib, i = s.Base, a = s.WordArray, o = n2.algo, c = o.SHA256, d = o.HMAC, l = o.PBKDF2 = i.extend({
              cfg: i.extend({ keySize: 4, hasher: c, iterations: 25e4 }),
              init: function(e3) {
                this.cfg = this.cfg.extend(e3);
              },
              compute: function(e3, t3) {
                for (var r3 = this.cfg, n3 = d.create(r3.hasher, e3), s2 = a.create(), i2 = a.create([1]), o2 = s2.words, c2 = i2.words, l2 = r3.keySize, u2 = r3.iterations; o2.length < l2; ) {
                  var p = n3.update(t3).finalize(i2);
                  n3.reset();
                  for (var h = p.words, m = h.length, f = p, g = 1; g < u2; g++) {
                    f = n3.finalize(f), n3.reset();
                    for (var v = f.words, _ = 0; _ < m; _++) h[_] ^= v[_];
                  }
                  s2.concat(p), c2[0]++;
                }
                return s2.sigBytes = 4 * l2, s2;
              }
            }), n2.PBKDF2 = function(e3, t3, r3) {
              return l.create(r3).compute(e3, t3);
            }, u.PBKDF2);
          },
          25: function(e2, t2, r2) {
            var n2, s, i, a;
            e2.exports = (a = r2(9021), r2(7165), s = (n2 = a).lib.CipherParams, i = n2.enc.Hex, n2.format.Hex = {
              stringify: function(e3) {
                return e3.ciphertext.toString(i);
              },
              parse: function(e3) {
                var t3 = i.parse(e3);
                return s.create({ ciphertext: t3 });
              }
            }, a.format.Hex);
          },
          76: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            }, a = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.debug = t2.parseScalabilityMode = t2.detectDevice = t2.Device = t2.version = t2.types = void 0;
            const o = a(r2(7833));
            t2.debug = o.default;
            const c = r2(6004);
            Object.defineProperty(t2, "Device", {
              enumerable: true,
              get: function() {
                return c.Device;
              }
            }), Object.defineProperty(t2, "detectDevice", {
              enumerable: true,
              get: function() {
                return c.detectDevice;
              }
            });
            const d = i(r2(8057));
            t2.types = d, t2.version = "3.7.7";
            var l = r2(3303);
            Object.defineProperty(t2, "parseScalabilityMode", {
              enumerable: true,
              get: function() {
                return l.parse;
              }
            });
          },
          296: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => s });
            var n2 = r2(7800);
            function s(e3, t3) {
              return function(e4) {
                if (Array.isArray(e4)) return e4;
              }(e3) || function(e4, t4) {
                var r3 = null == e4 ? null : "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
                if (null != r3) {
                  var n3, s2, i, a, o = [], c = true, d = false;
                  try {
                    if (i = (r3 = r3.call(e4)).next, 0 === t4) {
                      if (Object(r3) !== r3) return;
                      c = false;
                    } else
                      for (; !(c = (n3 = i.call(r3)).done) && (o.push(n3.value), o.length !== t4); c = true) ;
                  } catch (e5) {
                    d = true, s2 = e5;
                  } finally {
                    try {
                      if (!c && null != r3.return && (a = r3.return(), Object(a) !== a))
                        return;
                    } finally {
                      if (d) throw s2;
                    }
                  }
                  return o;
                }
              }(e3, t3) || (0, n2.A)(e3, t3) || function() {
                throw new TypeError(
                  "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }();
            }
          },
          328: (e2, t2, r2) => {
            r2(8624), e2.exports = self.fetch.bind(self);
          },
          388: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => s });
            var n2 = r2(2284);
            function s(e3, t3) {
              if (t3 && ("object" == (0, n2.A)(t3) || "function" == typeof t3))
                return t3;
              if (void 0 !== t3)
                throw new TypeError(
                  "Derived constructors may only return object or undefined"
                );
              return function(e4) {
                if (void 0 === e4)
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                return e4;
              }(e3);
            }
          },
          467: (e2, t2, r2) => {
            "use strict";
            function n2(e3, t3, r3, n3, s2, i, a) {
              try {
                var o = e3[i](a), c = o.value;
              } catch (e4) {
                return void r3(e4);
              }
              o.done ? t3(c) : Promise.resolve(c).then(n3, s2);
            }
            function s(e3) {
              return function() {
                var t3 = this, r3 = arguments;
                return new Promise(function(s2, i) {
                  var a = e3.apply(t3, r3);
                  function o(e4) {
                    n2(a, s2, i, o, c, "next", e4);
                  }
                  function c(e4) {
                    n2(a, s2, i, o, c, "throw", e4);
                  }
                  o(void 0);
                });
              };
            }
            r2.d(t2, { A: () => s });
          },
          477: () => {
          },
          482: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(7165), n2.pad.Iso97971 = {
              pad: function(e3, t3) {
                e3.concat(n2.lib.WordArray.create([2147483648], 1)), n2.pad.ZeroPadding.pad(e3, t3);
              },
              unpad: function(e3) {
                n2.pad.ZeroPadding.unpad(e3), e3.sigBytes--;
              }
            }, n2.pad.Iso97971);
          },
          521: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.HandlerInterface = void 0;
            const n2 = r2(2010);
            class s extends n2.EnhancedEventEmitter {
              constructor() {
                super();
              }
            }
            t2.HandlerInterface = s;
          },
          736: (e2, t2, r2) => {
            e2.exports = function(e3) {
              function t3(e4) {
                let r3, s2, i, a = null;
                function o(...e5) {
                  if (!o.enabled) return;
                  const n3 = o, s3 = Number(/* @__PURE__ */ new Date()), i2 = s3 - (r3 || s3);
                  n3.diff = i2, n3.prev = r3, n3.curr = s3, r3 = s3, e5[0] = t3.coerce(e5[0]), "string" != typeof e5[0] && e5.unshift("%O");
                  let a2 = 0;
                  e5[0] = e5[0].replace(/%([a-zA-Z%])/g, (r4, s4) => {
                    if ("%%" === r4) return "%";
                    a2++;
                    const i3 = t3.formatters[s4];
                    if ("function" == typeof i3) {
                      const t4 = e5[a2];
                      r4 = i3.call(n3, t4), e5.splice(a2, 1), a2--;
                    }
                    return r4;
                  }), t3.formatArgs.call(n3, e5);
                  (n3.log || t3.log).apply(n3, e5);
                }
                return o.namespace = e4, o.useColors = t3.useColors(), o.color = t3.selectColor(e4), o.extend = n2, o.destroy = t3.destroy, Object.defineProperty(o, "enabled", {
                  enumerable: true,
                  configurable: false,
                  get: () => null !== a ? a : (s2 !== t3.namespaces && (s2 = t3.namespaces, i = t3.enabled(e4)), i),
                  set: (e5) => {
                    a = e5;
                  }
                }), "function" == typeof t3.init && t3.init(o), o;
              }
              function n2(e4, r3) {
                const n3 = t3(this.namespace + (void 0 === r3 ? ":" : r3) + e4);
                return n3.log = this.log, n3;
              }
              function s(e4, t4) {
                let r3 = 0, n3 = 0, s2 = -1, i = 0;
                for (; r3 < e4.length; )
                  if (n3 < t4.length && (t4[n3] === e4[r3] || "*" === t4[n3]))
                    "*" === t4[n3] ? (s2 = n3, i = r3, n3++) : (r3++, n3++);
                  else {
                    if (-1 === s2) return false;
                    n3 = s2 + 1, i++, r3 = i;
                  }
                for (; n3 < t4.length && "*" === t4[n3]; ) n3++;
                return n3 === t4.length;
              }
              return t3.debug = t3, t3.default = t3, t3.coerce = function(e4) {
                if (e4 instanceof Error) return e4.stack || e4.message;
                return e4;
              }, t3.disable = function() {
                const e4 = [...t3.names, ...t3.skips.map((e5) => "-" + e5)].join(
                  ","
                );
                return t3.enable(""), e4;
              }, t3.enable = function(e4) {
                t3.save(e4), t3.namespaces = e4, t3.names = [], t3.skips = [];
                const r3 = ("string" == typeof e4 ? e4 : "").trim().replace(" ", ",").split(",").filter(Boolean);
                for (const e5 of r3)
                  "-" === e5[0] ? t3.skips.push(e5.slice(1)) : t3.names.push(e5);
              }, t3.enabled = function(e4) {
                for (const r3 of t3.skips) if (s(e4, r3)) return false;
                for (const r3 of t3.names) if (s(e4, r3)) return true;
                return false;
              }, t3.humanize = r2(6585), t3.destroy = function() {
                console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                );
              }, Object.keys(e3).forEach((r3) => {
                t3[r3] = e3[r3];
              }), t3.names = [], t3.skips = [], t3.formatters = {}, t3.selectColor = function(e4) {
                let r3 = 0;
                for (let t4 = 0; t4 < e4.length; t4++)
                  r3 = (r3 << 5) - r3 + e4.charCodeAt(t4), r3 |= 0;
                return t3.colors[Math.abs(r3) % t3.colors.length];
              }, t3.enable(t3.load()), t3;
            };
          },
          754: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), function() {
              var e3 = n2, t3 = e3.lib.WordArray;
              function r3(e4, r4, n3) {
                for (var s = [], i = 0, a = 0; a < r4; a++)
                  if (a % 4) {
                    var o = n3[e4.charCodeAt(a - 1)] << a % 4 * 2 | n3[e4.charCodeAt(a)] >>> 6 - a % 4 * 2;
                    s[i >>> 2] |= o << 24 - i % 4 * 8, i++;
                  }
                return t3.create(s, i);
              }
              e3.enc.Base64 = {
                stringify: function(e4) {
                  var t4 = e4.words, r4 = e4.sigBytes, n3 = this._map;
                  e4.clamp();
                  for (var s = [], i = 0; i < r4; i += 3)
                    for (var a = (t4[i >>> 2] >>> 24 - i % 4 * 8 & 255) << 16 | (t4[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255) << 8 | t4[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255, o = 0; o < 4 && i + 0.75 * o < r4; o++)
                      s.push(n3.charAt(a >>> 6 * (3 - o) & 63));
                  var c = n3.charAt(64);
                  if (c) for (; s.length % 4; ) s.push(c);
                  return s.join("");
                },
                parse: function(e4) {
                  var t4 = e4.length, n3 = this._map, s = this._reverseMap;
                  if (!s) {
                    s = this._reverseMap = [];
                    for (var i = 0; i < n3.length; i++) s[n3.charCodeAt(i)] = i;
                  }
                  var a = n3.charAt(64);
                  if (a) {
                    var o = e4.indexOf(a);
                    -1 !== o && (t4 = o);
                  }
                  return r3(e4, t4, s);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
              };
            }(), n2.enc.Base64);
          },
          816: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => s });
            var n2 = r2(2284);
            function s(e3) {
              var t3 = function(e4, t4) {
                if ("object" != (0, n2.A)(e4) || !e4) return e4;
                var r3 = e4[Symbol.toPrimitive];
                if (void 0 !== r3) {
                  var s2 = r3.call(e4, t4 || "default");
                  if ("object" != (0, n2.A)(s2)) return s2;
                  throw new TypeError(
                    "@@toPrimitive must return a primitive value."
                  );
                }
                return ("string" === t4 ? String : Number)(e4);
              }(e3, "string");
              return "symbol" == (0, n2.A)(t3) ? t3 : t3 + "";
            }
          },
          955: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = n2, t3 = e3.lib.BlockCipher, r3 = e3.algo, s = [], i = [], a = [], o = [], c = [], d = [], l = [], u = [], p = [], h = [];
              !function() {
                for (var e4 = [], t4 = 0; t4 < 256; t4++)
                  e4[t4] = t4 < 128 ? t4 << 1 : t4 << 1 ^ 283;
                var r4 = 0, n3 = 0;
                for (t4 = 0; t4 < 256; t4++) {
                  var m2 = n3 ^ n3 << 1 ^ n3 << 2 ^ n3 << 3 ^ n3 << 4;
                  m2 = m2 >>> 8 ^ 255 & m2 ^ 99, s[r4] = m2, i[m2] = r4;
                  var f2 = e4[r4], g = e4[f2], v = e4[g], _ = 257 * e4[m2] ^ 16843008 * m2;
                  a[r4] = _ << 24 | _ >>> 8, o[r4] = _ << 16 | _ >>> 16, c[r4] = _ << 8 | _ >>> 24, d[r4] = _, _ = 16843009 * v ^ 65537 * g ^ 257 * f2 ^ 16843008 * r4, l[m2] = _ << 24 | _ >>> 8, u[m2] = _ << 16 | _ >>> 16, p[m2] = _ << 8 | _ >>> 24, h[m2] = _, r4 ? (r4 = f2 ^ e4[e4[e4[v ^ f2]]], n3 ^= e4[e4[n3]]) : r4 = n3 = 1;
                }
              }();
              var m = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], f = r3.AES = t3.extend({
                _doReset: function() {
                  if (!this._nRounds || this._keyPriorReset !== this._key) {
                    for (var e4 = this._keyPriorReset = this._key, t4 = e4.words, r4 = e4.sigBytes / 4, n3 = 4 * ((this._nRounds = r4 + 6) + 1), i2 = this._keySchedule = [], a2 = 0; a2 < n3; a2++)
                      a2 < r4 ? i2[a2] = t4[a2] : (d2 = i2[a2 - 1], a2 % r4 ? r4 > 6 && a2 % r4 == 4 && (d2 = s[d2 >>> 24] << 24 | s[d2 >>> 16 & 255] << 16 | s[d2 >>> 8 & 255] << 8 | s[255 & d2]) : (d2 = s[(d2 = d2 << 8 | d2 >>> 24) >>> 24] << 24 | s[d2 >>> 16 & 255] << 16 | s[d2 >>> 8 & 255] << 8 | s[255 & d2], d2 ^= m[a2 / r4 | 0] << 24), i2[a2] = i2[a2 - r4] ^ d2);
                    for (var o2 = this._invKeySchedule = [], c2 = 0; c2 < n3; c2++) {
                      if (a2 = n3 - c2, c2 % 4) var d2 = i2[a2];
                      else d2 = i2[a2 - 4];
                      o2[c2] = c2 < 4 || a2 <= 4 ? d2 : l[s[d2 >>> 24]] ^ u[s[d2 >>> 16 & 255]] ^ p[s[d2 >>> 8 & 255]] ^ h[s[255 & d2]];
                    }
                  }
                },
                encryptBlock: function(e4, t4) {
                  this._doCryptBlock(e4, t4, this._keySchedule, a, o, c, d, s);
                },
                decryptBlock: function(e4, t4) {
                  var r4 = e4[t4 + 1];
                  e4[t4 + 1] = e4[t4 + 3], e4[t4 + 3] = r4, this._doCryptBlock(
                    e4,
                    t4,
                    this._invKeySchedule,
                    l,
                    u,
                    p,
                    h,
                    i
                  ), r4 = e4[t4 + 1], e4[t4 + 1] = e4[t4 + 3], e4[t4 + 3] = r4;
                },
                _doCryptBlock: function(e4, t4, r4, n3, s2, i2, a2, o2) {
                  for (var c2 = this._nRounds, d2 = e4[t4] ^ r4[0], l2 = e4[t4 + 1] ^ r4[1], u2 = e4[t4 + 2] ^ r4[2], p2 = e4[t4 + 3] ^ r4[3], h2 = 4, m2 = 1; m2 < c2; m2++) {
                    var f2 = n3[d2 >>> 24] ^ s2[l2 >>> 16 & 255] ^ i2[u2 >>> 8 & 255] ^ a2[255 & p2] ^ r4[h2++], g = n3[l2 >>> 24] ^ s2[u2 >>> 16 & 255] ^ i2[p2 >>> 8 & 255] ^ a2[255 & d2] ^ r4[h2++], v = n3[u2 >>> 24] ^ s2[p2 >>> 16 & 255] ^ i2[d2 >>> 8 & 255] ^ a2[255 & l2] ^ r4[h2++], _ = n3[p2 >>> 24] ^ s2[d2 >>> 16 & 255] ^ i2[l2 >>> 8 & 255] ^ a2[255 & u2] ^ r4[h2++];
                    d2 = f2, l2 = g, u2 = v, p2 = _;
                  }
                  f2 = (o2[d2 >>> 24] << 24 | o2[l2 >>> 16 & 255] << 16 | o2[u2 >>> 8 & 255] << 8 | o2[255 & p2]) ^ r4[h2++], g = (o2[l2 >>> 24] << 24 | o2[u2 >>> 16 & 255] << 16 | o2[p2 >>> 8 & 255] << 8 | o2[255 & d2]) ^ r4[h2++], v = (o2[u2 >>> 24] << 24 | o2[p2 >>> 16 & 255] << 16 | o2[d2 >>> 8 & 255] << 8 | o2[255 & l2]) ^ r4[h2++], _ = (o2[p2 >>> 24] << 24 | o2[d2 >>> 16 & 255] << 16 | o2[l2 >>> 8 & 255] << 8 | o2[255 & u2]) ^ r4[h2++], e4[t4] = f2, e4[t4 + 1] = g, e4[t4 + 2] = v, e4[t4 + 3] = _;
                },
                keySize: 8
              });
              e3.AES = t3._createHelper(f);
            }(), n2.AES);
          },
          1025: function(e2, t2, r2) {
            var n2, s, i, a;
            e2.exports = (n2 = r2(9021), i = (s = n2).lib.Base, a = s.enc.Utf8, void (s.algo.HMAC = i.extend({
              init: function(e3, t3) {
                e3 = this._hasher = new e3.init(), "string" == typeof t3 && (t3 = a.parse(t3));
                var r3 = e3.blockSize, n3 = 4 * r3;
                t3.sigBytes > n3 && (t3 = e3.finalize(t3)), t3.clamp();
                for (var s2 = this._oKey = t3.clone(), i2 = this._iKey = t3.clone(), o = s2.words, c = i2.words, d = 0; d < r3; d++)
                  o[d] ^= 1549556828, c[d] ^= 909522486;
                s2.sigBytes = i2.sigBytes = n3, this.reset();
              },
              reset: function() {
                var e3 = this._hasher;
                e3.reset(), e3.update(this._iKey);
              },
              update: function(e3) {
                return this._hasher.update(e3), this;
              },
              finalize: function(e3) {
                var t3 = this._hasher, r3 = t3.finalize(e3);
                return t3.reset(), t3.finalize(this._oKey.clone().concat(r3));
              }
            })));
          },
          1305: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.RemoteSdp = void 0;
            const a = i(r2(7363)), o = r2(2994), c = r2(3471), d = new o.Logger("RemoteSdp");
            t2.RemoteSdp = class {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                sctpParameters: n3,
                plainRtpParameters: s2,
                planB: i2 = false
              }) {
                if (this._mediaSections = [], this._midToIndex = /* @__PURE__ */ new Map(), this._iceParameters = e3, this._iceCandidates = t3, this._dtlsParameters = r3, this._sctpParameters = n3, this._plainRtpParameters = s2, this._planB = i2, this._sdpObject = {
                  version: 0,
                  origin: {
                    address: "0.0.0.0",
                    ipVer: 4,
                    netType: "IN",
                    sessionId: 1e4,
                    sessionVersion: 0,
                    username: "mediasoup-client"
                  },
                  name: "-",
                  timing: { start: 0, stop: 0 },
                  media: []
                }, e3 && e3.iceLite && (this._sdpObject.icelite = "ice-lite"), r3) {
                  this._sdpObject.msidSemantic = { semantic: "WMS", token: "*" };
                  const e4 = this._dtlsParameters.fingerprints.length;
                  this._sdpObject.fingerprint = {
                    type: r3.fingerprints[e4 - 1].algorithm,
                    hash: r3.fingerprints[e4 - 1].value
                  }, this._sdpObject.groups = [{ type: "BUNDLE", mids: "" }];
                }
                s2 && (this._sdpObject.origin.address = s2.ip, this._sdpObject.origin.ipVer = s2.ipVersion);
              }
              updateIceParameters(e3) {
                d.debug("updateIceParameters() [iceParameters:%o]", e3), this._iceParameters = e3, this._sdpObject.icelite = e3.iceLite ? "ice-lite" : void 0;
                for (const t3 of this._mediaSections) t3.setIceParameters(e3);
              }
              updateDtlsRole(e3) {
                d.debug("updateDtlsRole() [role:%s]", e3), this._dtlsParameters.role = e3;
                for (const t3 of this._mediaSections) t3.setDtlsRole(e3);
              }
              getNextMediaSectionIdx() {
                for (let e3 = 0; e3 < this._mediaSections.length; ++e3) {
                  const t3 = this._mediaSections[e3];
                  if (t3.closed) return { idx: e3, reuseMid: t3.mid };
                }
                return { idx: this._mediaSections.length };
              }
              send({
                offerMediaObject: e3,
                reuseMid: t3,
                offerRtpParameters: r3,
                answerRtpParameters: n3,
                codecOptions: s2,
                extmapAllowMixed: i2 = false
              }) {
                const a2 = new c.AnswerMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  planB: this._planB,
                  offerMediaObject: e3,
                  offerRtpParameters: r3,
                  answerRtpParameters: n3,
                  codecOptions: s2,
                  extmapAllowMixed: i2
                });
                t3 ? this._replaceMediaSection(a2, t3) : this._midToIndex.has(a2.mid) ? this._replaceMediaSection(a2) : this._addMediaSection(a2);
              }
              receive({
                mid: e3,
                kind: t3,
                offerRtpParameters: r3,
                streamId: n3,
                trackId: s2
              }) {
                const i2 = this._midToIndex.get(e3);
                let a2;
                if (void 0 !== i2 && (a2 = this._mediaSections[i2]), a2)
                  a2.planBReceive({
                    offerRtpParameters: r3,
                    streamId: n3,
                    trackId: s2
                  }), this._replaceMediaSection(a2);
                else {
                  a2 = new c.OfferMediaSection({
                    iceParameters: this._iceParameters,
                    iceCandidates: this._iceCandidates,
                    dtlsParameters: this._dtlsParameters,
                    plainRtpParameters: this._plainRtpParameters,
                    planB: this._planB,
                    mid: e3,
                    kind: t3,
                    offerRtpParameters: r3,
                    streamId: n3,
                    trackId: s2
                  });
                  const i3 = this._mediaSections.find((e4) => e4.closed);
                  i3 ? this._replaceMediaSection(a2, i3.mid) : this._addMediaSection(a2);
                }
              }
              pauseMediaSection(e3) {
                this._findMediaSection(e3).pause();
              }
              resumeSendingMediaSection(e3) {
                this._findMediaSection(e3).resume();
              }
              resumeReceivingMediaSection(e3) {
                this._findMediaSection(e3).resume();
              }
              disableMediaSection(e3) {
                this._findMediaSection(e3).disable();
              }
              closeMediaSection(e3) {
                const t3 = this._findMediaSection(e3);
                return e3 === this._firstMid ? (d.debug(
                  "closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]",
                  e3
                ), this.disableMediaSection(e3), false) : (t3.close(), this._regenerateBundleMids(), true);
              }
              muxMediaSectionSimulcast(e3, t3) {
                const r3 = this._findMediaSection(e3);
                r3.muxSimulcastStreams(t3), this._replaceMediaSection(r3);
              }
              planBStopReceiving({ mid: e3, offerRtpParameters: t3 }) {
                const r3 = this._findMediaSection(e3);
                r3.planBStopReceiving({ offerRtpParameters: t3 }), this._replaceMediaSection(r3);
              }
              sendSctpAssociation({ offerMediaObject: e3 }) {
                const t3 = new c.AnswerMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  sctpParameters: this._sctpParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  offerMediaObject: e3
                });
                this._addMediaSection(t3);
              }
              receiveSctpAssociation({ oldDataChannelSpec: e3 = false } = {}) {
                const t3 = new c.OfferMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  sctpParameters: this._sctpParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  mid: "datachannel",
                  kind: "application",
                  oldDataChannelSpec: e3
                });
                this._addMediaSection(t3);
              }
              getSdp() {
                return this._sdpObject.origin.sessionVersion++, a.write(this._sdpObject);
              }
              _addMediaSection(e3) {
                this._firstMid || (this._firstMid = e3.mid), this._mediaSections.push(e3), this._midToIndex.set(e3.mid, this._mediaSections.length - 1), this._sdpObject.media.push(e3.getObject()), this._regenerateBundleMids();
              }
              _replaceMediaSection(e3, t3) {
                if ("string" == typeof t3) {
                  const r3 = this._midToIndex.get(t3);
                  if (void 0 === r3)
                    throw new Error(`no media section found for reuseMid '${t3}'`);
                  const n3 = this._mediaSections[r3];
                  this._mediaSections[r3] = e3, this._midToIndex.delete(n3.mid), this._midToIndex.set(e3.mid, r3), this._sdpObject.media[r3] = e3.getObject(), this._regenerateBundleMids();
                } else {
                  const t4 = this._midToIndex.get(e3.mid);
                  if (void 0 === t4)
                    throw new Error(`no media section found with mid '${e3.mid}'`);
                  this._mediaSections[t4] = e3, this._sdpObject.media[t4] = e3.getObject();
                }
              }
              _findMediaSection(e3) {
                const t3 = this._midToIndex.get(e3);
                if (void 0 === t3)
                  throw new Error(`no media section found with mid '${e3}'`);
                return this._mediaSections[t3];
              }
              _regenerateBundleMids() {
                this._dtlsParameters && (this._sdpObject.groups[0].mids = this._mediaSections.filter((e3) => !e3.closed).map((e3) => e3.mid).join(" "));
              }
            };
          },
          1380: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(3240), function() {
              var e3 = n2, t3 = e3.lib.Hasher, r3 = e3.x64, s = r3.Word, i = r3.WordArray, a = e3.algo;
              function o() {
                return s.create.apply(s, arguments);
              }
              var c = [
                o(1116352408, 3609767458),
                o(1899447441, 602891725),
                o(3049323471, 3964484399),
                o(3921009573, 2173295548),
                o(961987163, 4081628472),
                o(1508970993, 3053834265),
                o(2453635748, 2937671579),
                o(2870763221, 3664609560),
                o(3624381080, 2734883394),
                o(310598401, 1164996542),
                o(607225278, 1323610764),
                o(1426881987, 3590304994),
                o(1925078388, 4068182383),
                o(2162078206, 991336113),
                o(2614888103, 633803317),
                o(3248222580, 3479774868),
                o(3835390401, 2666613458),
                o(4022224774, 944711139),
                o(264347078, 2341262773),
                o(604807628, 2007800933),
                o(770255983, 1495990901),
                o(1249150122, 1856431235),
                o(1555081692, 3175218132),
                o(1996064986, 2198950837),
                o(2554220882, 3999719339),
                o(2821834349, 766784016),
                o(2952996808, 2566594879),
                o(3210313671, 3203337956),
                o(3336571891, 1034457026),
                o(3584528711, 2466948901),
                o(113926993, 3758326383),
                o(338241895, 168717936),
                o(666307205, 1188179964),
                o(773529912, 1546045734),
                o(1294757372, 1522805485),
                o(1396182291, 2643833823),
                o(1695183700, 2343527390),
                o(1986661051, 1014477480),
                o(2177026350, 1206759142),
                o(2456956037, 344077627),
                o(2730485921, 1290863460),
                o(2820302411, 3158454273),
                o(3259730800, 3505952657),
                o(3345764771, 106217008),
                o(3516065817, 3606008344),
                o(3600352804, 1432725776),
                o(4094571909, 1467031594),
                o(275423344, 851169720),
                o(430227734, 3100823752),
                o(506948616, 1363258195),
                o(659060556, 3750685593),
                o(883997877, 3785050280),
                o(958139571, 3318307427),
                o(1322822218, 3812723403),
                o(1537002063, 2003034995),
                o(1747873779, 3602036899),
                o(1955562222, 1575990012),
                o(2024104815, 1125592928),
                o(2227730452, 2716904306),
                o(2361852424, 442776044),
                o(2428436474, 593698344),
                o(2756734187, 3733110249),
                o(3204031479, 2999351573),
                o(3329325298, 3815920427),
                o(3391569614, 3928383900),
                o(3515267271, 566280711),
                o(3940187606, 3454069534),
                o(4118630271, 4000239992),
                o(116418474, 1914138554),
                o(174292421, 2731055270),
                o(289380356, 3203993006),
                o(460393269, 320620315),
                o(685471733, 587496836),
                o(852142971, 1086792851),
                o(1017036298, 365543100),
                o(1126000580, 2618297676),
                o(1288033470, 3409855158),
                o(1501505948, 4234509866),
                o(1607167915, 987167468),
                o(1816402316, 1246189591)
              ], d = [];
              !function() {
                for (var e4 = 0; e4 < 80; e4++) d[e4] = o();
              }();
              var l = a.SHA512 = t3.extend({
                _doReset: function() {
                  this._hash = new i.init([
                    new s.init(1779033703, 4089235720),
                    new s.init(3144134277, 2227873595),
                    new s.init(1013904242, 4271175723),
                    new s.init(2773480762, 1595750129),
                    new s.init(1359893119, 2917565137),
                    new s.init(2600822924, 725511199),
                    new s.init(528734635, 4215389547),
                    new s.init(1541459225, 327033209)
                  ]);
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = this._hash.words, n3 = r4[0], s2 = r4[1], i2 = r4[2], a2 = r4[3], o2 = r4[4], l2 = r4[5], u = r4[6], p = r4[7], h = n3.high, m = n3.low, f = s2.high, g = s2.low, v = i2.high, _ = i2.low, y = a2.high, b = a2.low, w = o2.high, S = o2.low, R = l2.high, k = l2.low, E = u.high, C = u.low, T = p.high, P = p.low, O = h, x = m, D = f, I = g, A = v, M = _, L = y, N = b, j = w, B = S, F = R, U = k, W = E, q = C, V = T, H = P, z = 0; z < 80; z++) {
                    var G, K, $ = d[z];
                    if (z < 16)
                      K = $.high = 0 | e4[t4 + 2 * z], G = $.low = 0 | e4[t4 + 2 * z + 1];
                    else {
                      var J = d[z - 15], Q = J.high, Y = J.low, X = (Q >>> 1 | Y << 31) ^ (Q >>> 8 | Y << 24) ^ Q >>> 7, Z = (Y >>> 1 | Q << 31) ^ (Y >>> 8 | Q << 24) ^ (Y >>> 7 | Q << 25), ee = d[z - 2], te = ee.high, re = ee.low, ne = (te >>> 19 | re << 13) ^ (te << 3 | re >>> 29) ^ te >>> 6, se = (re >>> 19 | te << 13) ^ (re << 3 | te >>> 29) ^ (re >>> 6 | te << 26), ie = d[z - 7], ae = ie.high, oe = ie.low, ce = d[z - 16], de = ce.high, le = ce.low;
                      K = (K = (K = X + ae + ((G = Z + oe) >>> 0 < Z >>> 0 ? 1 : 0)) + ne + ((G += se) >>> 0 < se >>> 0 ? 1 : 0)) + de + ((G += le) >>> 0 < le >>> 0 ? 1 : 0), $.high = K, $.low = G;
                    }
                    var ue, pe = j & F ^ ~j & W, he = B & U ^ ~B & q, me = O & D ^ O & A ^ D & A, fe = x & I ^ x & M ^ I & M, ge = (O >>> 28 | x << 4) ^ (O << 30 | x >>> 2) ^ (O << 25 | x >>> 7), ve = (x >>> 28 | O << 4) ^ (x << 30 | O >>> 2) ^ (x << 25 | O >>> 7), _e = (j >>> 14 | B << 18) ^ (j >>> 18 | B << 14) ^ (j << 23 | B >>> 9), ye = (B >>> 14 | j << 18) ^ (B >>> 18 | j << 14) ^ (B << 23 | j >>> 9), be = c[z], we = be.high, Se = be.low, Re = V + _e + ((ue = H + ye) >>> 0 < H >>> 0 ? 1 : 0), ke = ve + fe;
                    V = W, H = q, W = F, q = U, F = j, U = B, j = L + (Re = (Re = (Re = Re + pe + ((ue += he) >>> 0 < he >>> 0 ? 1 : 0)) + we + ((ue += Se) >>> 0 < Se >>> 0 ? 1 : 0)) + K + ((ue += G) >>> 0 < G >>> 0 ? 1 : 0)) + ((B = N + ue | 0) >>> 0 < N >>> 0 ? 1 : 0) | 0, L = A, N = M, A = D, M = I, D = O, I = x, O = Re + (ge + me + (ke >>> 0 < ve >>> 0 ? 1 : 0)) + ((x = ue + ke | 0) >>> 0 < ue >>> 0 ? 1 : 0) | 0;
                  }
                  m = n3.low = m + x, n3.high = h + O + (m >>> 0 < x >>> 0 ? 1 : 0), g = s2.low = g + I, s2.high = f + D + (g >>> 0 < I >>> 0 ? 1 : 0), _ = i2.low = _ + M, i2.high = v + A + (_ >>> 0 < M >>> 0 ? 1 : 0), b = a2.low = b + N, a2.high = y + L + (b >>> 0 < N >>> 0 ? 1 : 0), S = o2.low = S + B, o2.high = w + j + (S >>> 0 < B >>> 0 ? 1 : 0), k = l2.low = k + U, l2.high = R + F + (k >>> 0 < U >>> 0 ? 1 : 0), C = u.low = C + q, u.high = E + W + (C >>> 0 < q >>> 0 ? 1 : 0), P = p.low = P + H, p.high = T + V + (P >>> 0 < H >>> 0 ? 1 : 0);
                },
                _doFinalize: function() {
                  var e4 = this._data, t4 = e4.words, r4 = 8 * this._nDataBytes, n3 = 8 * e4.sigBytes;
                  return t4[n3 >>> 5] |= 128 << 24 - n3 % 32, t4[30 + (n3 + 128 >>> 10 << 5)] = Math.floor(
                    r4 / 4294967296
                  ), t4[31 + (n3 + 128 >>> 10 << 5)] = r4, e4.sigBytes = 4 * t4.length, this._process(), this._hash.toX32();
                },
                clone: function() {
                  var e4 = t3.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                },
                blockSize: 32
              });
              e3.SHA512 = t3._createHelper(l), e3.HmacSHA512 = t3._createHmacHelper(l);
            }(), n2.SHA512);
          },
          1396: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(3240), r2(6440), r2(5503), r2(754), r2(4725), r2(4636), r2(5471), r2(3009), r2(6308), r2(1380), r2(9557), r2(5953), r2(8056), r2(1025), r2(19), r2(9506), r2(7165), r2(2169), r2(6939), r2(6372), r2(3797), r2(8454), r2(2073), r2(4905), r2(482), r2(2155), r2(8124), r2(25), r2(955), r2(7628), r2(7193), r2(6298), r2(2696), r2(3128), n2);
          },
          1765: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.deepFreeze = t2.generateRandomNumber = t2.clone = void 0, t2.clone = function(e3) {
              return void 0 === e3 ? void 0 : Number.isNaN(e3) ? NaN : "function" == typeof structuredClone ? structuredClone(e3) : JSON.parse(JSON.stringify(e3));
            }, t2.generateRandomNumber = function() {
              return Math.round(1e7 * Math.random());
            }, t2.deepFreeze = function e3(t3) {
              const r2 = Reflect.ownKeys(t3);
              for (const n2 of r2) {
                const r3 = t3[n2];
                (r3 && "object" == typeof r3 || "function" == typeof r3) && e3(r3);
              }
              return Object.freeze(t3);
            };
          },
          1767: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Firefox60 = void 0;
            const a = i(r2(7363)), o = r2(2994), c = r2(4893), d = i(r2(1765)), l = i(r2(8046)), u = i(r2(5544)), p = i(r2(5938)), h = r2(521), m = r2(1305), f = r2(3303), g = new o.Logger("Firefox60"), v = { OS: 16, MIS: 2048 };
            class _ extends h.HandlerInterface {
              static createFactory() {
                return () => new _();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Firefox60";
              }
              close() {
                if (g.debug("close()"), !this._closed) {
                  if (this._closed = true, this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                g.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require"
                }), t3 = document.createElement("canvas");
                t3.getContext("2d");
                const r3 = t3.captureStream().getVideoTracks()[0];
                try {
                  e3.addTransceiver("audio", { direction: "sendrecv" });
                  const n3 = e3.addTransceiver(r3, { direction: "sendrecv" }), s2 = n3.sender.getParameters(), i2 = [
                    { rid: "r0", maxBitrate: 1e5 },
                    { rid: "r1", maxBitrate: 5e5 }
                  ];
                  s2.encodings = i2, await n3.sender.setParameters(s2);
                  const o2 = await e3.createOffer();
                  try {
                    t3.remove();
                  } catch (e4) {
                  }
                  try {
                    r3.stop();
                  } catch (e4) {
                  }
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const c2 = a.parse(o2.sdp);
                  return u.extractRtpCapabilities({ sdpObject: c2 });
                } catch (n3) {
                  try {
                    t3.remove();
                  } catch (e4) {
                  }
                  try {
                    r3.stop();
                  } catch (e4) {
                  }
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw n3;
                }
              }
              async getNativeSctpCapabilities() {
                return g.debug("getNativeSctpCapabilities()"), { numStreams: v };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                this.assertNotClosed(), g.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2
                }), this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d2),
                  video: l.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d2),
                  video: l.getSendingRemoteRtpParameters("video", d2)
                }, this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (g.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                throw this.assertNotClosed(), new c.UnsupportedError("not supported");
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), g.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    g.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    g.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    g.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    g.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && (t3 = d.clone(t3)).length > 1 && (t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                }), t3.reverse());
                const s2 = d.clone(this._sendingRtpParametersByKind[e3.kind]);
                s2.codecs = l.reduceCodecs(s2.codecs, n3);
                const i2 = d.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                i2.codecs = l.reduceCodecs(i2.codecs, n3);
                const o2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream]
                });
                if (t3) {
                  const e4 = o2.sender.getParameters();
                  e4.encodings = t3, await o2.sender.setParameters(e4);
                }
                const c2 = await this._pc.createOffer();
                let h2 = a.parse(c2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h2
                });
                const m2 = (0, f.parse)((t3 || [{}])[0].scalabilityMode);
                g.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  c2
                ), await this._pc.setLocalDescription(c2);
                const v2 = o2.mid;
                s2.mid = v2, h2 = a.parse(this._pc.localDescription.sdp);
                const _2 = h2.media[h2.media.length - 1];
                if (s2.rtcp.cname = u.getCname({ offerMediaObject: _2 }), t3)
                  if (1 === t3.length) {
                    const e4 = p.getRtpEncodings({ offerMediaObject: _2 });
                    Object.assign(e4[0], t3[0]), s2.encodings = e4;
                  } else s2.encodings = t3.reverse();
                else s2.encodings = p.getRtpEncodings({ offerMediaObject: _2 });
                if (s2.encodings.length > 1 && ("video/vp8" === s2.codecs[0].mimeType.toLowerCase() || "video/h264" === s2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of s2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${m2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: _2,
                  offerRtpParameters: s2,
                  answerRtpParameters: i2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const y = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return g.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y
                ), await this._pc.setRemoteDescription(y), this._mapMidTransceiver.set(v2, o2), { localId: v2, rtpParameters: s2, rtpSender: o2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), g.debug("stopSending() [localId:%s]", e3), this._closed)
                  return;
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated transceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender), this._remoteSdp.disableMediaSection(t3.mid);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly", this._remoteSdp.resumeSendingMediaSection(e3);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? g.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : g.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated transceiver not found");
                const n3 = r3.sender.getParameters();
                t3 = n3.encodings.length - 1 - t3, n3.encodings.forEach((e4, r4) => {
                  e4.active = r4 >= t3;
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                g.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  n3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                g.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                g.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % v.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t4
                  }), g.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: n4,
                    rtpParameters: s3,
                    streamId: i3
                  } = t4;
                  g.debug("receive() [trackId:%s, kind:%s]", e4, n4);
                  const a2 = s3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, a2), this._remoteSdp.receive({
                    mid: a2,
                    kind: n4,
                    offerRtpParameters: s3,
                    streamId: i3 || s3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
                let s2 = await this._pc.createAnswer();
                const i2 = a.parse(s2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: n4 } = t4, o2 = r3.get(e4), c2 = i2.media.find((e5) => String(e5.mid) === o2);
                  u.applyCodecParameters({
                    offerRtpParameters: n4,
                    answerMediaObject: c2
                  }), s2 = { type: "answer", sdp: a.write(i2) };
                }
                this._transportReady || await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: i2
                }), g.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                for (const n4 of e3) {
                  const { trackId: e4 } = n4, s3 = r3.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === s3);
                  if (!i3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(s3, i3), t3.push({
                    localId: s3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  g.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  g.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  g.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                g.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: "client",
                      localSdpObject: e5
                    });
                  }
                  g.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = u.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new c.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Firefox60 = _;
          },
          1803: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { Iy: () => R, ed: () => w, sg: () => S, v7: () => _ });
            var n2 = r2(4467), s = r2(296), i = r2(9027);
            function a(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n3 = Object.getOwnPropertySymbols(e3);
                t3 && (n3 = n3.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n3);
              }
              return r3;
            }
            var o = {}, c = {}, d = {};
            for (var l in i.$.videoProfiles)
              "oneSixNine" == i.$.videoProfiles[l].aspectRatio && (o[l] = i.$.videoProfiles[l], o[l].encoding = {
                maxBitrate: o[l].bitRate,
                maxFramerate: o[l].frameRate
              }), "fourThree" == i.$.videoProfiles[l].aspectRatio && (c[l] = i.$.videoProfiles[l], c[l].encoding = {
                maxBitrate: c[l].bitRate,
                maxFramerate: c[l].frameRate
              });
            for (var l in i.$.screenShareProfiles)
              d[l] = i.$.screenShareProfiles[l], d[l].encoding = {
                maxBitrate: d[l].bitRate,
                maxFramerate: d[l].frameRate
              };
            var u = Object.values(o), p = Object.values(c), h = Object.values(d), m = [o.h180p_w320p, o.h360p_w640p], f = [c.h180p_w240p, c.h360p_w480p], g = function(e3) {
              return [{ scaleResolutionDownBy: 2, fps: 3 }].map(function(t3) {
                var r3;
                return {
                  width: Math.floor(e3.width / t3.scaleResolutionDownBy),
                  height: Math.floor(e3.height / t3.scaleResolutionDownBy),
                  encodings: {
                    maxBitrate: Math.max(
                      15e4,
                      Math.floor(
                        e3.encoding.maxBitrate / (Math.pow(t3.scaleResolutionDownBy, 2) * ((null !== (r3 = e3.encoding.maxFramerate) && void 0 !== r3 ? r3 : 30) / t3.fps))
                      )
                    ),
                    maxFramerate: t3.fps
                  }
                };
              });
            }, v = ["q", "h", "f"];
            function _(e3, t3, r3, n3, i2) {
              var a2 = n3 && n3.videoEncoding;
              e3 && (a2 = n3 && n3.screenShareEncoding);
              var o2 = null == n3 ? void 0 : n3.simulcast;
              if (a2 || (a2 = function(e4, t4, r4) {
                for (var n4 = function(e5, t5, r5) {
                  if (e5) return h;
                  var n5 = t5 > r5 ? t5 / r5 : r5 / t5;
                  if (Math.abs(n5 - 16 / 9) < Math.abs(n5 - 4 / 3))
                    return u;
                  return p;
                }(e4, t4, r4), s2 = n4[0].encoding, i3 = Math.max(t4, r4), a3 = 0; a3 < n4.length; a3 += 1) {
                  var o3 = n4[a3];
                  if (s2 = o3.encoding, o3.width >= i3) break;
                }
                return s2;
              }(e3, t3, r3)), !o2)
                return [a2];
              var c2, d2 = {
                width: t3,
                height: r3,
                encoding: {
                  maxBitrate: a2.maxBitrate,
                  maxFramerate: a2.maxFramerate
                }
              }, l2 = [], m2 = (l2 = y(e3, d2))[0];
              if (l2.length > 1) {
                var f2 = l2;
                c2 = (0, s.A)(f2, 2)[1];
              }
              var g2 = Math.max(t3, r3);
              return b(
                t3,
                r3,
                g2 >= 960 && c2 ? [m2, c2, d2] : g2 >= 480 ? [m2, d2] : [d2],
                i2
              );
            }
            function y(e3, t3) {
              if (e3) g(t3);
              var r3 = t3.width, n3 = t3.height, s2 = r3 > n3 ? r3 / n3 : n3 / r3;
              return Math.abs(s2 - 16 / 9) < Math.abs(s2 - 4 / 3) ? m : f;
            }
            function b(e3, t3, r3, s2) {
              var i2 = [];
              return r3.forEach(function(r4, o2) {
                if (!(o2 >= v.length)) {
                  var c2 = s2 ? null : { maxFramerate: r4.encoding.maxFramerate }, d2 = Math.min(e3, t3), l2 = function(e4) {
                    for (var t4 = 1; t4 < arguments.length; t4++) {
                      var r5 = null != arguments[t4] ? arguments[t4] : {};
                      t4 % 2 ? a(Object(r5), true).forEach(function(t5) {
                        (0, n2.A)(e4, t5, r5[t5]);
                      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                        e4,
                        Object.getOwnPropertyDescriptors(r5)
                      ) : a(Object(r5)).forEach(function(t5) {
                        Object.defineProperty(
                          e4,
                          t5,
                          Object.getOwnPropertyDescriptor(r5, t5)
                        );
                      });
                    }
                    return e4;
                  }(
                    {
                      rid: v[o2],
                      scaleResolutionDownBy: d2 / Math.min(r4.width, r4.height),
                      maxBitrate: r4.encoding.maxBitrate
                    },
                    c2
                  );
                  i2.push(l2);
                }
              }), i2;
            }
            function w(e3, t3, r3) {
              if (!e3) return {};
              var n3 = e3.id, s2 = e3.appData, i2 = s2.width, a2 = s2.height, o2 = s2.encodings;
              try {
                var c2 = function(e4) {
                  var t4 = [];
                  if (e4 && 0 != e4.length) {
                    if (1 === e4.length) {
                      for (var r4 = 0; r4 < 3; r4++) t4.push(Math.pow(2, 3 - r4 - 1));
                      return t4;
                    }
                    var n4 = false;
                    return e4.forEach(function(e5) {
                      void 0 !== e5.scaleResolutionDownBy ? (n4 = true, t4.push(Math.max(1, e5.scaleResolutionDownBy))) : t4.push(1);
                    }), n4 || e4.forEach(function(r5, n5) {
                      t4[n5] = Math.pow(2, e4.length - n5 - 1);
                    }), t4;
                  }
                }(o2);
                if (!c2) return {};
                var d2 = c2.map(function(e4) {
                  return { width: i2 / e4, height: a2 / e4 };
                }).sort(function(e4, t4) {
                  return e4.width - t4.width;
                }), l2 = d2.findIndex(function(e4) {
                  return e4.width >= t3 && e4.height >= r3;
                });
                -1 === l2 && (l2 = d2.length - 1);
                var u2 = e3.temporalLayers ? e3.temporalLayers : 2;
                if (0 === l2 && u2 > 0) {
                  var p2 = i2 / c2[0], h2 = a2 / c2[0];
                  t3 < 0.5 * p2 && r3 < 0.5 * h2 && (u2 -= 1), u2 > 0 && t3 < 0.25 * p2 && r3 < 0.25 * h2 && (u2 -= 1);
                }
                return {
                  consumerId: n3,
                  newPreferredSpatialLayer: Math.max(0, l2),
                  newPreferredTemporalLayer: Math.max(0, u2)
                };
              } catch (e4) {
                return {};
              }
            }
            function S(e3, t3) {
              var r3;
              return function() {
                for (var n3 = this, s2 = arguments.length, i2 = new Array(s2), a2 = 0; a2 < s2; a2++)
                  i2[a2] = arguments[a2];
                clearTimeout(r3), r3 = setTimeout(function() {
                  return e3.apply(n3, i2);
                }, t3);
              };
            }
            function R(e3) {
              var t3 = window.innerHeight || document.documentElement.clientHeight, r3 = window.innerWidth || document.documentElement.clientWidth, n3 = e3.top < t3 && e3.bottom > 0, s2 = e3.left < r3 && e3.right > 0;
              return n3 && s2;
            }
          },
          1806: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { $Q: () => n2, T4: () => s, Ts: () => a, ue: () => i });
            var n2 = "vk_e2ee", s = {
              sharedKey: false,
              ratchetSalt: "VideoSDKEncryptionRatchetSalt",
              ratchetWindowSize: 0,
              failureTolerance: 10,
              keyringSize: 16,
              discardFrameWhenCryptorNotReady: false
            }, i = ["vp8", "vp9", "h264", "av1"], a = ["opus"];
          },
          1919: (e2, t2, r2) => {
            "use strict";
            r2.r(t2), r2.d(t2, { default: () => Ar });
            var n2 = {};
            r2.r(n2), r2.d(n2, {
              Decoder: () => Ee,
              Encoder: () => Re,
              PacketType: () => Se,
              protocol: () => we
            });
            var s = r2(296), i = r2(2284), a = r2(467), o = r2(3029), c = r2(2901), d = r2(4467), l = r2(4756), u = r2.n(l);
            const p = /* @__PURE__ */ Object.create(null);
            p.open = "0", p.close = "1", p.ping = "2", p.pong = "3", p.message = "4", p.upgrade = "5", p.noop = "6";
            const h = /* @__PURE__ */ Object.create(null);
            Object.keys(p).forEach((e3) => {
              h[p[e3]] = e3;
            });
            const m = { type: "error", data: "parser error" }, f = "function" == typeof Blob || "undefined" != typeof Blob && "[object BlobConstructor]" === Object.prototype.toString.call(Blob), g = "function" == typeof ArrayBuffer, v = (e3) => "function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(e3) : e3 && e3.buffer instanceof ArrayBuffer, _ = ({ type: e3, data: t3 }, r3, n3) => f && t3 instanceof Blob ? r3 ? n3(t3) : y(t3, n3) : g && (t3 instanceof ArrayBuffer || v(t3)) ? r3 ? n3(t3) : y(new Blob([t3]), n3) : n3(p[e3] + (t3 || "")), y = (e3, t3) => {
              const r3 = new FileReader();
              return r3.onload = function() {
                const e4 = r3.result.split(",")[1];
                t3("b" + (e4 || ""));
              }, r3.readAsDataURL(e3);
            };
            function b(e3) {
              return e3 instanceof Uint8Array ? e3 : e3 instanceof ArrayBuffer ? new Uint8Array(e3) : new Uint8Array(e3.buffer, e3.byteOffset, e3.byteLength);
            }
            let w;
            const S = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", R = "undefined" == typeof Uint8Array ? [] : new Uint8Array(256);
            for (let e3 = 0; e3 < 64; e3++) R[S.charCodeAt(e3)] = e3;
            const k = "function" == typeof ArrayBuffer, E = (e3, t3) => {
              if ("string" != typeof e3)
                return { type: "message", data: T(e3, t3) };
              const r3 = e3.charAt(0);
              if ("b" === r3)
                return { type: "message", data: C(e3.substring(1), t3) };
              return h[r3] ? e3.length > 1 ? { type: h[r3], data: e3.substring(1) } : { type: h[r3] } : m;
            }, C = (e3, t3) => {
              if (k) {
                const r3 = ((e4) => {
                  let t4, r4, n3, s2, i2, a2 = 0.75 * e4.length, o2 = e4.length, c2 = 0;
                  "=" === e4[e4.length - 1] && (a2--, "=" === e4[e4.length - 2] && a2--);
                  const d2 = new ArrayBuffer(a2), l2 = new Uint8Array(d2);
                  for (t4 = 0; t4 < o2; t4 += 4)
                    r4 = R[e4.charCodeAt(t4)], n3 = R[e4.charCodeAt(t4 + 1)], s2 = R[e4.charCodeAt(t4 + 2)], i2 = R[e4.charCodeAt(t4 + 3)], l2[c2++] = r4 << 2 | n3 >> 4, l2[c2++] = (15 & n3) << 4 | s2 >> 2, l2[c2++] = (3 & s2) << 6 | 63 & i2;
                  return d2;
                })(e3);
                return T(r3, t3);
              }
              return { base64: true, data: e3 };
            }, T = (e3, t3) => "blob" === t3 ? e3 instanceof Blob ? e3 : new Blob([e3]) : e3 instanceof ArrayBuffer ? e3 : e3.buffer, P = String.fromCharCode(30);
            function O() {
              return new TransformStream({
                transform(e3, t3) {
                  !function(e4, t4) {
                    f && e4.data instanceof Blob ? e4.data.arrayBuffer().then(b).then(t4) : g && (e4.data instanceof ArrayBuffer || v(e4.data)) ? t4(b(e4.data)) : _(e4, false, (e5) => {
                      w || (w = new TextEncoder()), t4(w.encode(e5));
                    });
                  }(e3, (r3) => {
                    const n3 = r3.length;
                    let s2;
                    if (n3 < 126)
                      s2 = new Uint8Array(1), new DataView(s2.buffer).setUint8(0, n3);
                    else if (n3 < 65536) {
                      s2 = new Uint8Array(3);
                      const e4 = new DataView(s2.buffer);
                      e4.setUint8(0, 126), e4.setUint16(1, n3);
                    } else {
                      s2 = new Uint8Array(9);
                      const e4 = new DataView(s2.buffer);
                      e4.setUint8(0, 127), e4.setBigUint64(1, BigInt(n3));
                    }
                    e3.data && "string" != typeof e3.data && (s2[0] |= 128), t3.enqueue(s2), t3.enqueue(r3);
                  });
                }
              });
            }
            let x;
            function D(e3) {
              return e3.reduce((e4, t3) => e4 + t3.length, 0);
            }
            function I(e3, t3) {
              if (e3[0].length === t3) return e3.shift();
              const r3 = new Uint8Array(t3);
              let n3 = 0;
              for (let s2 = 0; s2 < t3; s2++)
                r3[s2] = e3[0][n3++], n3 === e3[0].length && (e3.shift(), n3 = 0);
              return e3.length && n3 < e3[0].length && (e3[0] = e3[0].slice(n3)), r3;
            }
            function A(e3) {
              if (e3)
                return function(e4) {
                  for (var t3 in A.prototype) e4[t3] = A.prototype[t3];
                  return e4;
                }(e3);
            }
            A.prototype.on = A.prototype.addEventListener = function(e3, t3) {
              return this._callbacks = this._callbacks || {}, (this._callbacks["$" + e3] = this._callbacks["$" + e3] || []).push(t3), this;
            }, A.prototype.once = function(e3, t3) {
              function r3() {
                this.off(e3, r3), t3.apply(this, arguments);
              }
              return r3.fn = t3, this.on(e3, r3), this;
            }, A.prototype.off = A.prototype.removeListener = A.prototype.removeAllListeners = A.prototype.removeEventListener = function(e3, t3) {
              if (this._callbacks = this._callbacks || {}, 0 == arguments.length)
                return this._callbacks = {}, this;
              var r3, n3 = this._callbacks["$" + e3];
              if (!n3) return this;
              if (1 == arguments.length)
                return delete this._callbacks["$" + e3], this;
              for (var s2 = 0; s2 < n3.length; s2++)
                if ((r3 = n3[s2]) === t3 || r3.fn === t3) {
                  n3.splice(s2, 1);
                  break;
                }
              return 0 === n3.length && delete this._callbacks["$" + e3], this;
            }, A.prototype.emit = function(e3) {
              this._callbacks = this._callbacks || {};
              for (var t3 = new Array(arguments.length - 1), r3 = this._callbacks["$" + e3], n3 = 1; n3 < arguments.length; n3++)
                t3[n3 - 1] = arguments[n3];
              if (r3) {
                n3 = 0;
                for (var s2 = (r3 = r3.slice(0)).length; n3 < s2; ++n3)
                  r3[n3].apply(this, t3);
              }
              return this;
            }, A.prototype.emitReserved = A.prototype.emit, A.prototype.listeners = function(e3) {
              return this._callbacks = this._callbacks || {}, this._callbacks["$" + e3] || [];
            }, A.prototype.hasListeners = function(e3) {
              return !!this.listeners(e3).length;
            };
            const M = "function" == typeof Promise && "function" == typeof Promise.resolve ? (e3) => Promise.resolve().then(e3) : (e3, t3) => t3(e3, 0), L = "undefined" != typeof self ? self : "undefined" != typeof window ? window : Function("return this")();
            function N(e3, ...t3) {
              return t3.reduce(
                (t4, r3) => (e3.hasOwnProperty(r3) && (t4[r3] = e3[r3]), t4),
                {}
              );
            }
            const j = L.setTimeout, B = L.clearTimeout;
            function F(e3, t3) {
              t3.useNativeTimers ? (e3.setTimeoutFn = j.bind(L), e3.clearTimeoutFn = B.bind(L)) : (e3.setTimeoutFn = L.setTimeout.bind(L), e3.clearTimeoutFn = L.clearTimeout.bind(L));
            }
            function U() {
              return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5);
            }
            class W extends Error {
              constructor(e3, t3, r3) {
                super(e3), this.description = t3, this.context = r3, this.type = "TransportError";
              }
            }
            class q extends A {
              constructor(e3) {
                super(), this.writable = false, F(this, e3), this.opts = e3, this.query = e3.query, this.socket = e3.socket, this.supportsBinary = !e3.forceBase64;
              }
              onError(e3, t3, r3) {
                return super.emitReserved("error", new W(e3, t3, r3)), this;
              }
              open() {
                return this.readyState = "opening", this.doOpen(), this;
              }
              close() {
                return "opening" !== this.readyState && "open" !== this.readyState || (this.doClose(), this.onClose()), this;
              }
              send(e3) {
                "open" === this.readyState && this.write(e3);
              }
              onOpen() {
                this.readyState = "open", this.writable = true, super.emitReserved("open");
              }
              onData(e3) {
                const t3 = E(e3, this.socket.binaryType);
                this.onPacket(t3);
              }
              onPacket(e3) {
                super.emitReserved("packet", e3);
              }
              onClose(e3) {
                this.readyState = "closed", super.emitReserved("close", e3);
              }
              pause(e3) {
              }
              createUri(e3, t3 = {}) {
                return e3 + "://" + this._hostname() + this._port() + this.opts.path + this._query(t3);
              }
              _hostname() {
                const e3 = this.opts.hostname;
                return -1 === e3.indexOf(":") ? e3 : "[" + e3 + "]";
              }
              _port() {
                return this.opts.port && (this.opts.secure && Number(443 !== this.opts.port) || !this.opts.secure && 80 !== Number(this.opts.port)) ? ":" + this.opts.port : "";
              }
              _query(e3) {
                const t3 = function(e4) {
                  let t4 = "";
                  for (let r3 in e4)
                    e4.hasOwnProperty(r3) && (t4.length && (t4 += "&"), t4 += encodeURIComponent(r3) + "=" + encodeURIComponent(e4[r3]));
                  return t4;
                }(e3);
                return t3.length ? "?" + t3 : "";
              }
            }
            class V extends q {
              constructor() {
                super(...arguments), this._polling = false;
              }
              get name() {
                return "polling";
              }
              doOpen() {
                this._poll();
              }
              pause(e3) {
                this.readyState = "pausing";
                const t3 = () => {
                  this.readyState = "paused", e3();
                };
                if (this._polling || !this.writable) {
                  let e4 = 0;
                  this._polling && (e4++, this.once("pollComplete", function() {
                    --e4 || t3();
                  })), this.writable || (e4++, this.once("drain", function() {
                    --e4 || t3();
                  }));
                } else t3();
              }
              _poll() {
                this._polling = true, this.doPoll(), this.emitReserved("poll");
              }
              onData(e3) {
                ((e4, t3) => {
                  const r3 = e4.split(P), n3 = [];
                  for (let e5 = 0; e5 < r3.length; e5++) {
                    const s2 = E(r3[e5], t3);
                    if (n3.push(s2), "error" === s2.type) break;
                  }
                  return n3;
                })(e3, this.socket.binaryType).forEach((e4) => {
                  if ("opening" === this.readyState && "open" === e4.type && this.onOpen(), "close" === e4.type)
                    return this.onClose({
                      description: "transport closed by the server"
                    }), false;
                  this.onPacket(e4);
                }), "closed" !== this.readyState && (this._polling = false, this.emitReserved("pollComplete"), "open" === this.readyState && this._poll());
              }
              doClose() {
                const e3 = () => {
                  this.write([{ type: "close" }]);
                };
                "open" === this.readyState ? e3() : this.once("open", e3);
              }
              write(e3) {
                this.writable = false, ((e4, t3) => {
                  const r3 = e4.length, n3 = new Array(r3);
                  let s2 = 0;
                  e4.forEach((e5, i2) => {
                    _(e5, false, (e6) => {
                      n3[i2] = e6, ++s2 === r3 && t3(n3.join(P));
                    });
                  });
                })(e3, (e4) => {
                  this.doWrite(e4, () => {
                    this.writable = true, this.emitReserved("drain");
                  });
                });
              }
              uri() {
                const e3 = this.opts.secure ? "https" : "http", t3 = this.query || {};
                return false !== this.opts.timestampRequests && (t3[this.opts.timestampParam] = U()), this.supportsBinary || t3.sid || (t3.b64 = 1), this.createUri(e3, t3);
              }
            }
            let H = false;
            try {
              H = "undefined" != typeof XMLHttpRequest && "withCredentials" in new XMLHttpRequest();
            } catch (e3) {
            }
            const z = H;
            function G() {
            }
            class K extends V {
              constructor(e3) {
                if (super(e3), "undefined" != typeof location) {
                  const t3 = "https:" === location.protocol;
                  let r3 = location.port;
                  r3 || (r3 = t3 ? "443" : "80"), this.xd = "undefined" != typeof location && e3.hostname !== location.hostname || r3 !== e3.port;
                }
              }
              doWrite(e3, t3) {
                const r3 = this.request({ method: "POST", data: e3 });
                r3.on("success", t3), r3.on("error", (e4, t4) => {
                  this.onError("xhr post error", e4, t4);
                });
              }
              doPoll() {
                const e3 = this.request();
                e3.on("data", this.onData.bind(this)), e3.on("error", (e4, t3) => {
                  this.onError("xhr poll error", e4, t3);
                }), this.pollXhr = e3;
              }
            }
            class $ extends A {
              constructor(e3, t3, r3) {
                super(), this.createRequest = e3, F(this, r3), this._opts = r3, this._method = r3.method || "GET", this._uri = t3, this._data = void 0 !== r3.data ? r3.data : null, this._create();
              }
              _create() {
                var e3;
                const t3 = N(
                  this._opts,
                  "agent",
                  "pfx",
                  "key",
                  "passphrase",
                  "cert",
                  "ca",
                  "ciphers",
                  "rejectUnauthorized",
                  "autoUnref"
                );
                t3.xdomain = !!this._opts.xd;
                const r3 = this._xhr = this.createRequest(t3);
                try {
                  r3.open(this._method, this._uri, true);
                  try {
                    if (this._opts.extraHeaders) {
                      r3.setDisableHeaderCheck && r3.setDisableHeaderCheck(true);
                      for (let e4 in this._opts.extraHeaders)
                        this._opts.extraHeaders.hasOwnProperty(e4) && r3.setRequestHeader(e4, this._opts.extraHeaders[e4]);
                    }
                  } catch (e4) {
                  }
                  if ("POST" === this._method)
                    try {
                      r3.setRequestHeader(
                        "Content-type",
                        "text/plain;charset=UTF-8"
                      );
                    } catch (e4) {
                    }
                  try {
                    r3.setRequestHeader("Accept", "*/*");
                  } catch (e4) {
                  }
                  null === (e3 = this._opts.cookieJar) || void 0 === e3 || e3.addCookies(r3), "withCredentials" in r3 && (r3.withCredentials = this._opts.withCredentials), this._opts.requestTimeout && (r3.timeout = this._opts.requestTimeout), r3.onreadystatechange = () => {
                    var e4;
                    3 === r3.readyState && (null === (e4 = this._opts.cookieJar) || void 0 === e4 || e4.parseCookies(r3.getResponseHeader("set-cookie"))), 4 === r3.readyState && (200 === r3.status || 1223 === r3.status ? this._onLoad() : this.setTimeoutFn(() => {
                      this._onError(
                        "number" == typeof r3.status ? r3.status : 0
                      );
                    }, 0));
                  }, r3.send(this._data);
                } catch (e4) {
                  return void this.setTimeoutFn(() => {
                    this._onError(e4);
                  }, 0);
                }
                "undefined" != typeof document && (this._index = $.requestsCount++, $.requests[this._index] = this);
              }
              _onError(e3) {
                this.emitReserved("error", e3, this._xhr), this._cleanup(true);
              }
              _cleanup(e3) {
                if (void 0 !== this._xhr && null !== this._xhr) {
                  if (this._xhr.onreadystatechange = G, e3)
                    try {
                      this._xhr.abort();
                    } catch (e4) {
                    }
                  "undefined" != typeof document && delete $.requests[this._index], this._xhr = null;
                }
              }
              _onLoad() {
                const e3 = this._xhr.responseText;
                null !== e3 && (this.emitReserved("data", e3), this.emitReserved("success"), this._cleanup());
              }
              abort() {
                this._cleanup();
              }
            }
            if ($.requestsCount = 0, $.requests = {}, "undefined" != typeof document) {
              if ("function" == typeof attachEvent) attachEvent("onunload", J);
              else if ("function" == typeof addEventListener) {
                addEventListener(
                  "onpagehide" in L ? "pagehide" : "unload",
                  J,
                  false
                );
              }
            }
            function J() {
              for (let e3 in $.requests)
                $.requests.hasOwnProperty(e3) && $.requests[e3].abort();
            }
            const Q = function() {
              const e3 = Y({ xdomain: false });
              return e3 && null !== e3.responseType;
            }();
            function Y(e3) {
              const t3 = e3.xdomain;
              try {
                if ("undefined" != typeof XMLHttpRequest && (!t3 || z))
                  return new XMLHttpRequest();
              } catch (e4) {
              }
              if (!t3)
                try {
                  return new L[["Active"].concat("Object").join("X")](
                    "Microsoft.XMLHTTP"
                  );
                } catch (e4) {
                }
            }
            const X = "undefined" != typeof navigator && "string" == typeof navigator.product && "reactnative" === navigator.product.toLowerCase();
            class Z extends q {
              get name() {
                return "websocket";
              }
              doOpen() {
                const e3 = this.uri(), t3 = this.opts.protocols, r3 = X ? {} : N(
                  this.opts,
                  "agent",
                  "perMessageDeflate",
                  "pfx",
                  "key",
                  "passphrase",
                  "cert",
                  "ca",
                  "ciphers",
                  "rejectUnauthorized",
                  "localAddress",
                  "protocolVersion",
                  "origin",
                  "maxPayload",
                  "family",
                  "checkServerIdentity"
                );
                this.opts.extraHeaders && (r3.headers = this.opts.extraHeaders);
                try {
                  this.ws = this.createSocket(e3, t3, r3);
                } catch (e4) {
                  return this.emitReserved("error", e4);
                }
                this.ws.binaryType = this.socket.binaryType, this.addEventListeners();
              }
              addEventListeners() {
                this.ws.onopen = () => {
                  this.opts.autoUnref && this.ws._socket.unref(), this.onOpen();
                }, this.ws.onclose = (e3) => this.onClose({
                  description: "websocket connection closed",
                  context: e3
                }), this.ws.onmessage = (e3) => this.onData(e3.data), this.ws.onerror = (e3) => this.onError("websocket error", e3);
              }
              write(e3) {
                this.writable = false;
                for (let t3 = 0; t3 < e3.length; t3++) {
                  const r3 = e3[t3], n3 = t3 === e3.length - 1;
                  _(r3, this.supportsBinary, (e4) => {
                    try {
                      this.doWrite(r3, e4);
                    } catch (e5) {
                    }
                    n3 && M(() => {
                      this.writable = true, this.emitReserved("drain");
                    }, this.setTimeoutFn);
                  });
                }
              }
              doClose() {
                void 0 !== this.ws && (this.ws.onerror = () => {
                }, this.ws.close(), this.ws = null);
              }
              uri() {
                const e3 = this.opts.secure ? "wss" : "ws", t3 = this.query || {};
                return this.opts.timestampRequests && (t3[this.opts.timestampParam] = U()), this.supportsBinary || (t3.b64 = 1), this.createUri(e3, t3);
              }
            }
            const ee = L.WebSocket || L.MozWebSocket;
            const te = {
              websocket: class extends Z {
                createSocket(e3, t3, r3) {
                  return X ? new ee(e3, t3, r3) : t3 ? new ee(e3, t3) : new ee(e3);
                }
                doWrite(e3, t3) {
                  this.ws.send(t3);
                }
              },
              webtransport: class extends q {
                get name() {
                  return "webtransport";
                }
                doOpen() {
                  try {
                    this._transport = new WebTransport(
                      this.createUri("https"),
                      this.opts.transportOptions[this.name]
                    );
                  } catch (e3) {
                    return this.emitReserved("error", e3);
                  }
                  this._transport.closed.then(() => {
                    this.onClose();
                  }).catch((e3) => {
                    this.onError("webtransport error", e3);
                  }), this._transport.ready.then(() => {
                    this._transport.createBidirectionalStream().then((e3) => {
                      const t3 = function(e4, t4) {
                        x || (x = new TextDecoder());
                        const r4 = [];
                        let n4 = 0, s3 = -1, i3 = false;
                        return new TransformStream({
                          transform(a2, o2) {
                            for (r4.push(a2); ; ) {
                              if (0 === n4) {
                                if (D(r4) < 1) break;
                                const e5 = I(r4, 1);
                                i3 = !(128 & ~e5[0]), s3 = 127 & e5[0], n4 = s3 < 126 ? 3 : 126 === s3 ? 1 : 2;
                              } else if (1 === n4) {
                                if (D(r4) < 2) break;
                                const e5 = I(r4, 2);
                                s3 = new DataView(
                                  e5.buffer,
                                  e5.byteOffset,
                                  e5.length
                                ).getUint16(0), n4 = 3;
                              } else if (2 === n4) {
                                if (D(r4) < 8) break;
                                const e5 = I(r4, 8), t5 = new DataView(
                                  e5.buffer,
                                  e5.byteOffset,
                                  e5.length
                                ), i4 = t5.getUint32(0);
                                if (i4 > Math.pow(2, 21) - 1) {
                                  o2.enqueue(m);
                                  break;
                                }
                                s3 = i4 * Math.pow(2, 32) + t5.getUint32(4), n4 = 3;
                              } else {
                                if (D(r4) < s3) break;
                                const e5 = I(r4, s3);
                                o2.enqueue(E(i3 ? e5 : x.decode(e5), t4)), n4 = 0;
                              }
                              if (0 === s3 || s3 > e4) {
                                o2.enqueue(m);
                                break;
                              }
                            }
                          }
                        });
                      }(Number.MAX_SAFE_INTEGER, this.socket.binaryType), r3 = e3.readable.pipeThrough(t3).getReader(), n3 = O();
                      n3.readable.pipeTo(e3.writable), this._writer = n3.writable.getWriter();
                      const s2 = () => {
                        r3.read().then(({ done: e4, value: t4 }) => {
                          e4 || (this.onPacket(t4), s2());
                        }).catch((e4) => {
                        });
                      };
                      s2();
                      const i2 = { type: "open" };
                      this.query.sid && (i2.data = `{"sid":"${this.query.sid}"}`), this._writer.write(i2).then(() => this.onOpen());
                    });
                  });
                }
                write(e3) {
                  this.writable = false;
                  for (let t3 = 0; t3 < e3.length; t3++) {
                    const r3 = e3[t3], n3 = t3 === e3.length - 1;
                    this._writer.write(r3).then(() => {
                      n3 && M(() => {
                        this.writable = true, this.emitReserved("drain");
                      }, this.setTimeoutFn);
                    });
                  }
                }
                doClose() {
                  var e3;
                  null === (e3 = this._transport) || void 0 === e3 || e3.close();
                }
              },
              polling: class extends K {
                constructor(e3) {
                  super(e3);
                  const t3 = e3 && e3.forceBase64;
                  this.supportsBinary = Q && !t3;
                }
                request(e3 = {}) {
                  return Object.assign(e3, { xd: this.xd }, this.opts), new $(Y, this.uri(), e3);
                }
              }
            }, re = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/, ne = [
              "source",
              "protocol",
              "authority",
              "userInfo",
              "user",
              "password",
              "host",
              "port",
              "relative",
              "path",
              "directory",
              "file",
              "query",
              "anchor"
            ];
            function se(e3) {
              if (e3.length > 8e3) throw "URI too long";
              const t3 = e3, r3 = e3.indexOf("["), n3 = e3.indexOf("]");
              -1 != r3 && -1 != n3 && (e3 = e3.substring(0, r3) + e3.substring(r3, n3).replace(/:/g, ";") + e3.substring(n3, e3.length));
              let s2 = re.exec(e3 || ""), i2 = {}, a2 = 14;
              for (; a2--; ) i2[ne[a2]] = s2[a2] || "";
              return -1 != r3 && -1 != n3 && (i2.source = t3, i2.host = i2.host.substring(1, i2.host.length - 1).replace(/;/g, ":"), i2.authority = i2.authority.replace("[", "").replace("]", "").replace(/;/g, ":"), i2.ipv6uri = true), i2.pathNames = function(e4, t4) {
                const r4 = /\/{2,9}/g, n4 = t4.replace(r4, "/").split("/");
                "/" != t4.slice(0, 1) && 0 !== t4.length || n4.splice(0, 1);
                "/" == t4.slice(-1) && n4.splice(n4.length - 1, 1);
                return n4;
              }(0, i2.path), i2.queryKey = function(e4, t4) {
                const r4 = {};
                return t4.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function(e5, t5, n4) {
                  t5 && (r4[t5] = n4);
                }), r4;
              }(0, i2.query), i2;
            }
            const ie = "function" == typeof addEventListener && "function" == typeof removeEventListener, ae = [];
            ie && addEventListener(
              "offline",
              () => {
                ae.forEach((e3) => e3());
              },
              false
            );
            class oe extends A {
              constructor(e3, t3) {
                if (super(), this.binaryType = "arraybuffer", this.writeBuffer = [], this._prevBufferLen = 0, this._pingInterval = -1, this._pingTimeout = -1, this._maxPayload = -1, this._pingTimeoutTime = 1 / 0, e3 && "object" == typeof e3 && (t3 = e3, e3 = null), e3) {
                  const r3 = se(e3);
                  t3.hostname = r3.host, t3.secure = "https" === r3.protocol || "wss" === r3.protocol, t3.port = r3.port, r3.query && (t3.query = r3.query);
                } else t3.host && (t3.hostname = se(t3.host).host);
                F(this, t3), this.secure = null != t3.secure ? t3.secure : "undefined" != typeof location && "https:" === location.protocol, t3.hostname && !t3.port && (t3.port = this.secure ? "443" : "80"), this.hostname = t3.hostname || ("undefined" != typeof location ? location.hostname : "localhost"), this.port = t3.port || ("undefined" != typeof location && location.port ? location.port : this.secure ? "443" : "80"), this.transports = [], this._transportsByName = {}, t3.transports.forEach((e4) => {
                  const t4 = e4.prototype.name;
                  this.transports.push(t4), this._transportsByName[t4] = e4;
                }), this.opts = Object.assign(
                  {
                    path: "/engine.io",
                    agent: false,
                    withCredentials: false,
                    upgrade: true,
                    timestampParam: "t",
                    rememberUpgrade: false,
                    addTrailingSlash: true,
                    rejectUnauthorized: true,
                    perMessageDeflate: { threshold: 1024 },
                    transportOptions: {},
                    closeOnBeforeunload: false
                  },
                  t3
                ), this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : ""), "string" == typeof this.opts.query && (this.opts.query = function(e4) {
                  let t4 = {}, r3 = e4.split("&");
                  for (let e5 = 0, n3 = r3.length; e5 < n3; e5++) {
                    let n4 = r3[e5].split("=");
                    t4[decodeURIComponent(n4[0])] = decodeURIComponent(n4[1]);
                  }
                  return t4;
                }(this.opts.query)), ie && (this.opts.closeOnBeforeunload && (this._beforeunloadEventListener = () => {
                  this.transport && (this.transport.removeAllListeners(), this.transport.close());
                }, addEventListener(
                  "beforeunload",
                  this._beforeunloadEventListener,
                  false
                )), "localhost" !== this.hostname && (this._offlineEventListener = () => {
                  this._onClose("transport close", {
                    description: "network connection lost"
                  });
                }, ae.push(this._offlineEventListener))), this.opts.withCredentials && (this._cookieJar = void 0), this._open();
              }
              createTransport(e3) {
                const t3 = Object.assign({}, this.opts.query);
                t3.EIO = 4, t3.transport = e3, this.id && (t3.sid = this.id);
                const r3 = Object.assign(
                  {},
                  this.opts,
                  {
                    query: t3,
                    socket: this,
                    hostname: this.hostname,
                    secure: this.secure,
                    port: this.port
                  },
                  this.opts.transportOptions[e3]
                );
                return new this._transportsByName[e3](r3);
              }
              _open() {
                if (0 === this.transports.length)
                  return void this.setTimeoutFn(() => {
                    this.emitReserved("error", "No transports available");
                  }, 0);
                const e3 = this.opts.rememberUpgrade && oe.priorWebsocketSuccess && -1 !== this.transports.indexOf("websocket") ? "websocket" : this.transports[0];
                this.readyState = "opening";
                const t3 = this.createTransport(e3);
                t3.open(), this.setTransport(t3);
              }
              setTransport(e3) {
                this.transport && this.transport.removeAllListeners(), this.transport = e3, e3.on("drain", this._onDrain.bind(this)).on("packet", this._onPacket.bind(this)).on("error", this._onError.bind(this)).on("close", (e4) => this._onClose("transport close", e4));
              }
              onOpen() {
                this.readyState = "open", oe.priorWebsocketSuccess = "websocket" === this.transport.name, this.emitReserved("open"), this.flush();
              }
              _onPacket(e3) {
                if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState)
                  switch (this.emitReserved("packet", e3), this.emitReserved("heartbeat"), e3.type) {
                    case "open":
                      this.onHandshake(JSON.parse(e3.data));
                      break;
                    case "ping":
                      this._sendPacket("pong"), this.emitReserved("ping"), this.emitReserved("pong"), this._resetPingTimeout();
                      break;
                    case "error":
                      const t3 = new Error("server error");
                      t3.code = e3.data, this._onError(t3);
                      break;
                    case "message":
                      this.emitReserved("data", e3.data), this.emitReserved("message", e3.data);
                  }
              }
              onHandshake(e3) {
                this.emitReserved("handshake", e3), this.id = e3.sid, this.transport.query.sid = e3.sid, this._pingInterval = e3.pingInterval, this._pingTimeout = e3.pingTimeout, this._maxPayload = e3.maxPayload, this.onOpen(), "closed" !== this.readyState && this._resetPingTimeout();
              }
              _resetPingTimeout() {
                this.clearTimeoutFn(this._pingTimeoutTimer);
                const e3 = this._pingInterval + this._pingTimeout;
                this._pingTimeoutTime = Date.now() + e3, this._pingTimeoutTimer = this.setTimeoutFn(() => {
                  this._onClose("ping timeout");
                }, e3), this.opts.autoUnref && this._pingTimeoutTimer.unref();
              }
              _onDrain() {
                this.writeBuffer.splice(0, this._prevBufferLen), this._prevBufferLen = 0, 0 === this.writeBuffer.length ? this.emitReserved("drain") : this.flush();
              }
              flush() {
                if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
                  const e3 = this._getWritablePackets();
                  this.transport.send(e3), this._prevBufferLen = e3.length, this.emitReserved("flush");
                }
              }
              _getWritablePackets() {
                if (!(this._maxPayload && "polling" === this.transport.name && this.writeBuffer.length > 1))
                  return this.writeBuffer;
                let e3 = 1;
                for (let r3 = 0; r3 < this.writeBuffer.length; r3++) {
                  const n3 = this.writeBuffer[r3].data;
                  if (n3 && (e3 += "string" == typeof (t3 = n3) ? function(e4) {
                    let t4 = 0, r4 = 0;
                    for (let n4 = 0, s2 = e4.length; n4 < s2; n4++)
                      t4 = e4.charCodeAt(n4), t4 < 128 ? r4 += 1 : t4 < 2048 ? r4 += 2 : t4 < 55296 || t4 >= 57344 ? r4 += 3 : (n4++, r4 += 4);
                    return r4;
                  }(t3) : Math.ceil(1.33 * (t3.byteLength || t3.size))), r3 > 0 && e3 > this._maxPayload)
                    return this.writeBuffer.slice(0, r3);
                  e3 += 2;
                }
                var t3;
                return this.writeBuffer;
              }
              _hasPingExpired() {
                if (!this._pingTimeoutTime) return true;
                const e3 = Date.now() > this._pingTimeoutTime;
                return e3 && (this._pingTimeoutTime = 0, M(() => {
                  this._onClose("ping timeout");
                }, this.setTimeoutFn)), e3;
              }
              write(e3, t3, r3) {
                return this._sendPacket("message", e3, t3, r3), this;
              }
              send(e3, t3, r3) {
                return this._sendPacket("message", e3, t3, r3), this;
              }
              _sendPacket(e3, t3, r3, n3) {
                if ("function" == typeof t3 && (n3 = t3, t3 = void 0), "function" == typeof r3 && (n3 = r3, r3 = null), "closing" === this.readyState || "closed" === this.readyState)
                  return;
                (r3 = r3 || {}).compress = false !== r3.compress;
                const s2 = { type: e3, data: t3, options: r3 };
                this.emitReserved("packetCreate", s2), this.writeBuffer.push(s2), n3 && this.once("flush", n3), this.flush();
              }
              close() {
                const e3 = () => {
                  this._onClose("forced close"), this.transport.close();
                }, t3 = () => {
                  this.off("upgrade", t3), this.off("upgradeError", t3), e3();
                }, r3 = () => {
                  this.once("upgrade", t3), this.once("upgradeError", t3);
                };
                return "opening" !== this.readyState && "open" !== this.readyState || (this.readyState = "closing", this.writeBuffer.length ? this.once("drain", () => {
                  this.upgrading ? r3() : e3();
                }) : this.upgrading ? r3() : e3()), this;
              }
              _onError(e3) {
                if (oe.priorWebsocketSuccess = false, this.opts.tryAllTransports && this.transports.length > 1 && "opening" === this.readyState)
                  return this.transports.shift(), this._open();
                this.emitReserved("error", e3), this._onClose("transport error", e3);
              }
              _onClose(e3, t3) {
                if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
                  if (this.clearTimeoutFn(this._pingTimeoutTimer), this.transport.removeAllListeners("close"), this.transport.close(), this.transport.removeAllListeners(), ie && (this._beforeunloadEventListener && removeEventListener(
                    "beforeunload",
                    this._beforeunloadEventListener,
                    false
                  ), this._offlineEventListener)) {
                    const e4 = ae.indexOf(this._offlineEventListener);
                    -1 !== e4 && ae.splice(e4, 1);
                  }
                  this.readyState = "closed", this.id = null, this.emitReserved("close", e3, t3), this.writeBuffer = [], this._prevBufferLen = 0;
                }
              }
            }
            oe.protocol = 4;
            class ce extends oe {
              constructor() {
                super(...arguments), this._upgrades = [];
              }
              onOpen() {
                if (super.onOpen(), "open" === this.readyState && this.opts.upgrade)
                  for (let e3 = 0; e3 < this._upgrades.length; e3++)
                    this._probe(this._upgrades[e3]);
              }
              _probe(e3) {
                let t3 = this.createTransport(e3), r3 = false;
                oe.priorWebsocketSuccess = false;
                const n3 = () => {
                  r3 || (t3.send([{ type: "ping", data: "probe" }]), t3.once("packet", (e4) => {
                    if (!r3)
                      if ("pong" === e4.type && "probe" === e4.data) {
                        if (this.upgrading = true, this.emitReserved("upgrading", t3), !t3)
                          return;
                        oe.priorWebsocketSuccess = "websocket" === t3.name, this.transport.pause(() => {
                          r3 || "closed" !== this.readyState && (d2(), this.setTransport(t3), t3.send([{ type: "upgrade" }]), this.emitReserved("upgrade", t3), t3 = null, this.upgrading = false, this.flush());
                        });
                      } else {
                        const e5 = new Error("probe error");
                        e5.transport = t3.name, this.emitReserved("upgradeError", e5);
                      }
                  }));
                };
                function s2() {
                  r3 || (r3 = true, d2(), t3.close(), t3 = null);
                }
                const i2 = (e4) => {
                  const r4 = new Error("probe error: " + e4);
                  r4.transport = t3.name, s2(), this.emitReserved("upgradeError", r4);
                };
                function a2() {
                  i2("transport closed");
                }
                function o2() {
                  i2("socket closed");
                }
                function c2(e4) {
                  t3 && e4.name !== t3.name && s2();
                }
                const d2 = () => {
                  t3.removeListener("open", n3), t3.removeListener("error", i2), t3.removeListener("close", a2), this.off("close", o2), this.off("upgrading", c2);
                };
                t3.once("open", n3), t3.once("error", i2), t3.once("close", a2), this.once("close", o2), this.once("upgrading", c2), -1 !== this._upgrades.indexOf("webtransport") && "webtransport" !== e3 ? this.setTimeoutFn(() => {
                  r3 || t3.open();
                }, 200) : t3.open();
              }
              onHandshake(e3) {
                this._upgrades = this._filterUpgrades(e3.upgrades), super.onHandshake(e3);
              }
              _filterUpgrades(e3) {
                const t3 = [];
                for (let r3 = 0; r3 < e3.length; r3++)
                  ~this.transports.indexOf(e3[r3]) && t3.push(e3[r3]);
                return t3;
              }
            }
            class de extends ce {
              constructor(e3, t3 = {}) {
                const r3 = "object" == typeof e3 ? e3 : t3;
                (!r3.transports || r3.transports && "string" == typeof r3.transports[0]) && (r3.transports = (r3.transports || ["polling", "websocket", "webtransport"]).map((e4) => te[e4]).filter((e4) => !!e4)), super(e3, r3);
              }
            }
            const le = "function" == typeof ArrayBuffer, ue = Object.prototype.toString, pe = "function" == typeof Blob || "undefined" != typeof Blob && "[object BlobConstructor]" === ue.call(Blob), he = "function" == typeof File || "undefined" != typeof File && "[object FileConstructor]" === ue.call(File);
            function me(e3) {
              return le && (e3 instanceof ArrayBuffer || ((e4) => "function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(e4) : e4.buffer instanceof ArrayBuffer)(e3)) || pe && e3 instanceof Blob || he && e3 instanceof File;
            }
            function fe(e3, t3) {
              if (!e3 || "object" != typeof e3) return false;
              if (Array.isArray(e3)) {
                for (let t4 = 0, r3 = e3.length; t4 < r3; t4++) if (fe(e3[t4])) return true;
                return false;
              }
              if (me(e3)) return true;
              if (e3.toJSON && "function" == typeof e3.toJSON && 1 === arguments.length)
                return fe(e3.toJSON(), true);
              for (const t4 in e3)
                if (Object.prototype.hasOwnProperty.call(e3, t4) && fe(e3[t4]))
                  return true;
              return false;
            }
            function ge(e3) {
              const t3 = [], r3 = e3.data, n3 = e3;
              return n3.data = ve(r3, t3), n3.attachments = t3.length, { packet: n3, buffers: t3 };
            }
            function ve(e3, t3) {
              if (!e3) return e3;
              if (me(e3)) {
                const r3 = { _placeholder: true, num: t3.length };
                return t3.push(e3), r3;
              }
              if (Array.isArray(e3)) {
                const r3 = new Array(e3.length);
                for (let n3 = 0; n3 < e3.length; n3++) r3[n3] = ve(e3[n3], t3);
                return r3;
              }
              if ("object" == typeof e3 && !(e3 instanceof Date)) {
                const r3 = {};
                for (const n3 in e3)
                  Object.prototype.hasOwnProperty.call(e3, n3) && (r3[n3] = ve(e3[n3], t3));
                return r3;
              }
              return e3;
            }
            function _e(e3, t3) {
              return e3.data = ye(e3.data, t3), delete e3.attachments, e3;
            }
            function ye(e3, t3) {
              if (!e3) return e3;
              if (e3 && true === e3._placeholder) {
                if ("number" == typeof e3.num && e3.num >= 0 && e3.num < t3.length)
                  return t3[e3.num];
                throw new Error("illegal attachments");
              }
              if (Array.isArray(e3))
                for (let r3 = 0; r3 < e3.length; r3++) e3[r3] = ye(e3[r3], t3);
              else if ("object" == typeof e3)
                for (const r3 in e3)
                  Object.prototype.hasOwnProperty.call(e3, r3) && (e3[r3] = ye(e3[r3], t3));
              return e3;
            }
            const be = [
              "connect",
              "connect_error",
              "disconnect",
              "disconnecting",
              "newListener",
              "removeListener"
            ], we = 5;
            var Se;
            !function(e3) {
              e3[e3.CONNECT = 0] = "CONNECT", e3[e3.DISCONNECT = 1] = "DISCONNECT", e3[e3.EVENT = 2] = "EVENT", e3[e3.ACK = 3] = "ACK", e3[e3.CONNECT_ERROR = 4] = "CONNECT_ERROR", e3[e3.BINARY_EVENT = 5] = "BINARY_EVENT", e3[e3.BINARY_ACK = 6] = "BINARY_ACK";
            }(Se || (Se = {}));
            class Re {
              constructor(e3) {
                this.replacer = e3;
              }
              encode(e3) {
                return e3.type !== Se.EVENT && e3.type !== Se.ACK || !fe(e3) ? [this.encodeAsString(e3)] : this.encodeAsBinary({
                  type: e3.type === Se.EVENT ? Se.BINARY_EVENT : Se.BINARY_ACK,
                  nsp: e3.nsp,
                  data: e3.data,
                  id: e3.id
                });
              }
              encodeAsString(e3) {
                let t3 = "" + e3.type;
                return e3.type !== Se.BINARY_EVENT && e3.type !== Se.BINARY_ACK || (t3 += e3.attachments + "-"), e3.nsp && "/" !== e3.nsp && (t3 += e3.nsp + ","), null != e3.id && (t3 += e3.id), null != e3.data && (t3 += JSON.stringify(e3.data, this.replacer)), t3;
              }
              encodeAsBinary(e3) {
                const t3 = ge(e3), r3 = this.encodeAsString(t3.packet), n3 = t3.buffers;
                return n3.unshift(r3), n3;
              }
            }
            function ke(e3) {
              return "[object Object]" === Object.prototype.toString.call(e3);
            }
            class Ee extends A {
              constructor(e3) {
                super(), this.reviver = e3;
              }
              add(e3) {
                let t3;
                if ("string" == typeof e3) {
                  if (this.reconstructor)
                    throw new Error(
                      "got plaintext data when reconstructing a packet"
                    );
                  t3 = this.decodeString(e3);
                  const r3 = t3.type === Se.BINARY_EVENT;
                  r3 || t3.type === Se.BINARY_ACK ? (t3.type = r3 ? Se.EVENT : Se.ACK, this.reconstructor = new Ce(t3), 0 === t3.attachments && super.emitReserved("decoded", t3)) : super.emitReserved("decoded", t3);
                } else {
                  if (!me(e3) && !e3.base64) throw new Error("Unknown type: " + e3);
                  if (!this.reconstructor)
                    throw new Error(
                      "got binary data when not reconstructing a packet"
                    );
                  t3 = this.reconstructor.takeBinaryData(e3), t3 && (this.reconstructor = null, super.emitReserved("decoded", t3));
                }
              }
              decodeString(e3) {
                let t3 = 0;
                const r3 = { type: Number(e3.charAt(0)) };
                if (void 0 === Se[r3.type])
                  throw new Error("unknown packet type " + r3.type);
                if (r3.type === Se.BINARY_EVENT || r3.type === Se.BINARY_ACK) {
                  const n4 = t3 + 1;
                  for (; "-" !== e3.charAt(++t3) && t3 != e3.length; ) ;
                  const s2 = e3.substring(n4, t3);
                  if (s2 != Number(s2) || "-" !== e3.charAt(t3))
                    throw new Error("Illegal attachments");
                  r3.attachments = Number(s2);
                }
                if ("/" === e3.charAt(t3 + 1)) {
                  const n4 = t3 + 1;
                  for (; ++t3; ) {
                    if ("," === e3.charAt(t3)) break;
                    if (t3 === e3.length) break;
                  }
                  r3.nsp = e3.substring(n4, t3);
                } else r3.nsp = "/";
                const n3 = e3.charAt(t3 + 1);
                if ("" !== n3 && Number(n3) == n3) {
                  const n4 = t3 + 1;
                  for (; ++t3; ) {
                    const r4 = e3.charAt(t3);
                    if (null == r4 || Number(r4) != r4) {
                      --t3;
                      break;
                    }
                    if (t3 === e3.length) break;
                  }
                  r3.id = Number(e3.substring(n4, t3 + 1));
                }
                if (e3.charAt(++t3)) {
                  const n4 = this.tryParse(e3.substr(t3));
                  if (!Ee.isPayloadValid(r3.type, n4))
                    throw new Error("invalid payload");
                  r3.data = n4;
                }
                return r3;
              }
              tryParse(e3) {
                try {
                  return JSON.parse(e3, this.reviver);
                } catch (e4) {
                  return false;
                }
              }
              static isPayloadValid(e3, t3) {
                switch (e3) {
                  case Se.CONNECT:
                    return ke(t3);
                  case Se.DISCONNECT:
                    return void 0 === t3;
                  case Se.CONNECT_ERROR:
                    return "string" == typeof t3 || ke(t3);
                  case Se.EVENT:
                  case Se.BINARY_EVENT:
                    return Array.isArray(t3) && ("number" == typeof t3[0] || "string" == typeof t3[0] && -1 === be.indexOf(t3[0]));
                  case Se.ACK:
                  case Se.BINARY_ACK:
                    return Array.isArray(t3);
                }
              }
              destroy() {
                this.reconstructor && (this.reconstructor.finishedReconstruction(), this.reconstructor = null);
              }
            }
            class Ce {
              constructor(e3) {
                this.packet = e3, this.buffers = [], this.reconPack = e3;
              }
              takeBinaryData(e3) {
                if (this.buffers.push(e3), this.buffers.length === this.reconPack.attachments) {
                  const e4 = _e(this.reconPack, this.buffers);
                  return this.finishedReconstruction(), e4;
                }
                return null;
              }
              finishedReconstruction() {
                this.reconPack = null, this.buffers = [];
              }
            }
            function Te(e3, t3, r3) {
              return e3.on(t3, r3), function() {
                e3.off(t3, r3);
              };
            }
            const Pe = Object.freeze({
              connect: 1,
              connect_error: 1,
              disconnect: 1,
              disconnecting: 1,
              newListener: 1,
              removeListener: 1
            });
            class Oe extends A {
              constructor(e3, t3, r3) {
                super(), this.connected = false, this.recovered = false, this.receiveBuffer = [], this.sendBuffer = [], this._queue = [], this._queueSeq = 0, this.ids = 0, this.acks = {}, this.flags = {}, this.io = e3, this.nsp = t3, r3 && r3.auth && (this.auth = r3.auth), this._opts = Object.assign({}, r3), this.io._autoConnect && this.open();
              }
              get disconnected() {
                return !this.connected;
              }
              subEvents() {
                if (this.subs) return;
                const e3 = this.io;
                this.subs = [
                  Te(e3, "open", this.onopen.bind(this)),
                  Te(e3, "packet", this.onpacket.bind(this)),
                  Te(e3, "error", this.onerror.bind(this)),
                  Te(e3, "close", this.onclose.bind(this))
                ];
              }
              get active() {
                return !!this.subs;
              }
              connect() {
                return this.connected || (this.subEvents(), this.io._reconnecting || this.io.open(), "open" === this.io._readyState && this.onopen()), this;
              }
              open() {
                return this.connect();
              }
              send(...e3) {
                return e3.unshift("message"), this.emit.apply(this, e3), this;
              }
              emit(e3, ...t3) {
                var r3, n3, s2;
                if (Pe.hasOwnProperty(e3))
                  throw new Error(
                    '"' + e3.toString() + '" is a reserved event name'
                  );
                if (t3.unshift(e3), this._opts.retries && !this.flags.fromQueue && !this.flags.volatile)
                  return this._addToQueue(t3), this;
                const i2 = { type: Se.EVENT, data: t3, options: {} };
                if (i2.options.compress = false !== this.flags.compress, "function" == typeof t3[t3.length - 1]) {
                  const e4 = this.ids++, r4 = t3.pop();
                  this._registerAckCallback(e4, r4), i2.id = e4;
                }
                const a2 = null === (n3 = null === (r3 = this.io.engine) || void 0 === r3 ? void 0 : r3.transport) || void 0 === n3 ? void 0 : n3.writable, o2 = this.connected && !(null === (s2 = this.io.engine) || void 0 === s2 ? void 0 : s2._hasPingExpired());
                return this.flags.volatile && !a2 || (o2 ? (this.notifyOutgoingListeners(i2), this.packet(i2)) : this.sendBuffer.push(i2)), this.flags = {}, this;
              }
              _registerAckCallback(e3, t3) {
                var r3;
                const n3 = null !== (r3 = this.flags.timeout) && void 0 !== r3 ? r3 : this._opts.ackTimeout;
                if (void 0 === n3) return void (this.acks[e3] = t3);
                const s2 = this.io.setTimeoutFn(() => {
                  delete this.acks[e3];
                  for (let t4 = 0; t4 < this.sendBuffer.length; t4++)
                    this.sendBuffer[t4].id === e3 && this.sendBuffer.splice(t4, 1);
                  t3.call(this, new Error("operation has timed out"));
                }, n3), i2 = (...e4) => {
                  this.io.clearTimeoutFn(s2), t3.apply(this, e4);
                };
                i2.withError = true, this.acks[e3] = i2;
              }
              emitWithAck(e3, ...t3) {
                return new Promise((r3, n3) => {
                  const s2 = (e4, t4) => e4 ? n3(e4) : r3(t4);
                  s2.withError = true, t3.push(s2), this.emit(e3, ...t3);
                });
              }
              _addToQueue(e3) {
                let t3;
                "function" == typeof e3[e3.length - 1] && (t3 = e3.pop());
                const r3 = {
                  id: this._queueSeq++,
                  tryCount: 0,
                  pending: false,
                  args: e3,
                  flags: Object.assign({ fromQueue: true }, this.flags)
                };
                e3.push((e4, ...n3) => {
                  if (r3 !== this._queue[0]) return;
                  return null !== e4 ? r3.tryCount > this._opts.retries && (this._queue.shift(), t3 && t3(e4)) : (this._queue.shift(), t3 && t3(null, ...n3)), r3.pending = false, this._drainQueue();
                }), this._queue.push(r3), this._drainQueue();
              }
              _drainQueue(e3 = false) {
                if (!this.connected || 0 === this._queue.length) return;
                const t3 = this._queue[0];
                t3.pending && !e3 || (t3.pending = true, t3.tryCount++, this.flags = t3.flags, this.emit.apply(this, t3.args));
              }
              packet(e3) {
                e3.nsp = this.nsp, this.io._packet(e3);
              }
              onopen() {
                "function" == typeof this.auth ? this.auth((e3) => {
                  this._sendConnectPacket(e3);
                }) : this._sendConnectPacket(this.auth);
              }
              _sendConnectPacket(e3) {
                this.packet({
                  type: Se.CONNECT,
                  data: this._pid ? Object.assign(
                    { pid: this._pid, offset: this._lastOffset },
                    e3
                  ) : e3
                });
              }
              onerror(e3) {
                this.connected || this.emitReserved("connect_error", e3);
              }
              onclose(e3, t3) {
                this.connected = false, delete this.id, this.emitReserved("disconnect", e3, t3), this._clearAcks();
              }
              _clearAcks() {
                Object.keys(this.acks).forEach((e3) => {
                  if (!this.sendBuffer.some((t3) => String(t3.id) === e3)) {
                    const t3 = this.acks[e3];
                    delete this.acks[e3], t3.withError && t3.call(this, new Error("socket has been disconnected"));
                  }
                });
              }
              onpacket(e3) {
                if (e3.nsp === this.nsp)
                  switch (e3.type) {
                    case Se.CONNECT:
                      e3.data && e3.data.sid ? this.onconnect(e3.data.sid, e3.data.pid) : this.emitReserved(
                        "connect_error",
                        new Error(
                          "It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"
                        )
                      );
                      break;
                    case Se.EVENT:
                    case Se.BINARY_EVENT:
                      this.onevent(e3);
                      break;
                    case Se.ACK:
                    case Se.BINARY_ACK:
                      this.onack(e3);
                      break;
                    case Se.DISCONNECT:
                      this.ondisconnect();
                      break;
                    case Se.CONNECT_ERROR:
                      this.destroy();
                      const t3 = new Error(e3.data.message);
                      t3.data = e3.data.data, this.emitReserved("connect_error", t3);
                  }
              }
              onevent(e3) {
                const t3 = e3.data || [];
                null != e3.id && t3.push(this.ack(e3.id)), this.connected ? this.emitEvent(t3) : this.receiveBuffer.push(Object.freeze(t3));
              }
              emitEvent(e3) {
                if (this._anyListeners && this._anyListeners.length) {
                  const t3 = this._anyListeners.slice();
                  for (const r3 of t3) r3.apply(this, e3);
                }
                super.emit.apply(this, e3), this._pid && e3.length && "string" == typeof e3[e3.length - 1] && (this._lastOffset = e3[e3.length - 1]);
              }
              ack(e3) {
                const t3 = this;
                let r3 = false;
                return function(...n3) {
                  r3 || (r3 = true, t3.packet({ type: Se.ACK, id: e3, data: n3 }));
                };
              }
              onack(e3) {
                const t3 = this.acks[e3.id];
                "function" == typeof t3 && (delete this.acks[e3.id], t3.withError && e3.data.unshift(null), t3.apply(this, e3.data));
              }
              onconnect(e3, t3) {
                this.id = e3, this.recovered = t3 && this._pid === t3, this._pid = t3, this.connected = true, this.emitBuffered(), this.emitReserved("connect"), this._drainQueue(true);
              }
              emitBuffered() {
                this.receiveBuffer.forEach((e3) => this.emitEvent(e3)), this.receiveBuffer = [], this.sendBuffer.forEach((e3) => {
                  this.notifyOutgoingListeners(e3), this.packet(e3);
                }), this.sendBuffer = [];
              }
              ondisconnect() {
                this.destroy(), this.onclose("io server disconnect");
              }
              destroy() {
                this.subs && (this.subs.forEach((e3) => e3()), this.subs = void 0), this.io._destroy(this);
              }
              disconnect() {
                return this.connected && this.packet({ type: Se.DISCONNECT }), this.destroy(), this.connected && this.onclose("io client disconnect"), this;
              }
              close() {
                return this.disconnect();
              }
              compress(e3) {
                return this.flags.compress = e3, this;
              }
              get volatile() {
                return this.flags.volatile = true, this;
              }
              timeout(e3) {
                return this.flags.timeout = e3, this;
              }
              onAny(e3) {
                return this._anyListeners = this._anyListeners || [], this._anyListeners.push(e3), this;
              }
              prependAny(e3) {
                return this._anyListeners = this._anyListeners || [], this._anyListeners.unshift(e3), this;
              }
              offAny(e3) {
                if (!this._anyListeners) return this;
                if (e3) {
                  const t3 = this._anyListeners;
                  for (let r3 = 0; r3 < t3.length; r3++)
                    if (e3 === t3[r3]) return t3.splice(r3, 1), this;
                } else this._anyListeners = [];
                return this;
              }
              listenersAny() {
                return this._anyListeners || [];
              }
              onAnyOutgoing(e3) {
                return this._anyOutgoingListeners = this._anyOutgoingListeners || [], this._anyOutgoingListeners.push(e3), this;
              }
              prependAnyOutgoing(e3) {
                return this._anyOutgoingListeners = this._anyOutgoingListeners || [], this._anyOutgoingListeners.unshift(e3), this;
              }
              offAnyOutgoing(e3) {
                if (!this._anyOutgoingListeners) return this;
                if (e3) {
                  const t3 = this._anyOutgoingListeners;
                  for (let r3 = 0; r3 < t3.length; r3++)
                    if (e3 === t3[r3]) return t3.splice(r3, 1), this;
                } else this._anyOutgoingListeners = [];
                return this;
              }
              listenersAnyOutgoing() {
                return this._anyOutgoingListeners || [];
              }
              notifyOutgoingListeners(e3) {
                if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
                  const t3 = this._anyOutgoingListeners.slice();
                  for (const r3 of t3) r3.apply(this, e3.data);
                }
              }
            }
            function xe(e3) {
              e3 = e3 || {}, this.ms = e3.min || 100, this.max = e3.max || 1e4, this.factor = e3.factor || 2, this.jitter = e3.jitter > 0 && e3.jitter <= 1 ? e3.jitter : 0, this.attempts = 0;
            }
            xe.prototype.duration = function() {
              var e3 = this.ms * Math.pow(this.factor, this.attempts++);
              if (this.jitter) {
                var t3 = Math.random(), r3 = Math.floor(t3 * this.jitter * e3);
                e3 = 1 & Math.floor(10 * t3) ? e3 + r3 : e3 - r3;
              }
              return 0 | Math.min(e3, this.max);
            }, xe.prototype.reset = function() {
              this.attempts = 0;
            }, xe.prototype.setMin = function(e3) {
              this.ms = e3;
            }, xe.prototype.setMax = function(e3) {
              this.max = e3;
            }, xe.prototype.setJitter = function(e3) {
              this.jitter = e3;
            };
            class De extends A {
              constructor(e3, t3) {
                var r3;
                super(), this.nsps = {}, this.subs = [], e3 && "object" == typeof e3 && (t3 = e3, e3 = void 0), (t3 = t3 || {}).path = t3.path || "/socket.io", this.opts = t3, F(this, t3), this.reconnection(false !== t3.reconnection), this.reconnectionAttempts(t3.reconnectionAttempts || 1 / 0), this.reconnectionDelay(t3.reconnectionDelay || 1e3), this.reconnectionDelayMax(t3.reconnectionDelayMax || 5e3), this.randomizationFactor(
                  null !== (r3 = t3.randomizationFactor) && void 0 !== r3 ? r3 : 0.5
                ), this.backoff = new xe({
                  min: this.reconnectionDelay(),
                  max: this.reconnectionDelayMax(),
                  jitter: this.randomizationFactor()
                }), this.timeout(null == t3.timeout ? 2e4 : t3.timeout), this._readyState = "closed", this.uri = e3;
                const s2 = t3.parser || n2;
                this.encoder = new s2.Encoder(), this.decoder = new s2.Decoder(), this._autoConnect = false !== t3.autoConnect, this._autoConnect && this.open();
              }
              reconnection(e3) {
                return arguments.length ? (this._reconnection = !!e3, e3 || (this.skipReconnect = true), this) : this._reconnection;
              }
              reconnectionAttempts(e3) {
                return void 0 === e3 ? this._reconnectionAttempts : (this._reconnectionAttempts = e3, this);
              }
              reconnectionDelay(e3) {
                var t3;
                return void 0 === e3 ? this._reconnectionDelay : (this._reconnectionDelay = e3, null === (t3 = this.backoff) || void 0 === t3 || t3.setMin(e3), this);
              }
              randomizationFactor(e3) {
                var t3;
                return void 0 === e3 ? this._randomizationFactor : (this._randomizationFactor = e3, null === (t3 = this.backoff) || void 0 === t3 || t3.setJitter(e3), this);
              }
              reconnectionDelayMax(e3) {
                var t3;
                return void 0 === e3 ? this._reconnectionDelayMax : (this._reconnectionDelayMax = e3, null === (t3 = this.backoff) || void 0 === t3 || t3.setMax(e3), this);
              }
              timeout(e3) {
                return arguments.length ? (this._timeout = e3, this) : this._timeout;
              }
              maybeReconnectOnOpen() {
                !this._reconnecting && this._reconnection && 0 === this.backoff.attempts && this.reconnect();
              }
              open(e3) {
                if (~this._readyState.indexOf("open")) return this;
                this.engine = new de(this.uri, this.opts);
                const t3 = this.engine, r3 = this;
                this._readyState = "opening", this.skipReconnect = false;
                const n3 = Te(t3, "open", function() {
                  r3.onopen(), e3 && e3();
                }), s2 = (t4) => {
                  this.cleanup(), this._readyState = "closed", this.emitReserved("error", t4), e3 ? e3(t4) : this.maybeReconnectOnOpen();
                }, i2 = Te(t3, "error", s2);
                if (false !== this._timeout) {
                  const e4 = this._timeout, r4 = this.setTimeoutFn(() => {
                    n3(), s2(new Error("timeout")), t3.close();
                  }, e4);
                  this.opts.autoUnref && r4.unref(), this.subs.push(() => {
                    this.clearTimeoutFn(r4);
                  });
                }
                return this.subs.push(n3), this.subs.push(i2), this;
              }
              connect(e3) {
                return this.open(e3);
              }
              onopen() {
                this.cleanup(), this._readyState = "open", this.emitReserved("open");
                const e3 = this.engine;
                this.subs.push(
                  Te(e3, "ping", this.onping.bind(this)),
                  Te(e3, "data", this.ondata.bind(this)),
                  Te(e3, "error", this.onerror.bind(this)),
                  Te(e3, "close", this.onclose.bind(this)),
                  Te(this.decoder, "decoded", this.ondecoded.bind(this))
                );
              }
              onping() {
                this.emitReserved("ping");
              }
              ondata(e3) {
                try {
                  this.decoder.add(e3);
                } catch (e4) {
                  this.onclose("parse error", e4);
                }
              }
              ondecoded(e3) {
                M(() => {
                  this.emitReserved("packet", e3);
                }, this.setTimeoutFn);
              }
              onerror(e3) {
                this.emitReserved("error", e3);
              }
              socket(e3, t3) {
                let r3 = this.nsps[e3];
                return r3 ? this._autoConnect && !r3.active && r3.connect() : (r3 = new Oe(this, e3, t3), this.nsps[e3] = r3), r3;
              }
              _destroy(e3) {
                const t3 = Object.keys(this.nsps);
                for (const e4 of t3) {
                  if (this.nsps[e4].active) return;
                }
                this._close();
              }
              _packet(e3) {
                const t3 = this.encoder.encode(e3);
                for (let r3 = 0; r3 < t3.length; r3++)
                  this.engine.write(t3[r3], e3.options);
              }
              cleanup() {
                this.subs.forEach((e3) => e3()), this.subs.length = 0, this.decoder.destroy();
              }
              _close() {
                this.skipReconnect = true, this._reconnecting = false, this.onclose("forced close");
              }
              disconnect() {
                return this._close();
              }
              onclose(e3, t3) {
                var r3;
                this.cleanup(), null === (r3 = this.engine) || void 0 === r3 || r3.close(), this.backoff.reset(), this._readyState = "closed", this.emitReserved("close", e3, t3), this._reconnection && !this.skipReconnect && this.reconnect();
              }
              reconnect() {
                if (this._reconnecting || this.skipReconnect) return this;
                const e3 = this;
                if (this.backoff.attempts >= this._reconnectionAttempts)
                  this.backoff.reset(), this.emitReserved("reconnect_failed"), this._reconnecting = false;
                else {
                  const t3 = this.backoff.duration();
                  this._reconnecting = true;
                  const r3 = this.setTimeoutFn(() => {
                    e3.skipReconnect || (this.emitReserved("reconnect_attempt", e3.backoff.attempts), e3.skipReconnect || e3.open((t4) => {
                      t4 ? (e3._reconnecting = false, e3.reconnect(), this.emitReserved("reconnect_error", t4)) : e3.onreconnect();
                    }));
                  }, t3);
                  this.opts.autoUnref && r3.unref(), this.subs.push(() => {
                    this.clearTimeoutFn(r3);
                  });
                }
              }
              onreconnect() {
                const e3 = this.backoff.attempts;
                this._reconnecting = false, this.backoff.reset(), this.emitReserved("reconnect", e3);
              }
            }
            const Ie = {};
            function Ae(e3, t3) {
              "object" == typeof e3 && (t3 = e3, e3 = void 0);
              const r3 = function(e4, t4 = "", r4) {
                let n4 = e4;
                r4 = r4 || "undefined" != typeof location && location, null == e4 && (e4 = r4.protocol + "//" + r4.host), "string" == typeof e4 && ("/" === e4.charAt(0) && (e4 = "/" === e4.charAt(1) ? r4.protocol + e4 : r4.host + e4), /^(https?|wss?):\/\//.test(e4) || (e4 = void 0 !== r4 ? r4.protocol + "//" + e4 : "https://" + e4), n4 = se(e4)), n4.port || (/^(http|ws)$/.test(n4.protocol) ? n4.port = "80" : /^(http|ws)s$/.test(n4.protocol) && (n4.port = "443")), n4.path = n4.path || "/";
                const s3 = -1 !== n4.host.indexOf(":") ? "[" + n4.host + "]" : n4.host;
                return n4.id = n4.protocol + "://" + s3 + ":" + n4.port + t4, n4.href = n4.protocol + "://" + s3 + (r4 && r4.port === n4.port ? "" : ":" + n4.port), n4;
              }(e3, (t3 = t3 || {}).path || "/socket.io"), n3 = r3.source, s2 = r3.id, i2 = r3.path, a2 = Ie[s2] && i2 in Ie[s2].nsps;
              let o2;
              return t3.forceNew || t3["force new connection"] || false === t3.multiplex || a2 ? o2 = new De(n3, t3) : (Ie[s2] || (Ie[s2] = new De(n3, t3)), o2 = Ie[s2]), r3.query && !t3.query && (t3.query = r3.queryKey), o2.socket(r3.path, t3);
            }
            Object.assign(Ae, { Manager: De, Socket: Oe, io: Ae, connect: Ae });
            var Me = r2(76), Le = r2(7833), Ne = r2.n(Le), je = "mediasoup-demo", Be = function() {
              return (0, c.A)(
                function e3(t3) {
                  (0, o.A)(this, e3), t3 ? (this._debug = Ne()("".concat(je, ":").concat(t3)), this._warn = Ne()("".concat(je, ":WARN:").concat(t3)), this._error = Ne()(
                    "".concat(je, ":ERROR:").concat(t3)
                  )) : (this._debug = Ne()(je), this._warn = Ne()("".concat(je, ":WARN")), this._error = Ne()("".concat(je, ":ERROR"))), Ne().disable(), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
                },
                [
                  {
                    key: "debug",
                    get: function() {
                      return this._debug;
                    }
                  },
                  {
                    key: "warn",
                    get: function() {
                      return this._warn;
                    }
                  },
                  {
                    key: "error",
                    get: function() {
                      return this._error;
                    }
                  }
                ]
              );
            }(), Fe = r2(1396), Ue = Fe.enc.Latin1.parse(
              "6gf9Oz5Y(6fOWPP@3XPv0Mwp51yfJ0HiZW^0*!9NdUuZ*VdKmRC@f))&^!Iriw)q"
            ), We = Fe.enc.Latin1.parse("BHrabik^$W^y*HL@A*$4YKj(");
            function qe(e3) {
              return Ve.apply(this, arguments);
            }
            function Ve() {
              return (Ve = (0, a.A)(
                u().mark(function e3(t3) {
                  var r3, n3, s2, i2, a2, o2, c2, d2, l2, p2, h2, m2, f2, g2, v2;
                  return u().wrap(function(e4) {
                    for (; ; )
                      switch (e4.prev = e4.next) {
                        case 0:
                          return r3 = t3.roomId, n3 = t3.secret, s2 = t3.signalingBaseUrl, i2 = "call-api.videosdk.live", a2 = [], o2 = null, c2 = {}, d2 = {}, l2 = {}, p2 = null, h2 = null, m2 = null, e4.next = 12, fetch(
                            "https://".concat(
                              s2,
                              "/infra/v1/meetings/init-config"
                            ),
                            {
                              method: "POST",
                              headers: {
                                Authorization: n3,
                                "Content-Type": "application/json"
                              },
                              body: JSON.stringify({ roomId: r3 })
                            }
                          ).then(function(e5) {
                            return e5.json();
                          }).catch(function(e5) {
                            return {};
                          });
                        case 12:
                          return f2 = e4.sent, (g2 = f2.data) && (i2 = g2.baseUrl, v2 = g2.observability, a2 = He(g2.iceServers), o2 = v2.jwt, c2 = v2.traces, d2 = v2.logs, l2 = v2.metaData, p2 = g2.signalingUrl, m2 = g2.socketPath, h2 = g2.socketUrl), e4.abrupt("return", {
                            baseUrl: i2,
                            iceServers: a2,
                            observabilityJwt: o2,
                            traces: c2,
                            logs: d2,
                            metaData: l2,
                            signalingUrl: p2,
                            socketPath: m2,
                            socketUrl: h2
                          });
                        case 16:
                        case "end":
                          return e4.stop();
                      }
                  }, e3);
                })
              )).apply(this, arguments);
            }
            function He(e3) {
              try {
                var t3 = Fe.AES.decrypt(e3, Ue, {
                  iv: We,
                  mode: Fe.mode.CBC,
                  padding: Fe.pad.ZeroPadding
                }).toString(Fe.enc.Utf8);
                return JSON.parse(t3);
              } catch (e4) {
                return [];
              }
            }
            var ze = r2(2215), Ge = r2.n(ze), Ke = "mediasoup-demo.user", $e = "mediasoup-demo.devices";
            function Je(e3) {
              var t3 = e3.displayName;
              Ge().set(Ke, { displayName: t3 });
            }
            function Qe() {
              return Ge().getJSON($e);
            }
            var Ye = r2(2211), Xe = r2.n(Ye), Ze = function(e3) {
              return { type: "SET_ROOM_STATE", payload: { state: e3 } };
            }, et = function(e3) {
              return {
                type: "SET_ROOM_ACTIVE_SPEAKER",
                payload: { peerId: e3 }
              };
            }, tt = function(e3) {
              return { type: "SET_ROOM_STATS_PEER_ID", payload: { peerId: e3 } };
            }, rt = function(e3) {
              return {
                type: "SET_MEDIA_CAPABILITIES",
                payload: {
                  canSendMic: e3.canSendMic,
                  canSendWebcam: e3.canSendWebcam
                }
              };
            }, nt = function(e3) {
              return { type: "SET_DISPLAY_NAME", payload: { displayName: e3 } };
            }, st = function(e3) {
              return { type: "SET_AUDIO_ONLY_STATE", payload: { enabled: e3 } };
            }, it = function(e3) {
              return {
                type: "SET_AUDIO_ONLY_IN_PROGRESS",
                payload: { flag: e3 }
              };
            }, at = function(e3) {
              return { type: "SET_AUDIO_MUTED_STATE", payload: { enabled: e3 } };
            }, ot = function(e3) {
              return {
                type: "SET_RESTART_ICE_IN_PROGRESS",
                payload: { flag: e3 }
              };
            }, ct = function(e3) {
              return { type: "ADD_PRODUCER", payload: { producer: e3 } };
            }, dt = function(e3) {
              return { type: "REMOVE_PRODUCER", payload: { producerId: e3 } };
            }, lt = function(e3, t3) {
              return {
                type: "SET_PRODUCER_TRACK",
                payload: { producerId: e3, track: t3 }
              };
            }, ut = function(e3, t3) {
              return {
                type: "SET_PRODUCER_SCORE",
                payload: { producerId: e3, score: t3 }
              };
            }, pt = function(e3) {
              return {
                type: "ADD_DATA_PRODUCER",
                payload: { dataProducer: e3 }
              };
            }, ht = function(e3) {
              return { type: "SET_WEBCAM_IN_PROGRESS", payload: { flag: e3 } };
            }, mt = function(e3) {
              return { type: "SET_SHARE_IN_PROGRESS", payload: { flag: e3 } };
            }, ft = function(e3) {
              return { type: "ADD_PEER", payload: { peer: e3 } };
            }, gt = function(e3) {
              return { type: "REMOVE_PEER", payload: { peerId: e3 } };
            }, vt = function(e3, t3) {
              return {
                type: "SET_PEER_DISPLAY_NAME",
                payload: { displayName: e3, peerId: t3 }
              };
            }, _t = function(e3, t3) {
              return {
                type: "ADD_CONSUMER",
                payload: { consumer: e3, peerId: t3 }
              };
            }, yt = function(e3, t3) {
              return {
                type: "REMOVE_CONSUMER",
                payload: { consumerId: e3, peerId: t3 }
              };
            }, bt = function(e3, t3) {
              return {
                type: "SET_CONSUMER_PAUSED",
                payload: { consumerId: e3, originator: t3 }
              };
            }, wt = function(e3, t3) {
              return {
                type: "SET_CONSUMER_RESUMED",
                payload: { consumerId: e3, originator: t3 }
              };
            }, St = function(e3, t3, r3) {
              return {
                type: "SET_CONSUMER_CURRENT_LAYERS",
                payload: { consumerId: e3, spatialLayer: t3, temporalLayer: r3 }
              };
            }, Rt = function(e3, t3, r3) {
              return {
                type: "SET_CONSUMER_PREFERRED_LAYERS",
                payload: { consumerId: e3, spatialLayer: t3, temporalLayer: r3 }
              };
            }, kt = function(e3, t3) {
              return {
                type: "SET_CONSUMER_PRIORITY",
                payload: { consumerId: e3, priority: t3 }
              };
            }, Et = function(e3, t3) {
              return {
                type: "SET_CONSUMER_SCORE",
                payload: { consumerId: e3, score: t3 }
              };
            }, Ct = function(e3, t3) {
              return {
                type: "ADD_DATA_CONSUMER",
                payload: { dataConsumer: e3, peerId: t3 }
              };
            }, Tt = function(e3, t3) {
              return {
                type: "REMOVE_DATA_CONSUMER",
                payload: { dataConsumerId: e3, peerId: t3 }
              };
            }, Pt = function(e3) {
              var t3 = e3.type, r3 = void 0 === t3 ? "info" : t3, n3 = e3.text, s2 = e3.title, i2 = e3.timeout;
              if (!i2)
                switch (r3) {
                  case "info":
                    i2 = 3e3;
                    break;
                  case "error":
                    i2 = 5e3;
                }
              var a2 = {
                id: Xe()({ length: 6 }).toLowerCase(),
                type: r3,
                title: s2,
                text: n3,
                timeout: i2
              };
              return function(e4) {
                e4(
                  /* @__PURE__ */ function(e5) {
                    return {
                      type: "ADD_NOTIFICATION",
                      payload: { notification: e5 }
                    };
                  }(a2)
                ), setTimeout(function() {
                  e4({
                    type: "REMOVE_NOTIFICATION",
                    payload: { notificationId: a2.id }
                  });
                }, i2);
              };
            }, Ot = r2(7007), xt = r2(1803), Dt = r2(9027), It = r2(7080), At = "CONNECTING", Mt = "CONNECTED", Lt = "RECONNECTING", Nt = "DISCONNECTED", jt = r2(5414), Bt = r2(2107), Ft = r2(5071), Ut = r2(5458), Wt = Array(32);
            function qt() {
              for (var e3 = 0; e3 < 16; e3++)
                Wt[e3] = Math.floor(16 * Math.random()) + 48, Wt[e3] >= 58 && (Wt[e3] += 39);
              return String.fromCharCode.apply(null, Wt.slice(0, 16));
            }
            function Vt() {
              var e3 = (1e6 * (/* @__PURE__ */ new Date()).getTime()).toString().padEnd(19, "0");
              return Number(e3);
            }
            function Ht(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n3 = Object.getOwnPropertySymbols(e3);
                t3 && (n3 = n3.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n3);
              }
              return r3;
            }
            function zt(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? Ht(Object(r3), true).forEach(function(t4) {
                  (0, d.A)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : Ht(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var Gt = function() {
              return (0, c.A)(
                function e3(t3) {
                  var r3 = this, n3 = t3.roomId, s2 = t3.peerId, i2 = t3.sdkName, a2 = t3.observabilityJwt, c2 = t3.metaData, d2 = t3.traces;
                  (0, o.A)(this, e3), this._traceId = function() {
                    for (var e4 = 0; e4 < 32; e4++)
                      Wt[e4] = Math.floor(16 * Math.random()) + 48, Wt[e4] >= 58 && (Wt[e4] += 39);
                    return String.fromCharCode.apply(null, Wt.slice(0, 32));
                  }(), this._rootSpanId = qt(), this._observabilityJwt = a2, this._tracesEnabled = d2.enabled, this._tracesEndpoint = d2.endPoint;
                  var l2 = function(e4) {
                    for (var t4 = "0123456789abcdefghijklmnopqrstuvwxyz", r4 = "", n4 = e4; n4 > 0; n4--)
                      r4 += t4[Math.floor(36 * Math.random())];
                    return r4;
                  }(8);
                  this._spans = [], this._traceJSON = {
                    resourceSpans: [
                      {
                        resource: {
                          attributes: [
                            {
                              key: "service.name",
                              value: { stringValue: "videosdk-otel" }
                            },
                            {
                              key: "telemetry.sdk.language",
                              value: { stringValue: "webjs" }
                            },
                            {
                              key: "telemetry.sdk.name",
                              value: { stringValue: "opentelemetry" }
                            },
                            {
                              key: "telemetry.sdk.version",
                              value: { stringValue: "1.14.0" }
                            },
                            {
                              key: "sdk-version",
                              value: { stringValue: "0.2.2" }
                            }
                          ],
                          droppedAttributesCount: 0
                        },
                        scopeSpans: [{ scope: { name: l2 }, spans: [] }]
                      }
                    ]
                  }, this._tracesEnabled && (this.addRootSpan(n3, s2, i2, c2), setInterval(function() {
                    r3.processQueue();
                  }, 4e3));
                },
                [
                  {
                    key: "addRootSpan",
                    value: function(e3, t3, r3, n3) {
                      var s2 = {
                        traceId: this._traceId,
                        spanId: this._rootSpanId,
                        name: "room_".concat(e3, "_peer_").concat(t3, "_sdk_").concat(r3),
                        kind: 1,
                        startTimeUnixNano: Vt(),
                        endTimeUnixNano: Vt(),
                        attributes: [
                          { key: "roomId", value: { stringValue: e3 } },
                          { key: "peerId", value: { stringValue: t3 } },
                          { key: "sdkName", value: { stringValue: r3 } },
                          { key: "userId", value: { stringValue: n3.userId } },
                          { key: "email", value: { stringValue: n3.email } }
                        ],
                        droppedAttributesCount: 0,
                        events: [],
                        droppedEventsCount: 0,
                        status: { code: 0 },
                        links: [],
                        droppedLinksCount: 0
                      };
                      this._spans.push(s2);
                    }
                  },
                  {
                    key: "addSpanToTrace",
                    value: function(e3) {
                      this._spans.push(e3);
                    }
                  },
                  {
                    key: "trace",
                    value: function(e3) {
                      var t3 = e3.spanName, r3 = e3.attributes, n3 = void 0 === r3 ? {} : r3, i2 = e3.span, a2 = void 0 === i2 ? void 0 : i2;
                      if (this._tracesEnabled) {
                        var o2 = qt(), c2 = Vt(), d2 = {
                          traceId: this._traceId,
                          spanId: o2,
                          parentSpanId: a2 || this._rootSpanId,
                          name: t3,
                          kind: 1,
                          startTimeUnixNano: c2,
                          droppedAttributesCount: 0,
                          events: [],
                          droppedEventsCount: 0,
                          links: [],
                          droppedLinksCount: 0
                        };
                        return Object.keys(n3).length > 0 && (d2.attributes = Object.entries(n3).map(function(e4) {
                          var t4 = (0, s.A)(e4, 2);
                          return { key: t4[0], value: { stringValue: t4[1] } };
                        })), this.addSpanToTrace(d2), o2;
                      }
                    }
                  },
                  {
                    key: "traceAutoComplete",
                    value: function(e3) {
                      var t3 = e3.spanName, r3 = e3.attributes, n3 = void 0 === r3 ? {} : r3, i2 = e3.status, a2 = void 0 === i2 ? 1 : i2, o2 = e3.span, c2 = void 0 === o2 ? void 0 : o2, d2 = e3.message, l2 = void 0 === d2 ? "SUCCESS" : d2;
                      if (this._tracesEnabled) {
                        var u2 = qt(), p2 = Vt(), h2 = Vt(), m2 = {
                          traceId: this._traceId,
                          spanId: u2,
                          parentSpanId: c2 || this._rootSpanId,
                          name: t3,
                          kind: 1,
                          startTimeUnixNano: p2,
                          endTimeUnixNano: h2,
                          droppedAttributesCount: 0,
                          events: [],
                          droppedEventsCount: 0,
                          links: [],
                          droppedLinksCount: 0,
                          status: { code: a2, message: l2 }
                        };
                        Object.keys(n3).length > 0 && (m2.attributes = Object.entries(n3).map(function(e4) {
                          var t4 = (0, s.A)(e4, 2);
                          return { key: t4[0], value: { stringValue: t4[1] } };
                        })), this.addSpanToTrace(m2);
                      }
                    }
                  },
                  {
                    key: "completeSpan",
                    value: function(e3) {
                      var t3 = e3.span, r3 = e3.status, n3 = e3.message, i2 = e3.attributes, a2 = void 0 === i2 ? {} : i2;
                      if (this._tracesEnabled) {
                        var o2 = Vt();
                        this._spans = this._spans.map(function(e4) {
                          if (e4.spanId !== t3) return e4;
                          var i3 = Object.entries(a2).map(function(e5) {
                            var t4 = (0, s.A)(e5, 2);
                            return { key: t4[0], value: { stringValue: t4[1] } };
                          });
                          return e4.attributes = e4.attributes ? [].concat((0, Ut.A)(e4.attributes), (0, Ut.A)(i3)) : i3, zt(
                            zt({}, e4),
                            {},
                            {
                              status: { code: r3, message: n3 },
                              endTimeUnixNano: o2
                            }
                          );
                        });
                      }
                    }
                  },
                  {
                    key: "processQueue",
                    value: function() {
                      var e3 = this;
                      if (this._spans.length > 0) {
                        this._traceJSON.resourceSpans[0].scopeSpans[0].spans = this._spans, this._spans = [];
                        var t3 = {
                          method: "POST",
                          headers: {
                            Authorization: this._observabilityJwt,
                            "Content-Type": "application/json"
                          },
                          body: JSON.stringify(this._traceJSON)
                        };
                        fetch(this._tracesEndpoint, t3).then(
                          function() {
                            var t4 = (0, a.A)(
                              u().mark(function t5(r3) {
                                return u().wrap(function(t6) {
                                  for (; ; )
                                    switch (t6.prev = t6.next) {
                                      case 0:
                                        return e3._traceJSON.resourceSpans[0].scopeSpans[0].spans = [], t6.next = 3, r3.text();
                                      case 3:
                                        return t6.abrupt("return", t6.sent);
                                      case 4:
                                      case "end":
                                        return t6.stop();
                                    }
                                }, t5);
                              })
                            );
                            return function(e4) {
                              return t4.apply(this, arguments);
                            };
                          }()
                        ).then(function(e4) {
                        }).catch(function(t4) {
                          e3._spans = e3._traceJSON.resourceSpans[0].scopeSpans[0].spans, console.error(
                            "There was a problem with the POST request:",
                            t4
                          );
                        });
                      }
                    }
                  }
                ]
              );
            }();
            function Kt(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n3 = Object.getOwnPropertySymbols(e3);
                t3 && (n3 = n3.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n3);
              }
              return r3;
            }
            function $t(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? Kt(Object(r3), true).forEach(function(t4) {
                  (0, d.A)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : Kt(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var Jt = function() {
              return (0, c.A)(
                function e4(t3) {
                  var r3 = t3.roomId, n3 = t3.peerId, s2 = t3.logs, i2 = t3.observabilityJwt, a2 = t3.deviceInfo, c2 = t3.sessionId, d2 = t3.debugMode;
                  (0, o.A)(this, e4);
                  var l2 = a2.browserUserAgent, u2 = a2.deviceUserAgent, p2 = a2.platform;
                  this._peerId = n3, this._roomId = r3, this._logs = s2, this._observabilityJwt = i2, this._deviceInfo = a2, this._sessionId = c2, this._debugMode = d2, this.browserOrDeviceInfo = l2 ? {
                    browserName: l2.browser.name,
                    browserVersion: l2.browser.version,
                    osName: l2.os.name,
                    osVersion: l2.os.version,
                    platform: p2
                  } : u2 ? $t({ platform: p2 }, u2) : null;
                },
                [
                  {
                    key: "pushLogs",
                    value: (e3 = (0, a.A)(
                      u().mark(function e4(t3) {
                        var r3, n3, s2, i2, a2, o2, c2, d2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r3 = t3.logType, n3 = t3.logText, s2 = t3.attributes, i2 = t3.dashboardLog, a2 = void 0 !== i2 && i2, o2 = this._logs, c2 = o2.enabled, d2 = o2.endPoint, !c2) {
                                    e5.next = 8;
                                    break;
                                  }
                                  return e5.next = 5, fetch(d2, {
                                    method: "POST",
                                    headers: {
                                      Authorization: this._observabilityJwt,
                                      "Content-Type": "application/json"
                                    },
                                    body: JSON.stringify({
                                      logType: r3,
                                      logText: n3,
                                      attributes: $t(
                                        $t({}, s2),
                                        {},
                                        {
                                          roomId: this._roomId,
                                          peerId: this._peerId,
                                          SDK: "".concat(
                                            this._deviceInfo.sdkType,
                                            "-sdk"
                                          ),
                                          SDK_VERSION: this._deviceInfo.sdkVersion,
                                          sessionId: this._sessionId
                                        },
                                        this.browserOrDeviceInfo
                                      ),
                                      debugMode: this._debugMode,
                                      dashboardLog: a2
                                    })
                                  }).then(function(e6) {
                                    return e6.json();
                                  }).catch(function(e6) {
                                    return console.log("error", e6), {};
                                  });
                                case 5:
                                  return e5.abrupt("return", e5.sent);
                                case 8:
                                  return e5.abrupt("return", null);
                                case 9:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(t3) {
                      return e3.apply(this, arguments);
                    })
                  }
                ]
              );
              var e3;
            }(), Qt = r2(4973), Yt = r2(388), Xt = r2(3954), Zt = r2(5501), er = r2(3662);
            function tr() {
              try {
                var e3 = !Boolean.prototype.valueOf.call(
                  Reflect.construct(Boolean, [], function() {
                  })
                );
              } catch (e4) {
              }
              return (tr = function() {
                return !!e3;
              })();
            }
            function rr(e3) {
              var t3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
              return rr = function(e4) {
                if (null === e4 || !function(e5) {
                  try {
                    return -1 !== Function.toString.call(e5).indexOf("[native code]");
                  } catch (t4) {
                    return "function" == typeof e5;
                  }
                }(e4))
                  return e4;
                if ("function" != typeof e4)
                  throw new TypeError(
                    "Super expression must either be null or a function"
                  );
                if (void 0 !== t3) {
                  if (t3.has(e4)) return t3.get(e4);
                  t3.set(e4, r3);
                }
                function r3() {
                  return function(e5, t4, r4) {
                    if (tr()) return Reflect.construct.apply(null, arguments);
                    var n3 = [null];
                    n3.push.apply(n3, t4);
                    var s2 = new (e5.bind.apply(e5, n3))();
                    return r4 && (0, er.A)(s2, r4.prototype), s2;
                  }(e4, arguments, (0, Xt.A)(this).constructor);
                }
                return r3.prototype = Object.create(e4.prototype, {
                  constructor: {
                    value: r3,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                }), (0, er.A)(r3, e4);
              }, rr(e3);
            }
            function nr(e3, t3, r3) {
              return t3 = (0, Xt.A)(t3), (0, Yt.A)(
                e3,
                sr() ? Reflect.construct(t3, r3 || [], (0, Xt.A)(e3).constructor) : t3.apply(e3, r3)
              );
            }
            function sr() {
              try {
                var e3 = !Boolean.prototype.valueOf.call(
                  Reflect.construct(Boolean, [], function() {
                  })
                );
              } catch (e4) {
              }
              return (sr = function() {
                return !!e3;
              })();
            }
            var ir, ar = function(e3) {
              function t3(e4, r3) {
                var n3;
                return (0, o.A)(this, t3), n3 = nr(this, t3, [r3 || "an error has occured"]), (0, d.A)(n3, "code", void 0), n3.name = "VideoSdkError", n3.code = e4, n3;
              }
              return (0, Zt.A)(t3, e3), (0, c.A)(t3);
            }(rr(Error));
            !function(e3) {
              e3[e3.InvalidKey = 0] = "InvalidKey", e3[e3.MissingKey = 1] = "MissingKey", e3[e3.InternalError = 2] = "InternalError";
            }(ir || (ir = {}));
            var or = function(e3) {
              function t3(e4) {
                var r3;
                return (0, o.A)(this, t3), (r3 = nr(this, t3, [
                  21,
                  null != e4 ? e4 : "device is unsupported"
                ])).name = "DeviceUnsupportedError", r3;
              }
              return (0, Zt.A)(t3, e3), (0, c.A)(t3);
            }(ar), cr = r2(1806), dr = r2(6746), lr = r2(8278);
            function ur(e3, t3) {
              return e3 ? "audio" == t3 ? "shareAudio" : "share" : t3;
            }
            function pr(e3, t3) {
              var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
              if (!r3) {
                if (Array.isArray(e3) || (r3 = function(e4, t4) {
                  if (e4) {
                    if ("string" == typeof e4) return hr(e4, t4);
                    var r4 = {}.toString.call(e4).slice(8, -1);
                    return "Object" === r4 && e4.constructor && (r4 = e4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? hr(e4, t4) : void 0;
                  }
                }(e3)) || t3 && e3 && "number" == typeof e3.length) {
                  r3 && (e3 = r3);
                  var n3 = 0, s2 = function() {
                  };
                  return {
                    s: s2,
                    n: function() {
                      return n3 >= e3.length ? { done: true } : { done: false, value: e3[n3++] };
                    },
                    e: function(e4) {
                      throw e4;
                    },
                    f: s2
                  };
                }
                throw new TypeError(
                  "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }
              var i2, a2 = true, o2 = false;
              return {
                s: function() {
                  r3 = r3.call(e3);
                },
                n: function() {
                  var e4 = r3.next();
                  return a2 = e4.done, e4;
                },
                e: function(e4) {
                  o2 = true, i2 = e4;
                },
                f: function() {
                  try {
                    a2 || null == r3.return || r3.return();
                  } finally {
                    if (o2) throw i2;
                  }
                }
              };
            }
            function hr(e3, t3) {
              (null == t3 || t3 > e3.length) && (t3 = e3.length);
              for (var r3 = 0, n3 = Array(t3); r3 < t3; r3++) n3[r3] = e3[r3];
              return n3;
            }
            function mr() {
              try {
                var e3 = !Boolean.prototype.valueOf.call(
                  Reflect.construct(Boolean, [], function() {
                  })
                );
              } catch (e4) {
              }
              return (mr = function() {
                return !!e3;
              })();
            }
            var fr = function(e3) {
              function t3(e4) {
                var r4, n3, s2, i2;
                return (0, o.A)(this, t3), n3 = this, s2 = t3, s2 = (0, Xt.A)(s2), (r4 = (0, Yt.A)(
                  n3,
                  mr() ? Reflect.construct(s2, i2 || [], (0, Xt.A)(n3).constructor) : s2.apply(n3, i2)
                )).onWorkerMessage = function(e5) {
                  var t4, n4 = e5.data, s3 = n4.kind, i3 = n4.data;
                  switch (s3) {
                    case "error":
                      console.error(i3.error.message), r4.emit(dr.KS.EncryptionError, i3.error);
                      break;
                    case "initAck":
                      i3.enabled && r4.keyProvider.getKeys().forEach(function(e6) {
                        r4.postKey(e6);
                      });
                      break;
                    case "enable":
                      if (i3.enabled && r4.keyProvider.getKeys().forEach(function(e6) {
                        r4.postKey(e6);
                      }), r4.encryptionEnabled !== i3.enabled && i3.participantIdentity === r4.room._peerId)
                        r4.emit(
                          dr.KS.ParticipantEncryptionStatusChanged,
                          i3.enabled,
                          r4.room.localParticipant
                        ), r4.encryptionEnabled = i3.enabled;
                      else if (i3.participantIdentity) {
                        var a2 = null === (t4 = r4.room) || void 0 === t4 ? void 0 : t4.getParticipantByIdentity(i3.participantIdentity);
                        if (!a2)
                          throw TypeError(
                            "couldn't set encryption status, participant not found".concat(
                              i3.participantIdentity
                            )
                          );
                        r4.emit(
                          dr.KS.ParticipantEncryptionStatusChanged,
                          i3.enabled,
                          a2
                        );
                      }
                      break;
                    case "ratchetKey":
                      r4.keyProvider.emit(
                        dr.fo.KeyRatcheted,
                        i3.material,
                        i3.keyIndex
                      );
                      break;
                    case "e2eeStateChange":
                      r4.emit(dr.KS.E2EEStateChange, i3);
                      break;
                    default:
                      console.log("unknown message kind", e5);
                  }
                }, r4.onWorkerError = function(e5) {
                  var t4;
                  console.error("Worker encountered an error:", e5), console.error("Error message:", e5.message), console.error("Error filename:", e5.filename), console.error("Error line number:", e5.lineno), console.error(
                    "Error stack:",
                    null === (t4 = e5.error) || void 0 === t4 ? void 0 : t4.stack
                  );
                }, r4.keyProvider = e4.keyProvider, r4.worker = e4.worker, r4.encryptionEnabled = false, r4;
              }
              return (0, Zt.A)(t3, e3), (0, c.A)(t3, [
                {
                  key: "setup",
                  value: function(e4) {
                    if (!(0, lr.Ag)())
                      throw new or(
                        "tried to setup end-to-end encryption on an unsupported browser"
                      );
                    if (console.info("setting up e2ee"), e4 !== this.room) {
                      this.room = e4, this.setupEventListeners(e4, this.keyProvider), this.handleE2EEManagerEvents();
                      var t4 = {
                        kind: "init",
                        data: {
                          keyProviderOptions: this.keyProvider.getOptions()
                        }
                      };
                      console.log("msg", t4), this.worker && (console.info("initializing worker", {
                        worker: this.worker
                      }), this.worker.onmessage = this.onWorkerMessage, this.worker.onerror = this.onWorkerError, this.worker.postMessage(t4));
                    }
                  }
                },
                {
                  key: "setParticipantCryptorEnabled",
                  value: function(e4, t4) {
                    console.debug(
                      "set e2ee to ".concat(e4, " for participant ").concat(t4)
                    ), this.postEnable(e4, t4);
                  }
                },
                {
                  key: "setSifTrailer",
                  value: function(e4) {
                    e4 && 0 !== e4.length ? this.postSifTrailer(e4) : console.warn(
                      "ignoring server sent trailer as it's empty"
                    );
                  }
                },
                {
                  key: "setupEventListeners",
                  value: function(e4, t4) {
                    var r4 = this;
                    t4.on(dr.fo.SetKey, function(e5) {
                      console.log("### keyInfo", e5), r4.postKey(e5);
                    }).on(dr.fo.RatchetRequest, function(e5, t5) {
                      return r4.postRatchetRequest(e5, t5);
                    });
                  }
                },
                {
                  key: "postRatchetRequest",
                  value: function(e4, t4) {
                    if (!this.worker)
                      throw Error("could not ratchet key, worker is missing");
                    var r4 = {
                      kind: "ratchetRequest",
                      data: { participantIdentity: e4, keyIndex: t4 }
                    };
                    this.worker.postMessage(r4);
                  }
                },
                {
                  key: "postKey",
                  value: function(e4) {
                    var t4 = e4.key, r4 = e4.participantIdentity, n3 = e4.keyIndex;
                    if (!this.worker)
                      throw Error("could not set key, worker is missing");
                    var s2 = {
                      kind: "setKey",
                      data: {
                        participantIdentity: r4,
                        isPublisher: r4 === this.room._peerId,
                        key: t4,
                        keyIndex: n3
                      }
                    };
                    this.worker.postMessage(s2);
                  }
                },
                {
                  key: "postEnable",
                  value: function(e4, t4) {
                    if (!this.worker)
                      throw new ReferenceError(
                        "failed to enable e2ee, worker is not ready"
                      );
                    var r4 = {
                      kind: "enable",
                      data: { enabled: e4, participantIdentity: t4 }
                    };
                    this.worker.postMessage(r4);
                  }
                },
                {
                  key: "postRTPMap",
                  value: function(e4) {
                    var t4;
                    if (!this.worker)
                      throw TypeError(
                        "could not post rtp map, worker is missing"
                      );
                    if (!(null === (t4 = this.room) || void 0 === t4 ? void 0 : t4._peerId))
                      throw TypeError(
                        "could not post rtp map, local participant identity is missing"
                      );
                    var r4 = {
                      kind: "setRTPMap",
                      data: { map: e4, participantIdentity: this.room._peerId }
                    };
                    this.worker.postMessage(r4);
                  }
                },
                {
                  key: "postSifTrailer",
                  value: function(e4) {
                    if (!this.worker)
                      throw Error(
                        "could not post SIF trailer, worker is missing"
                      );
                    var t4 = { kind: "setSifTrailer", data: { trailer: e4 } };
                    this.worker.postMessage(t4);
                  }
                },
                {
                  key: "setupE2EEReceiver",
                  value: function(e4, t4) {
                    var r4;
                    this.handleReceiver(
                      e4,
                      e4.rtpReceiver,
                      e4.track.id,
                      t4,
                      this.extractCodec(e4.rtpParameters.codecs),
                      ur(
                        null === (r4 = e4.appData) || void 0 === r4 ? void 0 : r4.share,
                        e4.kind
                      )
                    );
                  }
                },
                {
                  key: "setupE2EESender",
                  value: function(e4) {
                    var t4;
                    e4 ? this.handleSender(
                      e4.rtpSender,
                      e4.track.id,
                      this.extractCodec(e4.rtpParameters.codecs),
                      ur(
                        null === (t4 = e4.appData) || void 0 === t4 ? void 0 : t4.share,
                        e4.kind
                      ),
                      this.room._peerId
                    ) : console.error(
                      "Producer is required to setup E2EE sender"
                    );
                  }
                },
                {
                  key: "handleReceiver",
                  value: (r3 = (0, a.A)(
                    u().mark(function e4(t4, r4, n3, s2, i2, a2) {
                      var o2, c2, d2, l2, p2, h2;
                      return u().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (this.worker) {
                                  e5.next = 2;
                                  break;
                                }
                                return e5.abrupt("return");
                              case 2:
                                if (!(0, lr.Wm)()) {
                                  e5.next = 7;
                                  break;
                                }
                                o2 = {
                                  kind: "decode",
                                  participantIdentity: s2,
                                  trackId: t4.track.id,
                                  codec: i2
                                }, r4.transform = new RTCRtpScriptTransform(
                                  this.worker,
                                  o2
                                ), e5.next = 18;
                                break;
                              case 7:
                                if (!(cr.$Q in r4) || !i2) {
                                  e5.next = 11;
                                  break;
                                }
                                return d2 = {
                                  kind: "updateCodec",
                                  data: {
                                    trackId: n3,
                                    codec: i2,
                                    participantIdentity: s2
                                  }
                                }, this.worker.postMessage(d2), e5.abrupt("return");
                              case 11:
                                if (l2 = r4.writableStream, p2 = r4.readableStream, l2 && p2) {
                                  e5.next = 16;
                                  break;
                                }
                                return console.error(
                                  "no writable or readable stream"
                                ), e5.abrupt("return");
                              case 16:
                                h2 = {
                                  kind: "decode",
                                  data: {
                                    readableStream: p2,
                                    writableStream: l2,
                                    trackId: n3,
                                    codec: i2,
                                    participantIdentity: s2,
                                    mediaKind: a2,
                                    peerId: null === (c2 = t4.appData) || void 0 === c2 ? void 0 : c2.peerId
                                  }
                                }, this.worker.postMessage(h2, [p2, l2]);
                              case 18:
                                r4[cr.$Q] = true;
                              case 19:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function(e4, t4, n3, s2, i2, a2) {
                    return r3.apply(this, arguments);
                  })
                },
                {
                  key: "handleSender",
                  value: function(e4, t4, r4, n3, s2) {
                    var i2;
                    if (!(cr.$Q in e4) && this.worker) {
                      if (!(null === (i2 = this.room) || void 0 === i2 ? void 0 : i2._peerId) || "" === this.room._peerId)
                        throw TypeError(
                          "local identity needs to be known in order to set up encrypted sender"
                        );
                      if ((0, lr.Wm)()) {
                        console.info("### initialize script transform");
                        var a2 = {
                          kind: "encode",
                          participantIdentity: this.room._peerId,
                          trackId: t4,
                          codec: r4,
                          mediaKind: n3,
                          peerId: s2
                        };
                        e4.transform = new RTCRtpScriptTransform(this.worker, a2);
                      } else
                        try {
                          var o2 = e4.senderStreams;
                          if (o2) {
                            var c2 = {
                              kind: "encode",
                              data: {
                                readableStream: o2.readable,
                                writableStream: o2.writable,
                                codec: r4,
                                trackId: t4,
                                participantIdentity: this.room._peerId,
                                mediaKind: n3,
                                peerId: s2
                              }
                            };
                            this.worker.postMessage(c2, [
                              o2.readable,
                              o2.writable
                            ]);
                          } else console.error("Error no sender streams found");
                        } catch (e5) {
                          console.log("Error in handle sender ", e5);
                        }
                      e4[cr.$Q] = true;
                    } else console.error("### sender already set up");
                  }
                },
                {
                  key: "handleE2EEManagerEvents",
                  value: function() {
                    var e4 = this;
                    this.on("NEW_CONSUMER", function(t4) {
                      var r4 = t4.consumer, n3 = t4.peerId;
                      console.log("NEW_CONSUMER", r4), e4.setupE2EEReceiver(r4, n3);
                    }), this.on("NEW_PRODUCER", function(t4) {
                      e4.setupE2EESender(t4);
                    });
                  }
                },
                {
                  key: "extractCodec",
                  value: function(e4) {
                    var t4, r4 = pr(e4);
                    try {
                      for (r4.s(); !(t4 = r4.n()).done; ) {
                        var n3 = t4.value, s2 = n3.mimeType.split("/")[1].toLowerCase();
                        if ("audio" === this.kind) {
                          if (cr.Ts.includes(s2)) {
                            n3 = s2;
                            break;
                          }
                        } else if (cr.ue.includes(s2)) {
                          n3 = s2;
                          break;
                        }
                      }
                    } catch (e5) {
                      r4.e(e5);
                    } finally {
                      r4.f();
                    }
                    return "";
                  }
                }
              ]);
              var r3;
            }(Ot.EventEmitter);
            function gr() {
              return vr.apply(this, arguments);
            }
            function vr() {
              return (vr = (0, a.A)(
                u().mark(function e3() {
                  var t3, r3, n3, s2;
                  return u().wrap(function(e4) {
                    for (; ; )
                      switch (e4.prev = e4.next) {
                        case 0:
                          return e4.next = 2, fetch("https://cdn.videosdk.live/e2ee/bundle.js");
                        case 2:
                          if ((t3 = e4.sent).ok) {
                            e4.next = 5;
                            break;
                          }
                          throw new Error(
                            "Failed to load worker script: ".concat(t3.statusText)
                          );
                        case 5:
                          return e4.next = 7, t3.text();
                        case 7:
                          return r3 = e4.sent, n3 = new Blob([r3], {
                            type: "application/javascript"
                          }), s2 = URL.createObjectURL(n3), e4.abrupt("return", new Worker(s2));
                        case 11:
                        case "end":
                          return e4.stop();
                      }
                  }, e3);
                })
              )).apply(this, arguments);
            }
            var _r = r2(9633);
            function yr(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n3 = Object.getOwnPropertySymbols(e3);
                t3 && (n3 = n3.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n3);
              }
              return r3;
            }
            function br(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? yr(Object(r3), true).forEach(function(t4) {
                  (0, d.A)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : yr(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            function wr(e3, t3) {
              var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
              if (!r3) {
                if (Array.isArray(e3) || (r3 = function(e4, t4) {
                  if (e4) {
                    if ("string" == typeof e4) return Sr(e4, t4);
                    var r4 = {}.toString.call(e4).slice(8, -1);
                    return "Object" === r4 && e4.constructor && (r4 = e4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? Sr(e4, t4) : void 0;
                  }
                }(e3)) || t3 && e3 && "number" == typeof e3.length) {
                  r3 && (e3 = r3);
                  var n3 = 0, s2 = function() {
                  };
                  return {
                    s: s2,
                    n: function() {
                      return n3 >= e3.length ? { done: true } : { done: false, value: e3[n3++] };
                    },
                    e: function(e4) {
                      throw e4;
                    },
                    f: s2
                  };
                }
                throw new TypeError(
                  "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }
              var i2, a2 = true, o2 = false;
              return {
                s: function() {
                  r3 = r3.call(e3);
                },
                n: function() {
                  var e4 = r3.next();
                  return a2 = e4.done, e4;
                },
                e: function(e4) {
                  o2 = true, i2 = e4;
                },
                f: function() {
                  try {
                    a2 || null == r3.return || r3.return();
                  } finally {
                    if (o2) throw i2;
                  }
                }
              };
            }
            function Sr(e3, t3) {
              (null == t3 || t3 > e3.length) && (t3 = e3.length);
              for (var r3 = 0, n3 = Array(t3); r3 < t3; r3++) n3[r3] = e3[r3];
              return n3;
            }
            function Rr(e3, t3) {
              (function(e4, t4) {
                if (t4.has(e4))
                  throw new TypeError(
                    "Cannot initialize the same private elements twice on an object"
                  );
              })(e3, t3), t3.add(e3);
            }
            var kr, Er = {
              sd: {
                low: { s: 0, t: 2 },
                med: { s: 0, t: 2 },
                high: { s: 1, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 }
              },
              hd: {
                low: { s: 0, t: 2 },
                med: { s: 1, t: 2 },
                high: { s: 2, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 }
              }
            }, Cr = {
              qvga: { width: { ideal: 320 }, height: { ideal: 240 } },
              vga: { width: { ideal: 640 }, height: { ideal: 480 } },
              sd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 }
              },
              hd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 }
              }
            }, Tr = {
              sd: [
                { scaleResolutionDownBy: 6 },
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 }
              ],
              hd: [
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
                { scaleResolutionDownBy: 1 }
              ]
            }, Pr = [{ scalabilityMode: "S3T3_KEY" }], Or = [{ dtx: true, maxFramerate: 30 }], xr = [{ scalabilityMode: "S3T3", dtx: true }], Dr = new Be("RoomClient"), Ir = /* @__PURE__ */ new WeakSet(), Ar = function() {
              return (0, c.A)(
                function e4(t4) {
                  var r4, n4, s2 = t4.roomId, i2 = t4.peerId, a2 = t4.secret, c2 = t4.displayName, l3 = t4.device, u2 = t4.handlerName, p3 = t4.useSimulcast, h3 = t4.forceTcp, m3 = t4.mode, f3 = t4.forceH264, g3 = t4.forceVP9, v3 = t4.svc, _3 = t4.datachannel, y3 = t4.externalVideo, b3 = t4.micEnabled, w3 = t4.webcamEnabled, S3 = t4.maxResolution, R3 = t4.useSpartialLayerAnalytics, k3 = t4._deviceInfo, E3 = t4.customCameraVideoTrack, C3 = t4.customMicrophoneAudioTrack, T3 = t4.autoConsume, P3 = t4.preferredProtocol, O3 = t4.signalingBaseUrl, x3 = t4.metaData, D3 = t4.defaultCameraIndex, I3 = t4.debugMode, A3 = t4.keyProvider;
                  switch ((0, o.A)(this, e4), Rr(this, Ir), (0, d.A)(this, "e2eeManager", null), Dr.debug(
                    'constructor() [roomId:"%s", peerId:"%s", displayName:"%s", device:%s]',
                    s2,
                    i2,
                    c2,
                    l3.flag
                  ), this.useSpartialLayerAnalytics = R3 || false, this._deviceInfo = k3, this._eventEmitter = new Ot.EventEmitter(), this._closed = false, this._displayName = c2, this._device = l3, this._forceTcp = h3, this._preferredProtocol = P3, m3) {
                    case Bt.nI.CONFERENCE:
                    case Bt.nI.SEND_AND_RECV:
                      r4 = true, n4 = true;
                      break;
                    case Bt.nI.RECV_ONLY:
                      r4 = false, n4 = true;
                      break;
                    default:
                      r4 = false, n4 = false;
                  }
                  if (this._mode = m3, this._produce = r4, this._consume = n4, this._useDataChannel = _3, this._forceH264 = Boolean(f3), this._forceVP9 = Boolean(g3), this._micEnabled = Boolean(b3), this._webcamEnabled = Boolean(w3), this._externalVideo = null, this._externalVideoStream = null, this._nextDataChannelTestNumber = 0, y3 && (this._externalVideo = document.createElement("video"), this._externalVideo.controls = true, this._externalVideo.loop = true, this._externalVideo.setAttribute("playsinline", ""), this._externalVideo.src = y3, this._externalVideo.play().catch(function(e5) {
                    return Dr.warn("externalVideo.play() failed:%o", e5);
                  })), this._handlerName = u2, this._useSimulcast = p3, this._socketUrl = "", this._secret = a2, this._peerId = i2, this._roomId = s2, this._baseUrl = "", this._webSocket = null, this._mediasoupDevice = null, this._sendTransport = null, this._recvTransport = null, this._micProducer = null, this._webcamProducer = null, this._shareProducer = null, this._shareAudioProducer = null, this._chatDataProducer = null, this._botDataProducer = null, this._consumers = /* @__PURE__ */ new Map(), this._dataConsumers = /* @__PURE__ */ new Map(), this._mics = /* @__PURE__ */ new Map(), this._mic = { device: null }, this._webcams = /* @__PURE__ */ new Map(), this._webcam = { device: null, resolution: S3 || "hd" }, this._pinnedParticipants = /* @__PURE__ */ new Map(), v3 && (Pr[0].scalabilityMode = "".concat(v3, "_KEY"), xr[0].scalabilityMode = v3), this.customCameraVideoTrack = E3, this.customMicrophoneAudioTrack = C3, this._autoConsume = T3, this._iceServers = [], this._metrics = new jt.VideoSDKMetrics({
                    refreshEvery: 1e3,
                    startAfter: 1e3,
                    verbose: false
                  }), this._stats = {}, this._latestStats = {}, this._isWebsocketAlive = false, this._pingWebsocketInterval = null, this._pingInternetInterval = null, this._pingWebsocketFailedCounter = 0, this._pongInternetCounter = 0, this._transportState = "", this._openTelemetry = null, this._videosdkLogs = null, this._signalingBaseUrl = O3 || "api.videosdk.live", this._metaData = x3, this._defaultCameraIndex = D3, this._debugMode = Boolean(I3), this._meetingConnectionState = null, A3) {
                    if (!(A3 instanceof _r.l))
                      throw new Error(
                        "keyProvider should be an instance of ExternalE2EEKeyProvider"
                      );
                    (function(e5, t5, r5) {
                      if ("function" == typeof e5 ? e5 === t5 : e5.has(t5))
                        return arguments.length < 3 ? t5 : r5;
                      throw new TypeError(
                        "Private element is not present on this object"
                      );
                    })(Ir, this, Mr).call(this, A3);
                  }
                },
                [
                  {
                    key: "on",
                    value: function(e4, t4) {
                      this._eventEmitter.on(e4, t4);
                    }
                  },
                  {
                    key: "softClose",
                    value: function() {
                      var e4, t4 = null === (e4 = this._openTelemetry) || void 0 === e4 ? void 0 : e4.trace({ name: "softClose() Start " });
                      try {
                        var r4, n4, s2;
                        this._eventEmitter.emit(
                          "REMOVE_PARTICIPANTS_FOR_SWITCH_MEETING"
                        );
                        var i2, a2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                          name: "Consumer Cleanup",
                          parentSpan: t4,
                          attributes: {
                            "videosdk.consumers.count": this._consumers.size || 0
                          }
                        }), o2 = wr(this._consumers.values());
                        try {
                          for (o2.s(); !(i2 = o2.n()).done; ) {
                            i2.value.close();
                          }
                        } catch (e5) {
                          o2.e(e5);
                        } finally {
                          o2.f();
                        }
                        null === (n4 = this._openTelemetry) || void 0 === n4 || n4.completeSpan({
                          span: a2,
                          status: 1,
                          message: "Closed ".concat(
                            this._consumers.size,
                            " consumers successfully"
                          )
                        }), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                          span: t4,
                          status: 1,
                          message: "Soft close completed successfully"
                        });
                      } catch (e5) {
                        var c2;
                        null === (c2 = this._openTelemetry) || void 0 === c2 || c2.completeSpan({
                          span: t4,
                          status: 2,
                          message: "Soft close failed: ".concat(e5.message)
                        }), console.error(e5);
                      }
                    }
                  },
                  {
                    key: "close",
                    value: function(e4) {
                      var t4, r4, n4, s2, i2, a2 = e4.sendLeft, o2 = void 0 === a2 || a2;
                      o2 && (null === (i2 = this._openTelemetry) || void 0 === i2 || i2.traceAutoComplete({
                        spanName: "Meeting is in CLOSING State",
                        status: 1
                      }));
                      if (!this._closed) {
                        this._closed = true, this._pingWebsocketInterval && clearInterval(this._pingWebsocketInterval), this._pingWebsocketInterval = null, this._pingInternetInterval && clearInterval(this._pingInternetInterval), this._pingInternetInterval = null, this._webSocket.close(), this._metrics.running && this._metrics.stopAllProbes(), Dr.debug("close()");
                        var c2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({ spanName: "Closing Trasnport" });
                        this._sendTransport && this._sendTransport.close(), this._recvTransport && this._recvTransport.close(), null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                          span: c2,
                          status: 1,
                          message: "Closed Trasnport"
                        }), kr.dispatch(Ze("closed")), o2 && this.emitMeetingStateChange(Nt), null === (n4 = this._openTelemetry) || void 0 === n4 || n4.traceAutoComplete({
                          spanName: "Meeting is in CLOSED State",
                          status: 1
                        }), o2 && this._eventEmitter.emit("MEETING_LEFT"), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.traceAutoComplete({
                          spanName: "Emitted MEETING_LEFT Event",
                          status: 1
                        });
                      }
                    }
                  },
                  {
                    key: "join",
                    value: (sr2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2, o2, c2, l3, p3, h3, m3, f3, g3 = this;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, qe({
                                    roomId: this._roomId,
                                    secret: this._secret,
                                    signalingBaseUrl: this._signalingBaseUrl
                                  });
                                case 2:
                                  n4 = e5.sent, s2 = n4.baseUrl, i2 = n4.iceServers, o2 = n4.logs, c2 = n4.observabilityJwt, l3 = n4.traces, p3 = n4.metaData, h3 = n4.signalingUrl, m3 = n4.socketPath, f3 = n4.socketUrl, this._baseUrl = s2, this._socketUrl = "wss://".concat(f3 || this._baseUrl, "/?roomId=").concat(this._roomId, "&peerId=").concat(this._peerId, "&secret=").concat(this._secret, "&mode=").concat(this._mode, "&lib=socket"), this._iceServers = i2, this._tracesEnabled = l3.enabled, this._openTelemetry = new Gt(
                                    (0, d.A)(
                                      {
                                        roomId: this._roomId,
                                        peerId: this._peerId,
                                        sdkName: "".concat(
                                          this._deviceInfo.sdkType,
                                          "-sdk"
                                        ),
                                        traces: l3,
                                        logs: o2,
                                        observabilityJwt: c2,
                                        metaData: p3
                                      },
                                      "traces",
                                      l3
                                    )
                                  ), this._joinSpan = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "Join() Calling",
                                    attributes: {
                                      DeviceInfo: JSON.stringify(
                                        this._deviceInfo
                                      ),
                                      mode: this._mode,
                                      displayName: this._displayName,
                                      multiStream: this._useSimulcast,
                                      micEnabled: this._micEnabled,
                                      webcamEnabled: this._webcamEnabled,
                                      CustomVideoTrack: !!this.customCameraVideoTrack,
                                      CustomMicTrack: !!this.customMicrophoneAudioTrack,
                                      signalingUrl: h3 || "signalingUrl not specify"
                                    }
                                  }), this._webSocket = Ae(this._socketUrl, {
                                    transports: ["websocket"],
                                    reconnectionAttempts: 10,
                                    reconnectionDelay: 5e3,
                                    reconnection: true,
                                    path: "".concat(
                                      null != m3 ? m3 : "",
                                      "/socket.io"
                                    )
                                  }), this.emitMeetingStateChange(At), kr.dispatch(Ze("connecting")), null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Meeting is in CONNECTING State",
                                    span: this._joinSpan,
                                    status: 1
                                  }), this._webSocket.on(
                                    "connect",
                                    function() {
                                    }
                                  ), this._webSocket.on(
                                    "connectionSuccess",
                                    function() {
                                      var e6;
                                      g3._isWebsocketAlive = true, g3._closed = false, g3._mode === (Bt.nI.RECV_ONLY || Bt.nI.SIGNALLING_ONLY) && g3.emitMeetingStateChange(Mt), null === (e6 = g3._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: "Meeting is in CONNECTED State",
                                        span: g3._joinSpan,
                                        status: 1
                                      }), g3.requestEntry();
                                    }
                                  ), this._webSocket.on(
                                    "disconnect",
                                    function(e6) {
                                    }
                                  ), this._webSocket.io.on(
                                    "reconnect_failed",
                                    function() {
                                      g3._closed || g3.close({ sendLeft: true });
                                    }
                                  ), this._webSocket.on(
                                    "connect_error",
                                    function(e6) {
                                      var t5, r5, n5, s3, i3;
                                      g3._webSocket.active && g3._webSocket.io._reconnecting ? (null === (t5 = g3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "Meeting is in RECONNECTING State",
                                        span: g3._joinSpan,
                                        status: 1
                                      }), kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "WebSocket Reconnecting"
                                        })
                                      ), g3.emitMeetingStateChange(Lt), g3._sendTransport && (null === (s3 = g3._sendTransport) || void 0 === s3 || s3.close(), g3._sendTransport = null), g3._recvTransport && (null === (i3 = g3._recvTransport) || void 0 === i3 || i3.close(), g3._recvTransport = null), null === (r5 = g3.customMicrophoneAudioTrack) || void 0 === r5 || r5.getTracks().forEach(function(e7) {
                                        e7.stop();
                                      }), g3.customMicrophoneAudioTrack = null, null === (n5 = g3.customCameraVideoTrack) || void 0 === n5 || n5.getTracks().forEach(function(e7) {
                                        e7.stop();
                                      }), g3.customCameraVideoTrack = null) : console.log(
                                        "Error while trying to reconnect",
                                        e6.message
                                      );
                                    }
                                  ), this._webSocket.on("close", function() {
                                    g3._closed || g3.close({ sendLeft: true });
                                  }), this._webSocket.on(
                                    "newConsumer",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5) {
                                          var n5, s3, i3, a2, o3, c3, d2, l4, p4, h4, m4, f4, v3, _3, y3, b3, w3, S3, R3, k3, E3, C3, T3, P3, O3, x3;
                                          return u().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    if (i3 = null === (n5 = g3._openTelemetry) || void 0 === n5 ? void 0 : n5.trace({
                                                      spanName: "Websocket REQ: newConsumer",
                                                      attributes: {
                                                        request: JSON.stringify(
                                                          t5
                                                        )
                                                      }
                                                    }), g3._consume) {
                                                      e8.next = 5;
                                                      break;
                                                    }
                                                    return r5({
                                                      errorCode: 403,
                                                      message: "I do not want to consume",
                                                      method: "newConsumer"
                                                    }), null === (a2 = g3._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                                      span: i3,
                                                      status: 2,
                                                      message: "I do not want to consume"
                                                    }), e8.abrupt("return");
                                                  case 5:
                                                    return o3 = t5.peerId, c3 = t5.producerId, d2 = t5.id, l4 = t5.kind, p4 = t5.rtpParameters, h4 = t5.type, m4 = t5.appData, f4 = t5.producerPaused, v3 = null === (s3 = g3._openTelemetry) || void 0 === s3 ? void 0 : s3.trace({
                                                      spanName: "Creating Consumer",
                                                      span: i3
                                                    }), e8.prev = 7, e8.next = 10, g3._recvTransport.consume(
                                                      {
                                                        id: d2,
                                                        producerId: c3,
                                                        kind: l4,
                                                        rtpParameters: p4,
                                                        appData: br(
                                                          br({}, m4),
                                                          {},
                                                          { peerId: o3 }
                                                        ),
                                                        onRtpReceiver: function(e9) {
                                                          var t6 = e9.writableStream, r6 = e9.readableStream;
                                                          if (!t6 || !r6) {
                                                            var n6 = e9.createEncodedStreams();
                                                            e9.writableStream = n6.writable, t6 = n6.writable, e9.readableStream = n6.readable, r6 = n6.readable;
                                                          }
                                                        }
                                                      }
                                                    );
                                                  case 10:
                                                    S3 = e8.sent, R3 = Me.parseScalabilityMode(
                                                      S3.rtpParameters.encodings[0].scalabilityMode
                                                    ), k3 = R3.spatialLayers, E3 = R3.temporalLayers, S3.spatialLayers = k3, S3.temporalLayers = E3, S3.currentSpatialLayers = k3 - 1, S3.currentTemporalLayers = E3 - 1, g3._consumers.set(
                                                      S3.id,
                                                      S3
                                                    ), S3.on(
                                                      "transportclose",
                                                      function() {
                                                        g3._consumers.delete(
                                                          S3.id
                                                        );
                                                        var e9 = yt(
                                                          S3.id,
                                                          o3
                                                        );
                                                        kr.dispatch(e9), g3._eventEmitter.emit(
                                                          e9.type,
                                                          e9.payload
                                                        );
                                                      }
                                                    ), null === (_3 = g3._openTelemetry) || void 0 === _3 || _3.completeSpan({
                                                      span: v3,
                                                      status: 1,
                                                      message: "Consumer Created"
                                                    }), v3 = null === (y3 = g3._openTelemetry) || void 0 === y3 ? void 0 : y3.trace({
                                                      spanName: "Sending Stream Enabled Event",
                                                      span: i3
                                                    }), C3 = _t(
                                                      {
                                                        id: S3.id,
                                                        type: h4,
                                                        locallyPaused: false,
                                                        remotelyPaused: f4,
                                                        rtpParameters: S3.rtpParameters,
                                                        spatialLayers: k3,
                                                        temporalLayers: E3,
                                                        currentSpatialLayer: k3 - 1,
                                                        currentTemporalLayer: E3 - 1,
                                                        preferredSpatialLayer: k3 - 1,
                                                        preferredTemporalLayer: E3 - 1,
                                                        priority: 1,
                                                        codec: S3.rtpParameters.codecs[0].mimeType.split(
                                                          "/"
                                                        )[1],
                                                        track: S3.track,
                                                        appData: m4,
                                                        instance: S3
                                                      },
                                                      o3
                                                    ), kr.dispatch(C3), g3._eventEmitter.emit(
                                                      C3.type,
                                                      C3.payload
                                                    ), r5(), "video" === S3.kind && kr.getState().me.audioOnly && g3._pauseConsumer(S3), null === (b3 = g3._openTelemetry) || void 0 === b3 || b3.completeSpan({
                                                      span: v3,
                                                      status: 1,
                                                      message: "Event Send Successfully"
                                                    }), null === (w3 = g3._openTelemetry) || void 0 === w3 || w3.completeSpan({
                                                      span: i3,
                                                      status: 1,
                                                      message: "New Consumer Created Successfully",
                                                      attributes: {
                                                        "consumer.consumerId": S3.id
                                                      }
                                                    }), "video" == S3.kind && S3.appData.share && (null === (T3 = g3._openTelemetry) || void 0 === T3 || T3.traceAutoComplete(
                                                      {
                                                        spanName: "Presenter Changed",
                                                        span: i3,
                                                        attributes: {
                                                          "peer.id": o3
                                                        }
                                                      }
                                                    )), g3.e2eeManager && g3.e2eeManager.emit(
                                                      "NEW_CONSUMER",
                                                      {
                                                        consumer: S3,
                                                        peerId: g3._peerId
                                                      }
                                                    ), e8.next = 38;
                                                    break;
                                                  case 31:
                                                    throw e8.prev = 31, e8.t0 = e8.catch(7), null === (P3 = g3._openTelemetry) || void 0 === P3 || P3.completeSpan({
                                                      span: v3,
                                                      status: 2,
                                                      message: "Error creating a Consumer: ".concat(
                                                        e8.t0
                                                      )
                                                    }), null === (O3 = g3._openTelemetry) || void 0 === O3 || O3.completeSpan({
                                                      span: i3,
                                                      status: 2,
                                                      message: "Error creating a Consumer: ".concat(
                                                        e8.t0
                                                      )
                                                    }), kr.dispatch(
                                                      Pt({
                                                        type: "error",
                                                        text: "Error creating a Consumer: ".concat(
                                                          e8.t0
                                                        )
                                                      })
                                                    ), null === (x3 = g3._videosdkLogs) || void 0 === x3 || x3.pushLogs({
                                                      logText: "Error creating a Consumer",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t0.message
                                                      }
                                                    }), e8.t0;
                                                  case 38:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[7, 31]]
                                          );
                                        })
                                      );
                                      return function(t5, r5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._webSocket.on(
                                    "newDataConsumer",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5) {
                                          var n5, s3, i3, a2, o3, c3, d2, l4;
                                          return u().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    if (g3._consume) {
                                                      e8.next = 3;
                                                      break;
                                                    }
                                                    return r5({
                                                      errorCode: 403,
                                                      message: "I do not want to data consume",
                                                      method: "newConsumer"
                                                    }), e8.abrupt("return");
                                                  case 3:
                                                    if (g3._useDataChannel) {
                                                      e8.next = 6;
                                                      break;
                                                    }
                                                    return r5({
                                                      errorCode: 403,
                                                      message: "I do not want DataChannels",
                                                      method: "newConsumer"
                                                    }), e8.abrupt("return");
                                                  case 6:
                                                    return n5 = t5.peerId, s3 = t5.dataProducerId, i3 = t5.id, a2 = t5.sctpStreamParameters, o3 = t5.label, c3 = t5.protocol, d2 = t5.appData, e8.prev = 7, e8.next = 10, g3._recvTransport.consumeData(
                                                      {
                                                        id: i3,
                                                        dataProducerId: s3,
                                                        sctpStreamParameters: a2,
                                                        label: o3,
                                                        protocol: c3,
                                                        appData: br(
                                                          br({}, d2),
                                                          {},
                                                          { peerId: n5 }
                                                        )
                                                      }
                                                    );
                                                  case 10:
                                                    l4 = e8.sent, g3._dataConsumers.set(
                                                      l4.id,
                                                      l4
                                                    ), l4.on(
                                                      "transportclose",
                                                      function() {
                                                        g3._dataConsumers.delete(
                                                          l4.id
                                                        );
                                                      }
                                                    ), l4.on(
                                                      "open",
                                                      function() {
                                                        Dr.debug(
                                                          'DataConsumer "open" event'
                                                        );
                                                      }
                                                    ), l4.on(
                                                      "close",
                                                      function() {
                                                        Dr.warn(
                                                          'DataConsumer "close" event'
                                                        ), g3._dataConsumers.delete(
                                                          l4.id
                                                        ), kr.dispatch(
                                                          Pt({
                                                            type: "error",
                                                            text: "DataConsumer closed"
                                                          })
                                                        );
                                                      }
                                                    ), l4.on(
                                                      "error",
                                                      function(e9) {
                                                        Dr.error(
                                                          'DataConsumer "error" event:%o',
                                                          e9
                                                        ), kr.dispatch(
                                                          Pt({
                                                            type: "error",
                                                            text: "DataConsumer error: ".concat(
                                                              e9
                                                            )
                                                          })
                                                        );
                                                      }
                                                    ), l4.on(
                                                      "message",
                                                      function(e9) {
                                                        if (Dr.debug(
                                                          'DataConsumer "message" event [streamId:%d]',
                                                          l4.sctpStreamParameters.streamId
                                                        ), window.DC_MESSAGE = e9, e9 instanceof ArrayBuffer) {
                                                          var t6 = new DataView(
                                                            e9
                                                          ).getUint32();
                                                          return t6 == Math.pow(
                                                            2,
                                                            32
                                                          ) - 1 ? (Dr.warn(
                                                            "dataChannelTest finished!"
                                                          ), void (g3._nextDataChannelTestNumber = 0)) : (t6 > g3._nextDataChannelTestNumber && Dr.warn(
                                                            "dataChannelTest: %s packets missing",
                                                            t6 - g3._nextDataChannelTestNumber
                                                          ), void (g3._nextDataChannelTestNumber = t6 + 1));
                                                        }
                                                        if ("string" == typeof e9)
                                                          switch (l4.label) {
                                                            case "chat":
                                                              var r6 = kr.getState().peers, n6 = Object.keys(
                                                                r6
                                                              ).map(
                                                                function(e10) {
                                                                  return r6[e10];
                                                                }
                                                              ).find(
                                                                function(e10) {
                                                                  return e10.dataConsumers.includes(
                                                                    l4.id
                                                                  );
                                                                }
                                                              );
                                                              if (!n6) {
                                                                Dr.warn(
                                                                  'DataConsumer "message" from unknown peer'
                                                                );
                                                                break;
                                                              }
                                                              kr.dispatch(
                                                                Pt({
                                                                  title: "".concat(
                                                                    n6.displayName,
                                                                    " says:"
                                                                  ),
                                                                  text: e9,
                                                                  timeout: 5e3
                                                                })
                                                              ), g3._eventEmitter.emit(
                                                                "CHAT_MESSAGE",
                                                                {
                                                                  text: e9,
                                                                  senderId: n6.id,
                                                                  timestamp: (/* @__PURE__ */ new Date()).getTime()
                                                                }
                                                              );
                                                              break;
                                                            case "bot":
                                                              kr.dispatch(
                                                                Pt({
                                                                  title: "Message from Bot:",
                                                                  text: e9,
                                                                  timeout: 5e3
                                                                })
                                                              );
                                                          }
                                                        else
                                                          Dr.warn(
                                                            'ignoring DataConsumer "message" (not a string)'
                                                          );
                                                      }
                                                    ), window.DC = l4, kr.dispatch(
                                                      Ct(
                                                        {
                                                          id: l4.id,
                                                          sctpStreamParameters: l4.sctpStreamParameters,
                                                          label: l4.label,
                                                          protocol: l4.protocol
                                                        },
                                                        n5
                                                      )
                                                    ), r5(), e8.next = 26;
                                                    break;
                                                  case 22:
                                                    e8.prev = 22, e8.t0 = e8.catch(7), Dr.error(
                                                      '"newDataConsumer" request failed:%o',
                                                      e8.t0
                                                    ), kr.dispatch(
                                                      Pt({
                                                        type: "error",
                                                        text: "Error creating a DataConsumer: ".concat(
                                                          e8.t0
                                                        )
                                                      })
                                                    );
                                                  case 26:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[7, 22]]
                                          );
                                        })
                                      );
                                      return function(t5, r5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._webSocket.on(
                                    "enableMic",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5) {
                                          var n5, s3, i3;
                                          return u().wrap(function(e8) {
                                            for (; ; )
                                              switch (e8.prev = e8.next) {
                                                case 0:
                                                  try {
                                                    s3 = t5.peerId, null === (n5 = g3._openTelemetry) || void 0 === n5 || n5.traceAutoComplete(
                                                      {
                                                        spanName: "Emitting MIC_REQUESTED & Websocket REQ: enableMic for ".concat(
                                                          s3
                                                        ),
                                                        status: 1
                                                      }
                                                    ), g3._eventEmitter.emit(
                                                      "MIC_REQUESTED",
                                                      { peerId: s3 }
                                                    ), r5();
                                                  } catch (e9) {
                                                    Dr.error(
                                                      '"enableMic" request failed:%o',
                                                      e9
                                                    ), null === (i3 = g3._videosdkLogs) || void 0 === i3 || i3.pushLogs({
                                                      logText: "Error enableMic request failed",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e9.message
                                                      }
                                                    }), g3._emitError({
                                                      code: 3027,
                                                      message: e9.message
                                                    });
                                                  }
                                                case 1:
                                                case "end":
                                                  return e8.stop();
                                              }
                                          }, e7);
                                        })
                                      );
                                      return function(t5, r5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._webSocket.on(
                                    "disableMic",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5) {
                                          var n5, s3, i3, a2, o3;
                                          return u().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    return e8.prev = 0, n5 = null === (s3 = g3._openTelemetry) || void 0 === s3 ? void 0 : s3.trace({
                                                      spanName: "Websocket REQ: disableMic"
                                                    }), e8.next = 4, g3.disableMic(false, n5);
                                                  case 4:
                                                    null === (i3 = g3._openTelemetry) || void 0 === i3 || i3.completeSpan({
                                                      span: n5,
                                                      status: 1,
                                                      message: "Request Completed"
                                                    }), r5(), e8.next = 13;
                                                    break;
                                                  case 8:
                                                    e8.prev = 8, e8.t0 = e8.catch(0), null === (a2 = g3._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                                      span: n5,
                                                      status: 2,
                                                      message: "disableMic request failed ".concat(
                                                        e8.t0
                                                      )
                                                    }), null === (o3 = g3._videosdkLogs) || void 0 === o3 || o3.pushLogs({
                                                      logText: "Error disableMic request failed",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t0.message
                                                      }
                                                    }), g3._emitError({
                                                      code: 3028,
                                                      message: e8.t0.message
                                                    });
                                                  case 13:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[0, 8]]
                                          );
                                        })
                                      );
                                      return function(t5, r5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._webSocket.on(
                                    "enableWebcam",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5) {
                                          var n5, s3, i3;
                                          return u().wrap(function(e8) {
                                            for (; ; )
                                              switch (e8.prev = e8.next) {
                                                case 0:
                                                  try {
                                                    s3 = t5.peerId, null === (n5 = g3._openTelemetry) || void 0 === n5 || n5.traceAutoComplete(
                                                      {
                                                        spanName: "Emitting WEBCAM_REQUESTED & Websocket REQ: enableWebcam for ".concat(
                                                          s3
                                                        ),
                                                        status: 1
                                                      }
                                                    ), g3._eventEmitter.emit(
                                                      "WEBCAM_REQUESTED",
                                                      { peerId: s3 }
                                                    ), r5();
                                                  } catch (e9) {
                                                    Dr.error(
                                                      '"enableWebcam" request failed:%o',
                                                      e9
                                                    ), null === (i3 = g3._videosdkLogs) || void 0 === i3 || i3.pushLogs({
                                                      logText: "Error enableWebcam request failed",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e9.message
                                                      }
                                                    }), g3._emitError({
                                                      code: 3029,
                                                      message: e9.message
                                                    });
                                                  }
                                                case 1:
                                                case "end":
                                                  return e8.stop();
                                              }
                                          }, e7);
                                        })
                                      );
                                      return function(t5, r5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._webSocket.on(
                                    "disableWebcam",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5) {
                                          var n5, s3, i3, a2, o3;
                                          return u().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    return e8.prev = 0, n5 = null === (s3 = g3._openTelemetry) || void 0 === s3 ? void 0 : s3.trace({
                                                      spanName: "Websocket REQ: disableWebcam"
                                                    }), e8.next = 4, g3.disableWebcam(n5);
                                                  case 4:
                                                    null === (i3 = g3._openTelemetry) || void 0 === i3 || i3.completeSpan({
                                                      span: n5,
                                                      status: 1,
                                                      message: "Request Completed"
                                                    }), r5(), e8.next = 13;
                                                    break;
                                                  case 8:
                                                    e8.prev = 8, e8.t0 = e8.catch(0), null === (a2 = g3._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                                      span: n5,
                                                      status: 2,
                                                      message: "disableWebcam request failed ".concat(
                                                        e8.t0
                                                      )
                                                    }), null === (o3 = g3._videosdkLogs) || void 0 === o3 || o3.pushLogs({
                                                      logText: "Error disableWebcam request failed",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t0.message
                                                      }
                                                    }), g3._emitError({
                                                      code: 3030,
                                                      message: e8.t0.message
                                                    });
                                                  case 13:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[0, 8]]
                                          );
                                        })
                                      );
                                      return function(t5, r5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._webSocket.on(
                                    "pinStateChanged",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5) {
                                          var n5, s3, i3, a2, o3, c3, d2, l4, p4;
                                          return u().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    e8.prev = 0, a2 = t5.peerId, o3 = t5.state, c3 = t5.pinnedBy, n5 = null === (s3 = g3._openTelemetry) || void 0 === s3 ? void 0 : s3.trace({
                                                      spanName: "Websocket REQ: pinStateChanged",
                                                      attributes: {
                                                        requestData: JSON.stringify(
                                                          {
                                                            peerId: a2,
                                                            state: o3,
                                                            pinnedBy: c3
                                                          }
                                                        )
                                                      }
                                                    }), g3._pinnedParticipants.has(
                                                      a2
                                                    ) || g3._pinnedParticipants.set(
                                                      a2,
                                                      {
                                                        cam: false,
                                                        share: false
                                                      }
                                                    ), d2 = g3._pinnedParticipants.get(
                                                      a2
                                                    ), null != o3.cam && (d2.cam = o3.cam), null != o3.share && (d2.share = o3.share), g3._pinnedParticipants.set(
                                                      a2,
                                                      d2
                                                    ), g3._eventEmitter.emit(
                                                      "PIN_STATE_CHANGED",
                                                      {
                                                        peerId: a2,
                                                        state: o3,
                                                        pinnedBy: c3
                                                      }
                                                    ), 0 == d2.share && 0 == d2.cam && g3._pinnedParticipants.delete(
                                                      a2
                                                    ), null === (i3 = g3._openTelemetry) || void 0 === i3 || i3.completeSpan({
                                                      span: n5,
                                                      status: 1,
                                                      message: "Request Completed",
                                                      attributes: {
                                                        _pinnedParticipants: JSON.stringify(
                                                          g3._pinnedParticipants
                                                        )
                                                      }
                                                    }), r5(), e8.next = 19;
                                                    break;
                                                  case 14:
                                                    throw e8.prev = 14, e8.t0 = e8.catch(0), null === (l4 = g3._openTelemetry) || void 0 === l4 || l4.completeSpan({
                                                      span: n5,
                                                      status: 2,
                                                      message: "pinStateChanged request failed"
                                                    }), null === (p4 = g3._videosdkLogs) || void 0 === p4 || p4.pushLogs({
                                                      logText: "Error pinStateChanged request failed",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t0.message
                                                      }
                                                    }), e8.t0;
                                                  case 19:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[0, 14]]
                                          );
                                        })
                                      );
                                      return function(t5, r5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._webSocket.on(
                                    "switchRoom",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5) {
                                          return u().wrap(function(e8) {
                                            for (; ; )
                                              switch (e8.prev = e8.next) {
                                                case 0:
                                                  g3._eventEmitter.emit(
                                                    "SWITCH_ROOM",
                                                    t5
                                                  ), r5();
                                                case 2:
                                                case "end":
                                                  return e8.stop();
                                              }
                                          }, e7);
                                        })
                                      );
                                      return function(t5, r5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._webSocket.on(
                                    "statsData",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5) {
                                          return u().wrap(function(e8) {
                                            for (; ; )
                                              switch (e8.prev = e8.next) {
                                                case 0:
                                                  r5({
                                                    peerId: g3._peerId,
                                                    statsData: g3._stats
                                                  }), g3._stats = {};
                                                case 2:
                                                case "end":
                                                  return e8.stop();
                                              }
                                          }, e7);
                                        })
                                      );
                                      return function(t5, r5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._webSocket.on(
                                    "notification",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5) {
                                          var r5, n5, s3, i3, a2, d2, l4, p4, h4, m4, f4, v3, _3, y3, b3, w3, S3, R3, k3, E3, C3, T3, P3, O3, x3, D3, I3, A3, M3, L3, N3, j3, B3, F3, U3, W3, q3, V3, H3, z3, G3, K3, $3, J3, Q3, Y3, X3, Z3, ee3, te3, re3, ne3, se3, ie3, ae3, oe3, ce3, de3, le3, ue3, pe3, he3, me3, fe3, ge3, ve3, _e3, ye3, be3, we3, Se3, Re3, ke3, Ee3, Ce3, Te3, Pe3, Oe3, xe3;
                                          return u().wrap(function(e8) {
                                            for (; ; )
                                              switch (e8.prev = e8.next) {
                                                case 0:
                                                  n5 = null !== (r5 = t5.data) && void 0 !== r5 ? r5 : t5, Dr.debug(
                                                    'proto "notification" event [method:%s, data:%o]',
                                                    t5.method,
                                                    n5
                                                  ), e8.t0 = t5.method, e8.next = "error" === e8.t0 ? 5 : "participantMediaStateChanged" === e8.t0 ? 10 : "producerScore" === e8.t0 ? 11 : "entryRequested" === e8.t0 ? 14 : "entryResponded" === e8.t0 ? 18 : "newPeer" === e8.t0 ? 34 : "peerClosed" === e8.t0 ? 41 : "peerDisplayNameChanged" === e8.t0 ? 47 : "consumerClosed" === e8.t0 ? 51 : "consumerPaused" === e8.t0 ? 63 : "consumerResumed" === e8.t0 ? 71 : "consumerLayersChanged" === e8.t0 ? 79 : "consumerScore" === e8.t0 ? 90 : "dataConsumerClosed" === e8.t0 ? 93 : "activeSpeaker" === e8.t0 ? 102 : "consumerResumedSubManager" === e8.t0 ? 107 : "consumerPausedSubManager" === e8.t0 ? 109 : "transcriptionStateChanged" === e8.t0 ? 111 : "transcriptionText" === e8.t0 ? 114 : "recordingStateChanged" === e8.t0 ? 116 : "recordingStarted" === e8.t0 ? 119 : "recordingStopped" === e8.t0 ? 121 : "livestreamStateChanged" === e8.t0 ? 123 : "livestreamStarted" === e8.t0 ? 126 : "livestreamStopped" === e8.t0 ? 128 : "hlsStateChanged" === e8.t0 ? 130 : "hlsPlayableStateChanged" === e8.t0 ? 133 : "hlsStarted" === e8.t0 ? 135 : "hlsStopped" === e8.t0 ? 138 : "whiteboardStarted" === e8.t0 ? 140 : "whiteboardStopped" === e8.t0 ? 143 : "addCharacter" === e8.t0 ? 145 : "removeCharacter" === e8.t0 ? 151 : "characterStateChanged" === e8.t0 ? 157 : "characterMessage" === e8.t0 ? 160 : "userMessage" === e8.t0 ? 162 : "characterData" === e8.t0 ? 164 : "videoStatusChanged" === e8.t0 ? 166 : "videoSeeked" === e8.t0 ? 168 : "connectionOpen" === e8.t0 ? 171 : "connectionClose" === e8.t0 ? 173 : "connectionChatMessage" === e8.t0 ? 175 : "connectionParticipantJoined" === e8.t0 ? 177 : "connectionParticipantLeft" === e8.t0 ? 179 : "pubsubMessage" === e8.t0 ? 181 : "peerModeChanged" === e8.t0 ? 183 : "restartIce" === e8.t0 ? 186 : 190;
                                                  break;
                                                case 5:
                                                  return a2 = n5, g3._eventEmitter.emit(
                                                    "ERROR",
                                                    a2
                                                  ), null === (s3 = g3._videosdkLogs) || void 0 === s3 || s3.pushLogs({
                                                    logText: "Error in Meeting Session",
                                                    logType: "ERROR",
                                                    attributes: {
                                                      error: a2.message
                                                    }
                                                  }), null === (i3 = g3._openTelemetry) || void 0 === i3 || i3.traceAutoComplete({
                                                    spanName: "Emitted `ERROR` Event",
                                                    attributes: {
                                                      error: a2.message
                                                    },
                                                    status: 2
                                                  }), e8.abrupt("break", 191);
                                                case 10:
                                                  try {
                                                    d2 = n5.peerId, l4 = n5.kind, p4 = n5.newState, g3._eventEmitter.emit(
                                                      "PARTICIPANT_MEDIA_STATE_CHANGED",
                                                      {
                                                        peerId: d2,
                                                        kind: l4,
                                                        newState: p4
                                                      }
                                                    ), "video" == l4 && (null === (h4 = g3._openTelemetry) || void 0 === h4 || h4.traceAutoComplete(
                                                      {
                                                        spanName: "".concat(
                                                          d2,
                                                          " has "
                                                        ).concat(
                                                          p4 ? "enable" : "disable",
                                                          " "
                                                        ).concat(l4),
                                                        status: 1
                                                      }
                                                    ));
                                                  } catch (e9) {
                                                    Dr.error(
                                                      '"newProducer" request failed:%o',
                                                      e9
                                                    ), null === (m4 = g3._videosdkLogs) || void 0 === m4 || m4.pushLogs({
                                                      logText: "Error newProducer request failed",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e9.message
                                                      }
                                                    });
                                                  }
                                                case 11:
                                                  return f4 = n5.producerId, v3 = n5.score, kr.dispatch(ut(f4, v3)), e8.abrupt("break", 191);
                                                case 14:
                                                  return y3 = n5.id, b3 = n5.name, w3 = null === (_3 = g3._openTelemetry) || void 0 === _3 ? void 0 : _3.trace({
                                                    spanName: "Websocket Noti: entryRequested",
                                                    span: g3._joinSpan,
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        {
                                                          id: y3,
                                                          name: b3
                                                        }
                                                      )
                                                    }
                                                  }), y3 !== g3._peerId ? (g3._eventEmitter.emit(
                                                    "ENTRY_REQUESTED",
                                                    { id: y3, name: b3 }
                                                  ), null === (S3 = g3._openTelemetry) || void 0 === S3 || S3.completeSpan({
                                                    span: w3,
                                                    status: 1,
                                                    message: "EntryResponded Recieved"
                                                  })) : null === (R3 = g3._openTelemetry) || void 0 === R3 || R3.completeSpan({
                                                    span: w3,
                                                    status: 2,
                                                    message: "Entry Request Failed"
                                                  }), e8.abrupt("break", 191);
                                                case 18:
                                                  if (C3 = n5.id, T3 = n5.decision, P3 = n5.sessionId, O3 = n5.switchingRoomId, x3 = null === (k3 = g3._openTelemetry) || void 0 === k3 ? void 0 : k3.trace({
                                                    name: "Entry Response Handling",
                                                    attributes: {
                                                      "peer.id": C3,
                                                      "entry.decision": T3,
                                                      switching_room: !!O3
                                                    }
                                                  }), C3 === g3._peerId && "allowed" === T3) {
                                                    e8.next = 24;
                                                    break;
                                                  }
                                                  return null === (D3 = g3._openTelemetry) || void 0 === D3 || D3.completeSpan({
                                                    span: g3._joinSpan,
                                                    status: 2,
                                                    message: "Join Request Denied"
                                                  }), null === (I3 = g3._openTelemetry) || void 0 === I3 || I3.completeSpan({
                                                    span: x3,
                                                    status: 2,
                                                    message: "Entry denied for peer"
                                                  }), e8.abrupt("break", 191);
                                                case 24:
                                                  if (g3._eventEmitter.emit(
                                                    "ENTRY_RESPONDED",
                                                    { id: C3, decision: T3 }
                                                  ), !O3) {
                                                    e8.next = 30;
                                                    break;
                                                  }
                                                  return null === (A3 = g3._openTelemetry) || void 0 === A3 || A3.completeSpan({
                                                    span: x3,
                                                    status: 1,
                                                    message: "Switching room initiated"
                                                  }), g3.softClose(), g3.switchingRoom(O3), e8.abrupt("break", 191);
                                                case 30:
                                                  return g3._videosdkLogs = new Jt({
                                                    roomId: g3._roomId,
                                                    peerId: g3._peerId,
                                                    logs: o2,
                                                    observabilityJwt: c2,
                                                    deviceInfo: g3._deviceInfo,
                                                    sessionId: P3,
                                                    debugMode: g3._debugMode
                                                  }), g3.joinRoom(), null === (E3 = g3._openTelemetry) || void 0 === E3 || E3.completeSpan({
                                                    span: x3,
                                                    status: 1,
                                                    message: "Entry response handled successfully"
                                                  }), e8.abrupt("break", 191);
                                                case 34:
                                                  L3 = ft(
                                                    br(
                                                      br({}, M3 = n5),
                                                      {},
                                                      {
                                                        consumers: [],
                                                        dataConsumers: []
                                                      }
                                                    )
                                                  ), kr.dispatch(L3), g3._eventEmitter.emit(
                                                    L3.type,
                                                    L3.payload
                                                  ), kr.dispatch(
                                                    Pt({
                                                      text: "".concat(
                                                        M3.displayName,
                                                        " has joined the room"
                                                      )
                                                    })
                                                  );
                                                  try {
                                                    null === (N3 = g3._openTelemetry) || void 0 === N3 || N3.traceAutoComplete({
                                                      spanName: "Websocket Noti: newPeer ".concat(
                                                        M3.displayName
                                                      ),
                                                      attributes: {
                                                        peerData: JSON.stringify(
                                                          M3
                                                        )
                                                      }
                                                    });
                                                  } catch (e9) {
                                                    null === (j3 = g3._videosdkLogs) || void 0 === j3 || j3.pushLogs({
                                                      logText: "Error Websocket Noti: newPeer",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e9.message
                                                      }
                                                    }), console.error(e9);
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    191
                                                  );
                                                case 41:
                                                  return F3 = n5.peerId, U3 = gt(F3), kr.dispatch(U3), g3._eventEmitter.emit(
                                                    U3.type,
                                                    U3.payload
                                                  ), null === (B3 = g3._openTelemetry) || void 0 === B3 || B3.traceAutoComplete({
                                                    spanName: "Websocket Noti: peerClosed for ".concat(
                                                      F3
                                                    )
                                                  }), e8.abrupt("break", 191);
                                                case 47:
                                                  return W3 = n5.peerId, q3 = n5.displayName, V3 = n5.oldDisplayName, kr.dispatch(vt(q3, W3)), kr.dispatch(
                                                    Pt({
                                                      text: "".concat(
                                                        V3,
                                                        " is now "
                                                      ).concat(q3)
                                                    })
                                                  ), e8.abrupt("break", 191);
                                                case 51:
                                                  if (z3 = n5.consumerId, G3 = g3._consumers.get(z3)) {
                                                    e8.next = 55;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    191
                                                  );
                                                case 55:
                                                  return G3.close(), g3._consumers.delete(z3), K3 = G3.appData.peerId, $3 = yt(z3, K3), kr.dispatch($3), g3._eventEmitter.emit(
                                                    $3.type,
                                                    $3.payload
                                                  ), null === (H3 = g3._openTelemetry) || void 0 === H3 || H3.traceAutoComplete({
                                                    spanName: "Websocket Noti: consumerClosed for id ".concat(
                                                      z3
                                                    ),
                                                    attributes: {
                                                      consumerData: JSON.stringify(
                                                        G3
                                                      )
                                                    }
                                                  }), e8.abrupt("break", 191);
                                                case 63:
                                                  if (J3 = n5.consumerId, Q3 = g3._consumers.get(J3)) {
                                                    e8.next = 67;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    191
                                                  );
                                                case 67:
                                                  return Q3.pause(), kr.dispatch(
                                                    bt(J3, "remote")
                                                  ), g3._eventEmitter.emit(
                                                    "CONSUMER_PAUSED",
                                                    {
                                                      consumerId: J3,
                                                      peerId: Q3.appData.peerId
                                                    }
                                                  ), e8.abrupt("break", 191);
                                                case 71:
                                                  if (Y3 = n5.consumerId, X3 = g3._consumers.get(Y3)) {
                                                    e8.next = 75;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    191
                                                  );
                                                case 75:
                                                  return X3.resume(), kr.dispatch(
                                                    wt(Y3, "remote")
                                                  ), g3._eventEmitter.emit(
                                                    "CONSUMER_RESUMED",
                                                    {
                                                      consumerId: Y3,
                                                      peerId: X3.appData.peerId
                                                    }
                                                  ), e8.abrupt("break", 191);
                                                case 79:
                                                  if (ee3 = n5.consumerId, te3 = n5.spatialLayer, re3 = n5.temporalLayer, (ne3 = g3._consumers.get(
                                                    ee3
                                                  )).currentSpatialLayer = te3, ne3.currentTemporalLayer = re3, ne3) {
                                                    e8.next = 85;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    191
                                                  );
                                                case 85:
                                                  return (null === (Z3 = ne3.appData) || void 0 === Z3 || null === (Z3 = Z3.encodings) || void 0 === Z3 ? void 0 : Z3.length) > 1 && g3._eventEmitter.emit(
                                                    "VIDEO_QUALITY_CHANGED",
                                                    {
                                                      peerId: ne3.appData.peerId,
                                                      prevQuality: ne3.spatialLayers - 1 - ne3.currentSpatialLayer == 0 ? "HIGH" : ne3.spatialLayers - 1 - ne3.currentSpatialLayer == 1 ? "MEDIUM" : "LOW",
                                                      currentQuality: ne3.spatialLayers - 1 - te3 == 0 ? "HIGH" : ne3.spatialLayers - 1 - te3 == 1 ? "MEDIUM" : "LOW"
                                                    }
                                                  ), ne3.currentSpatialLayer = te3, ne3.currentTemporalLayer = re3, kr.dispatch(
                                                    St(ee3, te3, re3)
                                                  ), e8.abrupt("break", 191);
                                                case 90:
                                                  return se3 = n5.consumerId, ie3 = n5.score, kr.dispatch(Et(se3, ie3)), e8.abrupt("break", 191);
                                                case 93:
                                                  if (ae3 = n5.dataConsumerId, oe3 = g3._dataConsumers.get(
                                                    ae3
                                                  )) {
                                                    e8.next = 97;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    191
                                                  );
                                                case 97:
                                                  return oe3.close(), g3._dataConsumers.delete(
                                                    ae3
                                                  ), ce3 = oe3.appData.peerId, kr.dispatch(Tt(ae3, ce3)), e8.abrupt("break", 191);
                                                case 102:
                                                  return de3 = n5.peerId, le3 = et(de3), kr.dispatch(le3), g3._eventEmitter.emit(
                                                    le3.type,
                                                    le3.payload
                                                  ), e8.abrupt("break", 191);
                                                case 107:
                                                  return g3._eventEmitter.emit(
                                                    "SUB_MANAGER_RESUMED",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 109:
                                                  return g3._eventEmitter.emit(
                                                    "SUB_MANAGER_PAUSED",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 111:
                                                  return g3._eventEmitter.emit(
                                                    "TRANSCRIPTION_STATE_CHANGED",
                                                    n5
                                                  ), null === (ue3 = g3._openTelemetry) || void 0 === ue3 || ue3.traceAutoComplete({
                                                    spanName: "Emitted TRANSCRIPTION_STATE_CHANGED, status : ".concat(
                                                      n5.status
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        n5
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 191);
                                                case 114:
                                                  return g3._eventEmitter.emit(
                                                    "TRANSCRIPTION_TEXT",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 116:
                                                  return g3._eventEmitter.emit(
                                                    "RECORDING_STATE_CHANGED",
                                                    n5
                                                  ), null === (pe3 = g3._openTelemetry) || void 0 === pe3 || pe3.traceAutoComplete({
                                                    spanName: "Emitted RECORDING_STATE_CHANGED, status : ".concat(
                                                      n5.status
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        n5
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 191);
                                                case 119:
                                                  return g3._eventEmitter.emit(
                                                    "RECORDING_STARTED",
                                                    {}
                                                  ), e8.abrupt("break", 191);
                                                case 121:
                                                  return g3._eventEmitter.emit(
                                                    "RECORDING_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 191);
                                                case 123:
                                                  return g3._eventEmitter.emit(
                                                    "LIVESTREAM_STATE_CHANGED",
                                                    n5
                                                  ), null === (he3 = g3._openTelemetry) || void 0 === he3 || he3.traceAutoComplete({
                                                    spanName: "Emitted LIVESTREAM_STATE_CHANGED, status : ".concat(
                                                      n5.status
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        n5
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 191);
                                                case 126:
                                                  return g3._eventEmitter.emit(
                                                    "LIVESTREAM_STARTED",
                                                    {}
                                                  ), e8.abrupt("break", 191);
                                                case 128:
                                                  return g3._eventEmitter.emit(
                                                    "LIVESTREAM_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 191);
                                                case 130:
                                                  return g3._eventEmitter.emit(
                                                    "HLS_STATE_CHANGED",
                                                    n5
                                                  ), null === (me3 = g3._openTelemetry) || void 0 === me3 || me3.traceAutoComplete({
                                                    spanName: "Emitted HLS_STATE_CHANGED, status : ".concat(
                                                      n5.status
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        n5
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 191);
                                                case 133:
                                                  return n5.isPlayable && (g3._eventEmitter.emit(
                                                    "HLS_STATE_CHANGED",
                                                    br(
                                                      br({}, n5),
                                                      {},
                                                      {
                                                        status: Ft.V.HLS_PLAYABLE
                                                      }
                                                    )
                                                  ), null === (fe3 = g3._openTelemetry) || void 0 === fe3 || fe3.traceAutoComplete(
                                                    {
                                                      spanName: "Websocket Noti: hlsPlayableStateChanged",
                                                      status: 1
                                                    }
                                                  )), e8.abrupt("break", 191);
                                                case 135:
                                                  return ge3 = n5.downstreamUrl, g3._eventEmitter.emit(
                                                    "HLS_STARTED",
                                                    ge3
                                                  ), e8.abrupt("break", 191);
                                                case 138:
                                                  return g3._eventEmitter.emit(
                                                    "HLS_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 191);
                                                case 140:
                                                  return ve3 = n5.state, _e3 = n5.url, ve3 ? g3._eventEmitter.emit(
                                                    "WHITEBOARD_STARTED",
                                                    { state: ve3 }
                                                  ) : _e3 && g3._eventEmitter.emit(
                                                    "WHITEBOARD_STARTED",
                                                    { url: _e3 }
                                                  ), e8.abrupt("break", 191);
                                                case 143:
                                                  return g3._eventEmitter.emit(
                                                    "WHITEBOARD_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 191);
                                                case 145:
                                                  return be3 = ft(
                                                    br(
                                                      br({}, n5),
                                                      {},
                                                      {
                                                        consumers: [],
                                                        dataConsumers: []
                                                      }
                                                    )
                                                  ), kr.dispatch(be3), g3._eventEmitter.emit(
                                                    "ADD_CHARACTER",
                                                    n5
                                                  ), null === (ye3 = g3._openTelemetry) || void 0 === ye3 || ye3.traceAutoComplete({
                                                    spanName: "Emitted ADD_CHARACTER : ".concat(
                                                      n5
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        n5
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 191);
                                                case 151:
                                                  return Se3 = n5.id, Re3 = gt(Se3), kr.dispatch(Re3), g3._eventEmitter.emit(
                                                    "REMOVE_CHARACTER",
                                                    n5
                                                  ), null === (we3 = g3._openTelemetry) || void 0 === we3 || we3.traceAutoComplete({
                                                    spanName: "Emitted REMOVE_CHARACTER : ".concat(
                                                      n5
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        n5
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 191);
                                                case 157:
                                                  return g3._eventEmitter.emit(
                                                    "CHARACTER_STATE_CHANGED",
                                                    n5
                                                  ), null === (ke3 = g3._openTelemetry) || void 0 === ke3 || ke3.traceAutoComplete({
                                                    spanName: "Emitted CHARACTER_STATE_CHANGED, status : ".concat(
                                                      n5.status
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        n5
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 191);
                                                case 160:
                                                  return g3._eventEmitter.emit(
                                                    "CHARACTER_MESSAGE",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 162:
                                                  return g3._eventEmitter.emit(
                                                    "USER_MESSAGE",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 164:
                                                  return g3._eventEmitter.emit(
                                                    "CHARACTER_DATA",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 166:
                                                  return g3._eventEmitter.emit(
                                                    "VIDEO_STATE_CHANGED",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 168:
                                                  return Ee3 = n5.currentTime, g3._eventEmitter.emit(
                                                    "VIDEO_SEEKED",
                                                    { currentTime: Ee3 }
                                                  ), e8.abrupt("break", 191);
                                                case 171:
                                                  return g3._eventEmitter.emit(
                                                    "CONNECTION_OPEN",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 173:
                                                  return g3._eventEmitter.emit(
                                                    "CONNECTION_CLOSE",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 175:
                                                  return g3._eventEmitter.emit(
                                                    "CONNECTION_CHAT_MESSAGE",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 177:
                                                  return g3._eventEmitter.emit(
                                                    "CONNECTION_PARTICIPANT_JOIN",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 179:
                                                  return g3._eventEmitter.emit(
                                                    "CONNECTION_PARTICIPANT_LEFT",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 181:
                                                  return g3._eventEmitter.emit(
                                                    "PUBSUB_MESSAGE",
                                                    n5
                                                  ), e8.abrupt("break", 191);
                                                case 183:
                                                  return g3._eventEmitter.emit(
                                                    "PEER_MODE_CHANGED",
                                                    n5
                                                  ), null === (Ce3 = g3._openTelemetry) || void 0 === Ce3 || Ce3.traceAutoComplete({
                                                    spanName: "Emitted PEER_MODE_CHANGED",
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        n5
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 191);
                                                case 186:
                                                  return Pe3 = n5.transportId, Oe3 = n5.iceParameters, xe3 = null === (Te3 = g3._openTelemetry) || void 0 === Te3 ? void 0 : Te3.trace({
                                                    spanName: "Websocket Noti: restartIce for transportId :".concat(
                                                      Pe3
                                                    ),
                                                    attributes: {
                                                      iceParameters: JSON.stringify(
                                                        Oe3
                                                      )
                                                    }
                                                  }), g3.handleRemoteRestartIce(
                                                    {
                                                      transportId: Pe3,
                                                      iceParameters: Oe3,
                                                      internalSpan: xe3
                                                    }
                                                  ), e8.abrupt("break", 191);
                                                case 190:
                                                  Dr.error(
                                                    'unknown Websocket notification.method "%s"',
                                                    t5.method
                                                  );
                                                case 191:
                                                case "end":
                                                  return e8.stop();
                                              }
                                          }, e7);
                                        })
                                      );
                                      return function(t5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  );
                                case 38:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return sr2.apply(this, arguments);
                    })
                  },
                  {
                    key: "requestEntry",
                    value: (nr2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return n4 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "Requesting Entry",
                                    span: this._joinSpan
                                  }), e5.next = 3, this._socketRequest("requestEntry", {
                                    name: this._displayName
                                  });
                                case 3:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "Entry Requested Successfully"
                                  });
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return nr2.apply(this, arguments);
                    })
                  },
                  {
                    key: "respondEntry",
                    value: (rr2 = (0, a.A)(
                      u().mark(function e4(t4, r4) {
                        var n4, s2, i2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return i2 = null === (n4 = this._openTelemetry) || void 0 === n4 ? void 0 : n4.trace({
                                    spanName: "Responding Entry",
                                    attributes: {
                                      peerId: t4,
                                      decision: r4
                                    },
                                    span: this._joinSpan
                                  }), e5.next = 3, this._socketRequest("respondEntry", {
                                    id: t4,
                                    decision: r4
                                  });
                                case 3:
                                  null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    message: "Entry Responded Successfully",
                                    span: i2,
                                    status: 1
                                  });
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return rr2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startTranscription",
                    value: (tr2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, a2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("startTranscription()"), s2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "startTranscription() Start",
                                    attributes: {
                                      config: t4 ? JSON.stringify(t4) : "config Not Specify"
                                    }
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest(
                                    "startTranscription",
                                    { config: t4 }
                                  );
                                case 5:
                                  e5.next = 13;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Dr.error(
                                    "startTranscription() | failed:%o",
                                    e5.t0
                                  ), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "startTranscription() failed"
                                  }), null === (a2 = this._videosdkLogs) || void 0 === a2 || a2.pushLogs({
                                    logText: "Error startTranscription() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4031,
                                    message: e5.t0.message
                                  });
                                case 13:
                                  null === (n4 = this._openTelemetry) || void 0 === n4 || n4.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "startTranscription() End"
                                  });
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return tr2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopTranscription",
                    value: (er2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("stopTranscription()"), n4 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopTranscription() Start"
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest(
                                    "stopTranscription",
                                    {}
                                  );
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "stopTranscription() failed"
                                  }), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "Error stopTranscription() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4032,
                                    message: e5.t0.message
                                  });
                                case 12:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "stopTranscription() End"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return er2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pauseAllConsumers",
                    value: (Zt2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, a2, o2, c2, d2, l3, p3;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return s2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "pauseAllConsumers() Start",
                                    attributes: {
                                      kind: t4 || "Kind not specified"
                                    }
                                  }), e5.prev = 1, e5.next = 4, this._socketRequest("pauseAllConsumers", {
                                    kind: void 0 === t4 ? "all" : t4
                                  });
                                case 4:
                                  if (a2 = e5.sent, o2 = false, !((null == a2 || null === (i2 = a2.consumersWithIssues) || void 0 === i2 ? void 0 : i2.length) > 0)) {
                                    e5.next = 13;
                                    break;
                                  }
                                  return e5.next = 9, this._socketRequest("pauseAllConsumers", {
                                    kind: void 0 === t4 ? "all" : t4
                                  });
                                case 9:
                                  0 === (null == (d2 = e5.sent) || null === (c2 = d2.consumersWithIssues) || void 0 === c2 ? void 0 : c2.length) && (o2 = true), e5.next = 14;
                                  break;
                                case 13:
                                  o2 = true;
                                case 14:
                                  o2 && this._eventEmitter.emit(
                                    "ALL_CONSUMERS_PAUSED",
                                    { kind: t4 }
                                  ), e5.next = 22;
                                  break;
                                case 17:
                                  e5.prev = 17, e5.t0 = e5.catch(1), Dr.error(
                                    "pauseAllConsumers() | failed:%o",
                                    e5.t0
                                  ), null === (l3 = this._openTelemetry) || void 0 === l3 || l3.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "pauseAllConsumers() failed"
                                  }), null === (p3 = this._videosdkLogs) || void 0 === p3 || p3.pushLogs({
                                    logText: "Error pauseAllConsumers() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 22:
                                  null === (n4 = this._openTelemetry) || void 0 === n4 || n4.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "pauseAllConsumers() End"
                                  });
                                case 23:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 17]]
                        );
                      })
                    ), function(e4) {
                      return Zt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "resumeAllConsumers",
                    value: (Xt2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, a2, o2, c2, d2, l3, p3;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return s2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "resumeAllConsumers() Start",
                                    attributes: {
                                      kind: t4 || "Kind not specified"
                                    }
                                  }), e5.prev = 1, e5.next = 4, this._socketRequest(
                                    "resumeAllConsumers",
                                    { kind: void 0 === t4 ? "all" : t4 }
                                  );
                                case 4:
                                  if (a2 = e5.sent, o2 = false, !((null == a2 || null === (i2 = a2.consumersWithIssues) || void 0 === i2 ? void 0 : i2.length) > 0)) {
                                    e5.next = 13;
                                    break;
                                  }
                                  return e5.next = 9, this._socketRequest(
                                    "resumeAllConsumers",
                                    { kind: void 0 === t4 ? "all" : t4 }
                                  );
                                case 9:
                                  0 === (null == (d2 = e5.sent) || null === (c2 = d2.consumersWithIssues) || void 0 === c2 ? void 0 : c2.length) && (o2 = true), e5.next = 14;
                                  break;
                                case 13:
                                  o2 = true;
                                case 14:
                                  o2 && this._eventEmitter.emit(
                                    "ALL_CONSUMERS_RESUMED",
                                    { kind: t4 }
                                  ), e5.next = 22;
                                  break;
                                case 17:
                                  e5.prev = 17, e5.t0 = e5.catch(1), Dr.error(
                                    "resumeAllConsumers() | failed:%o",
                                    e5.t0
                                  ), null === (l3 = this._openTelemetry) || void 0 === l3 || l3.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "resumeAllConsumers() failed"
                                  }), null === (p3 = this._videosdkLogs) || void 0 === p3 || p3.pushLogs({
                                    logText: "Error resumeAllConsumers() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 22:
                                  null === (n4 = this._openTelemetry) || void 0 === n4 || n4.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "resumeAllConsumers() End"
                                  });
                                case 23:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 17]]
                        );
                      })
                    ), function(e4) {
                      return Xt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startRecording",
                    value: (Yt2 = (0, a.A)(
                      u().mark(function e4(t4, r4, n4, s2) {
                        var i2, a2, o2, c2, d2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("startRecording()"), o2 = null === (i2 = this._openTelemetry) || void 0 === i2 ? void 0 : i2.trace({
                                    spanName: "startRecording() Start",
                                    attributes: {
                                      webhookUrl: t4 || "webhookUrl Not Specify",
                                      awsDirPath: r4 || "awsDirPath Not Specify",
                                      config: n4 ? JSON.stringify(n4) : "config Not Specify",
                                      transcription: s2 ? JSON.stringify(s2) : "transcription Not Specify"
                                    }
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest("startRecording", {
                                    webhookUrl: t4,
                                    awsDirPath: r4,
                                    config: n4,
                                    transcription: s2
                                  });
                                case 5:
                                  e5.next = 13;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Dr.error(
                                    "startRecording() | failed:%o",
                                    e5.t0
                                  ), null === (c2 = this._openTelemetry) || void 0 === c2 || c2.completeSpan({
                                    span: o2,
                                    status: 2,
                                    message: "startRecording() failed"
                                  }), null === (d2 = this._videosdkLogs) || void 0 === d2 || d2.pushLogs({
                                    logText: "Error startRecording() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4011,
                                    message: e5.t0.message
                                  });
                                case 13:
                                  null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: o2,
                                    status: 1,
                                    message: "startRecording() End"
                                  });
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4, t4, r4, n4) {
                      return Yt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopRecording",
                    value: ($t2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return Dr.debug("stopRecording()"), n4 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopRecording() Start"
                                  }), e5.prev = 4, e5.next = 7, this._socketRequest("stopRecording", {});
                                case 7:
                                  e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "stopRecording() failed"
                                  }), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "Error stopRecording() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4012,
                                    message: e5.t0.message
                                  });
                                case 14:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "stopRecording() End"
                                  });
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function() {
                      return $t2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startLivestream",
                    value: (Kt2 = (0, a.A)(
                      u().mark(function e4(t4, r4) {
                        var n4, s2, i2, a2, o2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("startLivestream()"), i2 = null === (n4 = this._openTelemetry) || void 0 === n4 ? void 0 : n4.trace({
                                    spanName: "startLivestream() Start",
                                    attributes: {
                                      outputs: t4 ? JSON.stringify(t4) : "outputs Not Specify",
                                      config: r4 ? JSON.stringify(r4) : "config Not Specify"
                                    }
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest("startLivestream", {
                                    outputs: t4,
                                    config: r4
                                  });
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "startLivestream() End"
                                  }), null === (o2 = this._videosdkLogs) || void 0 === o2 || o2.pushLogs({
                                    logText: "Error startLivestream() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4013,
                                    message: e5.t0.message
                                  });
                                case 12:
                                  null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "startLivestream() End"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4, t4) {
                      return Kt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopLivestream",
                    value: (zt2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("stopLivestream()"), n4 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopLivestream() Start"
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest("stopLivestream", {});
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Error stopLivestream() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Error stopLivestream() failed"
                                  }), this._emitError({
                                    code: 4014,
                                    message: e5.t0.message
                                  });
                                case 12:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "stopLivestream() End"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return zt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startHls",
                    value: (Ht2 = (0, a.A)(
                      u().mark(function e4(t4, r4) {
                        var n4, s2, i2, a2, o2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return t4 = t4 || {}, r4 = r4 || {}, Dr.debug("startHls()"), i2 = null === (n4 = this._openTelemetry) || void 0 === n4 ? void 0 : n4.trace({
                                    spanName: "startHls() Start",
                                    attributes: {
                                      config: t4 ? JSON.stringify(t4) : "config Not Specify",
                                      transcription: r4 ? JSON.stringify(r4) : "transcription Not Specify"
                                    }
                                  }), e5.prev = 4, e5.next = 7, this._socketRequest("startHls", {
                                    config: t4,
                                    transcription: r4
                                  });
                                case 7:
                                  e5.next = 15;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), null === (a2 = this._videosdkLogs) || void 0 === a2 || a2.pushLogs({
                                    logText: "Error startHls() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: i2,
                                    status: 2,
                                    message: "Error startHls() failed"
                                  }), this._emitError({
                                    code: 4016,
                                    message: e5.t0.message
                                  }), Dr.error("startHls() | failed:%o", e5.t0);
                                case 15:
                                  null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "startHlsSpan() End"
                                  });
                                case 16:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function(e4, t4) {
                      return Ht2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopHls",
                    value: (Vt2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("stopHls()"), n4 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopHls() Start"
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest("stopHls", {});
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Error stopHls() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Error stopHls() failed"
                                  }), this._emitError({
                                    code: 4017,
                                    message: e5.t0.message
                                  });
                                case 12:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "stopHls() End"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return Vt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startWhiteboard",
                    value: (qt2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("startWhiteboard()"), n4 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "startWhiteboard() Start"
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest("startWhiteboard", {
                                    version: "v2"
                                  });
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Dr.error(
                                    "startWhiteboard() | failed:%o",
                                    e5.t0
                                  ), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Error startWhiteboard() failed"
                                  }), this._emitError({
                                    code: 3021,
                                    message: e5.t0.message
                                  });
                                case 12:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "startWhiteboard() End"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return qt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopWhiteboard",
                    value: (Wt2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("stopWhiteboard()"), n4 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopWhiteboard() Start"
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest("stopWhiteboard", {});
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Dr.error(
                                    "stopWhiteboard() | failed:%o",
                                    e5.t0
                                  ), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Error stopWhiteboard() failed"
                                  }), this._emitError({
                                    code: 3022,
                                    message: e5.t0.message
                                  });
                                case 12:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "stopWhiteboard() End"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return Wt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "joinCharacter",
                    value: (Ut2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, a2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("joinCharacter()"), s2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "joinCharacter() Start",
                                    attributes: {
                                      config: t4 ? JSON.stringify(t4) : "config Not Specify"
                                    }
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest("joinCharacter", {
                                    config: t4
                                  });
                                case 5:
                                  return e5.abrupt("return", e5.sent);
                                case 8:
                                  e5.prev = 8, e5.t0 = e5.catch(2), Dr.error(
                                    "joinCharacter() | failed:%o",
                                    e5.t0
                                  ), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "joinCharacter() failed"
                                  }), null === (a2 = this._videosdkLogs) || void 0 === a2 || a2.pushLogs({
                                    logText: "Error joinCharacter() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4033,
                                    message: e5.t0.message
                                  });
                                case 14:
                                  return null === (n4 = this._openTelemetry) || void 0 === n4 || n4.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "joinCharacter() End"
                                  }), e5.abrupt("return", false);
                                case 16:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 8]]
                        );
                      })
                    ), function(e4) {
                      return Ut2.apply(this, arguments);
                    })
                  },
                  {
                    key: "switchTo",
                    value: (Xe2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, a2, o2, c2, d2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return n4 = t4.meetingId, s2 = t4.participantId, i2 = t4.token, a2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "switchTo() Start",
                                    attributes: {
                                      "peer.id": s2,
                                      meetingId: n4
                                    }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request("switchToMeeting", {
                                    meetingId: n4,
                                    participantId: s2,
                                    secret: i2 || this._secret
                                  });
                                case 5:
                                  null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: a2,
                                    status: 1,
                                    message: "switchTo() Success"
                                  }), e5.next = 12;
                                  break;
                                case 8:
                                  e5.prev = 8, e5.t0 = e5.catch(2), null === (c2 = this._openTelemetry) || void 0 === c2 || c2.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "switchTo() failed"
                                  }), null === (d2 = this._videosdkLogs) || void 0 === d2 || d2.pushLogs({
                                    logText: "Error switchTo() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 8]]
                        );
                      })
                    ), function(e4) {
                      return Xe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "removeCharacter",
                    value: (Ye2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, a2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("removeCharacter()"), s2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "removeCharacter() Start"
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest("leaveCharacter", {
                                    config: t4
                                  });
                                case 5:
                                  e5.next = 14;
                                  break;
                                case 7:
                                  return e5.prev = 7, e5.t0 = e5.catch(2), Dr.error(
                                    "removeCharacter() | failed:%o",
                                    e5.t0
                                  ), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "removeCharacter() failed"
                                  }), null === (a2 = this._videosdkLogs) || void 0 === a2 || a2.pushLogs({
                                    logText: "Error removeCharacter() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4034,
                                    message: e5.t0.message
                                  }), e5.abrupt("return", false);
                                case 14:
                                  return null === (n4 = this._openTelemetry) || void 0 === n4 || n4.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "removeCharacter() End"
                                  }), e5.abrupt("return", true);
                                case 16:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Ye2.apply(this, arguments);
                    })
                  },
                  {
                    key: "sendCharacterMessage",
                    value: ($e2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.interactionId, n4 = t4.text, Dr.debug("sendCharacterMessage()"), e5.prev = 2, e5.next = 5, this._socketRequest(
                                    "sendCharacterMessage",
                                    { interactionId: r4, text: n4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Dr.error(
                                    "sendCharacterMessage() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 4035,
                                    message: e5.t0.message
                                  });
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return $e2.apply(this, arguments);
                    })
                  },
                  {
                    key: "interruptCharacter",
                    value: (Ke2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.interactionId, Dr.debug("interruptCharacter()"), e5.prev = 2, e5.next = 5, this._socketRequest(
                                    "interruptCharacter",
                                    { interactionId: r4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Dr.error(
                                    "interruptCharacter() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 4036,
                                    message: e5.t0.message
                                  });
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Ke2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pinStateChange",
                    value: (Ge2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return n4 = t4.peerId, s2 = t4.state, null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Pin state Change for ".concat(n4),
                                    attributes: {
                                      state: s2 ? JSON.stringify(s2) : null
                                    },
                                    status: 1
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest("pinStateChanged", {
                                    peerId: n4,
                                    state: s2
                                  });
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "Error pinStateChange() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error("pinStateChange() | failed");
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Ge2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startVideo",
                    value: (ze2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return n4 = t4.link, Dr.debug("startVideo()"), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "startVideo() Calling",
                                    logType: "INFO"
                                  }), e5.prev = 3, e5.next = 6, this._socketRequest("startVideo", {
                                    link: n4
                                  });
                                case 6:
                                  e5.next = 13;
                                  break;
                                case 8:
                                  e5.prev = 8, e5.t0 = e5.catch(3), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Error startVideo() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "startVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3023,
                                    message: e5.t0.message
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 8]]
                        );
                      })
                    ), function(e4) {
                      return ze2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopVideo",
                    value: (He2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("stopVideo()"), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "stopVideo() Calling",
                                    logType: "INFO"
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest("stopVideo", {});
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error stopVideo() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error("stopVideo() | failed:%o", e5.t0), this._emitError({
                                    code: 3024,
                                    message: e5.t0.message
                                  });
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return He2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pauseVideo",
                    value: (Ve2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("pauseVideo()"), e5.prev = 1, e5.next = 4, this._socketRequest("pauseVideo", {
                                    currentTime: t4
                                  });
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Dr.error(
                                    "pauseVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3025,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function(e4) {
                      return Ve2.apply(this, arguments);
                    })
                  },
                  {
                    key: "resumeVideo",
                    value: (We2 = (0, a.A)(
                      u().mark(function e4() {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("resumeVideo()"), e5.prev = 1, e5.next = 4, this._socketRequest("resumeVideo", {});
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Dr.error(
                                    "resumeVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3026,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function() {
                      return We2.apply(this, arguments);
                    })
                  },
                  {
                    key: "seekVideo",
                    value: (Ue2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("seekVideo()"), e5.prev = 1, e5.next = 4, this._socketRequest("seekVideo", {
                                    currentTime: t4
                                  });
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Dr.error("seekVideo() | failed:%o", e5.t0), this._emitError({
                                    code: 3031,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function(e4) {
                      return Ue2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enablePeerMic",
                    value: (Fe2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Enabling peer ".concat(
                                      t4,
                                      " Mic"
                                    ),
                                    status: 1
                                  }), Dr.debug("enablePeerMic()"), e5.prev = 2, e5.next = 5, this._socketRequest("enablePeerMic", {
                                    peerId: t4
                                  });
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error enablePeerMic() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "enablePeerMic() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Fe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableAdaptiveSubscription",
                    value: (Be2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.prev = 0, e5.next = 3, this._socketRequest(
                                    "enableAdaptiveSubscription"
                                  );
                                case 3:
                                  e5.next = 8;
                                  break;
                                case 5:
                                  e5.prev = 5, e5.t0 = e5.catch(0), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "Error enableAdaptiveSubscription() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 8:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[0, 5]]
                        );
                      })
                    ), function() {
                      return Be2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableAdaptiveSubscription",
                    value: (je2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.prev = 0, e5.next = 3, this._socketRequest(
                                    "disableAdaptiveSubscription"
                                  );
                                case 3:
                                  e5.next = 8;
                                  break;
                                case 5:
                                  e5.prev = 5, e5.t0 = e5.catch(0), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "Error disableAdaptiveSubscription() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 8:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[0, 5]]
                        );
                      })
                    ), function() {
                      return je2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disablePeerMic",
                    value: (Ne2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Disabling peer ".concat(
                                      t4,
                                      " Mic"
                                    ),
                                    status: 1
                                  }), Dr.debug("disablePeerMic()"), e5.prev = 2, e5.next = 5, this._socketRequest("disablePeerMic", {
                                    peerId: t4
                                  });
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error disablePeerMic() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "disablePeerMic() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Ne2.apply(this, arguments);
                    })
                  },
                  {
                    key: "consumeWebcamStreams",
                    value: (Le2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return Dr.debug("consumeWebcamStreams()"), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "consumeWebcamStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.prev = 4, e5.next = 7, this._socketRequest(
                                    "consumeVideoStreams",
                                    { peerId: t4 }
                                  );
                                case 7:
                                  e5.next = 13;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error consumeWebcamStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "consumeWebcamStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function(e4) {
                      return Le2.apply(this, arguments);
                    })
                  },
                  {
                    key: "consumeMicStreams",
                    value: (Ie2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("consumeMicStreams()"), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "consumeMicStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest(
                                    "consumeAudioStreams",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error consumeMicStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "consumeMicStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Ie2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopConsumingMicStreams",
                    value: (De2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return Dr.debug("stopConsumingAudioStreams()"), e5.prev = 3, e5.next = 6, this._socketRequest(
                                    "stopConsumingAudioStreams",
                                    { peerId: t4 }
                                  );
                                case 6:
                                  null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "stopConsumingAudioStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.next = 13;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error stopConsumingMicStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "stopConsumingMicStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function(e4) {
                      return De2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopConsumingWebcamStreams",
                    value: (xe2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("stopConsumingWebcamStreams()"), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "stopConsumingWebcamStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.prev = 2, e5.next = 5, this._socketRequest(
                                    "stopConsumingVideoStreams",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error stopConsumingWebcamStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "stopConsumingWebcamStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return xe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeMode",
                    value: (Oe2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3, _3, y3, b3, w3 = this;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (n4 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "changeMode() Calling with mode: ".concat(
                                      t4
                                    )
                                  }), s2 = this._mode, e5.prev = 2, s2 !== t4) {
                                    e5.next = 7;
                                    break;
                                  }
                                  throw null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "changeMode() Ending"
                                  }), null === (o2 = this._videosdkLogs) || void 0 === o2 || o2.pushLogs({
                                    logText: "You are already in ".concat(
                                      t4,
                                      " mode"
                                    ),
                                    logType: "INFO"
                                  }), new Error(
                                    "You are already in ".concat(t4, " mode")
                                  );
                                case 7:
                                  if (c2 = function() {
                                    var e6 = (0, a.A)(
                                      u().mark(function e7(t5, r5) {
                                        return u().wrap(function(e8) {
                                          for (; ; )
                                            switch (e8.prev = e8.next) {
                                              case 0:
                                                return e8.next = 2, w3._socketRequest(
                                                  "createWebRtcTransport",
                                                  {
                                                    preferredProtocol: w3._preferredProtocol,
                                                    producing: t5,
                                                    consuming: r5,
                                                    sctpCapabilities: w3._useDataChannel ? w3._mediasoupDevice.sctpCapabilities : void 0
                                                  }
                                                );
                                              case 2:
                                                return e8.abrupt(
                                                  "return",
                                                  e8.sent
                                                );
                                              case 3:
                                              case "end":
                                                return e8.stop();
                                            }
                                        }, e7);
                                      })
                                    );
                                    return function(t5, r5) {
                                      return e6.apply(this, arguments);
                                    };
                                  }(), !(0, Bt.kR)(t4)) {
                                    e5.next = 36;
                                    break;
                                  }
                                  return this._consume = true, this._produce = true, this._mode = t4, this._mediasoupDevice = new Me.Device({
                                    handlerName: this._handlerName
                                  }), e5.next = 15, this._socketRequest(
                                    "getRouterRtpCapabilities"
                                  );
                                case 15:
                                  return l3 = e5.sent, "react-native" !== this._deviceInfo.sdkType && navigator.userAgent.includes(
                                    "Firefox"
                                  ) && (l3.headerExtensions = null === (p3 = l3.headerExtensions) || void 0 === p3 ? void 0 : p3.filter(function(e6) {
                                    return "urn:3gpp:video-orientation" != e6.uri;
                                  })), e5.next = 19, this._mediasoupDevice.load({
                                    routerRtpCapabilities: l3
                                  });
                                case 19:
                                  if (!this._produce) {
                                    e5.next = 24;
                                    break;
                                  }
                                  return e5.next = 22, c2(true, false);
                                case 22:
                                  h3 = e5.sent, this.createProducerTransport(h3, n4);
                                case 24:
                                  if (s2 === Bt.nI.RECV_ONLY || !this._consume) {
                                    e5.next = 29;
                                    break;
                                  }
                                  return e5.next = 27, c2(false, true);
                                case 27:
                                  m3 = e5.sent, this.createConsumerTransport(m3, n4);
                                case 29:
                                  return null === (d2 = this._openTelemetry) || void 0 === d2 || d2.traceAutoComplete({
                                    spanName: "Sending changeMode request to server",
                                    span: n4,
                                    status: 1
                                  }), e5.next = 32, this._socketRequest("changeMode", {
                                    mode: t4
                                  });
                                case 32:
                                  this._produce && (kr.dispatch(
                                    rt({
                                      canSendMic: this._mediasoupDevice.canProduce(
                                        "audio"
                                      ),
                                      canSendWebcam: this._mediasoupDevice.canProduce(
                                        "video"
                                      )
                                    })
                                  ), this._micEnabled && this.enableMic(
                                    this.customMicrophoneAudioTrack
                                  ), this._webcamEnabled && this.enableWebcam(
                                    this.customCameraVideoTrack,
                                    n4
                                  )), window.SHOW_INFO && (f3 = kr.getState(), g3 = f3.me, kr.dispatch(tt(g3.id))), e5.next = 62;
                                  break;
                                case 36:
                                  if (!(0, Bt.kR)(s2) || t4 !== Bt.nI.RECV_ONLY) {
                                    e5.next = 44;
                                    break;
                                  }
                                  return this._produce = false, this._mode = t4, this._closeProducersAndTransport(), e5.next = 42, this._socketRequest("changeMode", {
                                    mode: t4
                                  });
                                case 42:
                                  e5.next = 62;
                                  break;
                                case 44:
                                  if (!(0, Bt.wZ)(s2) || t4 !== Bt.nI.RECV_ONLY) {
                                    e5.next = 54;
                                    break;
                                  }
                                  return this._consume = true, this._mode = t4, e5.next = 49, this._setupWebrtcTransport(n4);
                                case 49:
                                  return e5.next = 51, this._socketRequest("changeMode", {
                                    mode: t4
                                  });
                                case 51:
                                  window.SHOW_INFO && (v3 = kr.getState(), _3 = v3.me, kr.dispatch(tt(_3.id))), e5.next = 62;
                                  break;
                                case 54:
                                  if (!(0, Bt.wZ)(t4)) {
                                    e5.next = 62;
                                    break;
                                  }
                                  return e5.next = 57, this._socketRequest("changeMode", {
                                    mode: t4
                                  });
                                case 57:
                                  this._consume = false, this._produce = false, this._mode = t4, this._dataConsumers.clear(), this._closeTransports();
                                case 62:
                                  e5.next = 68;
                                  break;
                                case 64:
                                  e5.prev = 64, e5.t0 = e5.catch(2), null === (y3 = this._videosdkLogs) || void 0 === y3 || y3.pushLogs({
                                    logText: "Error changeMode(".concat(
                                      t4,
                                      ") | failed"
                                    ),
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (b3 = this._openTelemetry) || void 0 === b3 || b3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "changeMode(".concat(
                                      t4,
                                      ") | failed"
                                    )
                                  });
                                case 68:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 64]]
                        );
                      })
                    ), function(e4) {
                      return Oe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_closeProducersAndTransport",
                    value: function() {
                      var e4;
                      this._webcamProducer && (this._webcamProducer.close(), this._webcamProducer = null), this._micProducer && (this._micProducer.close(), this._micProducer = null), this._shareProducer && (this._shareProducer.close(), this._shareProducer = null), this._shareAudioProducer && (this._shareAudioProducer.close(), this._shareAudioProducer = null), null === (e4 = this._sendTransport) || void 0 === e4 || e4.close(), this._sendTransport = null;
                    }
                  },
                  {
                    key: "_closeTransports",
                    value: function() {
                      var e4, t4;
                      this._sendTransport && (null === (e4 = this._sendTransport) || void 0 === e4 || e4.close(), this._sendTransport = null);
                      this._recvTransport && (null === (t4 = this._recvTransport) || void 0 === t4 || t4.close(), this._recvTransport = null);
                    }
                  },
                  {
                    key: "_setupWebrtcTransport",
                    value: (Pe2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return this._mediasoupDevice = new Me.Device({
                                    handlerName: this._handlerName
                                  }), e5.next = 3, this._socketRequest(
                                    "getRouterRtpCapabilities"
                                  );
                                case 3:
                                  return r4 = e5.sent, "react-native" !== this._deviceInfo.sdkType && navigator.userAgent.includes(
                                    "Firefox"
                                  ) && (r4.headerExtensions = null === (n4 = r4.headerExtensions) || void 0 === n4 ? void 0 : n4.filter(function(e6) {
                                    return "urn:3gpp:video-orientation" != e6.uri;
                                  })), e5.next = 7, this._mediasoupDevice.load({
                                    routerRtpCapabilities: r4
                                  });
                                case 7:
                                  return e5.next = 9, this._socketRequest(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: false,
                                      consuming: true,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 9:
                                  s2 = e5.sent, this.createConsumerTransport(s2, t4);
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Pe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enablePeerWebcam",
                    value: (Te2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Enabling peer ".concat(
                                      t4,
                                      " Webcam"
                                    ),
                                    status: 1
                                  }), Dr.debug("enablePeerWebcam()"), e5.prev = 2, e5.next = 5, this._socketRequest("enablePeerWebcam", {
                                    peerId: t4
                                  });
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error enablePeerWebcam | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "enablePeerWebcam() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Te2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disablePeerWebcam",
                    value: (Ce2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Disabling peer ".concat(
                                      t4,
                                      " Webcam"
                                    ),
                                    status: 1
                                  }), Dr.debug("disablePeerWebcam()"), e5.prev = 2, e5.next = 5, this._socketRequest("disablePeerWebcam", {
                                    peerId: t4
                                  });
                                case 5:
                                  e5.next = 10;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error disablePeerWebcam | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Ce2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getMicStats",
                    value: function(e4) {
                      var t4 = this;
                      if (this._micProducer) {
                        var r4 = 0;
                        e4.onStatsCollected = function(e5) {
                          var n4;
                          (t4._stats.producerStats || (t4._stats.producerStats = {}), t4._stats.producerStats.audio || (t4._stats.producerStats.audio = []), t4._micProducer) && (t4._latestStats[null === (n4 = t4._micProducer) || void 0 === n4 ? void 0 : n4.id] = []);
                          e5.audio.forEach(function(e6) {
                            var r5;
                            t4._micProducer && t4._latestStats[null === (r5 = t4._micProducer) || void 0 === r5 ? void 0 : r5.id].push(e6);
                          }), r4 % 5 == 0 && null != t4._micProducer && t4._stats.producerStats.audio.push(
                            br(
                              { timestamp: /* @__PURE__ */ new Date() },
                              t4._latestStats[t4._micProducer.id] ? t4._latestStats[t4._micProducer.id][0] : {}
                            )
                          ), r4++;
                        };
                      }
                    }
                  },
                  {
                    key: "enableMic",
                    value: (Ee2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3, _3, y3, b3, w3, S3, R3, k3, E3, C3, T3, P3, O3, x3, D3, I3, A3, M3, L3, N3, j3, B3, F3, U3, W3, q3, V3, H3, z3, G3, K3, $3, J3, Q3, Y3, X3, Z3, ee3, te3, re3, ne3, se3, ie3, ae3, oe3, ce3, de3, le3, ue3, pe3, he3, me3, fe3, ge3, ve3, _e3, ye3 = this, be3 = arguments;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (a2 = be3.length > 0 && void 0 !== be3[0] ? be3[0] : void 0, o2 = be3.length > 1 && void 0 !== be3[1] ? be3[1] : void 0, c2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "enableMic() Calling ".concat(
                                      a2 ? "With Custom Audio Track" : "Without Custom Audio Track "
                                    ),
                                    attributes: {
                                      customAudioConfig: a2 ? JSON.stringify(a2) : "Not Specify Custom Track"
                                    },
                                    span: o2 || null
                                  }), Dr.debug("enableMic()"), this._micEnabled = true, !this._micProducer) {
                                    e5.next = 28;
                                    break;
                                  }
                                  if (p3 = null === (d2 = this._openTelemetry) || void 0 === d2 ? void 0 : d2.trace({
                                    spanName: "Mic Producer found",
                                    span: c2
                                  }), a2 && (null === (h3 = this._openTelemetry) || void 0 === h3 || h3.traceAutoComplete({
                                    spanName: "Stopping customAudioTrack",
                                    span: c2,
                                    status: 1
                                  }), a2.getTracks().forEach(function(e6) {
                                    e6.stop();
                                  })), null === (l3 = this._openTelemetry) || void 0 === l3 || l3.completeSpan({
                                    span: p3,
                                    status: 1,
                                    message: "Resuming Mic Producer"
                                  }), this._micProducer.resume(), m3 = this._micProducer, !this._sendTransport) {
                                    e5.next = 19;
                                    break;
                                  }
                                  return e5.next = 14, this._sendTransport.produce({
                                    track: this._micProducer.track,
                                    encodings: this._micProducer._appData.encodings,
                                    codecOptions: this._micProducer._appData.codecOptions,
                                    appData: {
                                      isEncrypted: this.isE2EEEnabled
                                    },
                                    onRtpSender: function(e6) {
                                      e6.senderStreams = e6.createEncodedStreams();
                                    }
                                  });
                                case 14:
                                  this._micProducer = e5.sent, this.e2eeManager && this.e2eeManager.emit(
                                    "NEW_PRODUCER",
                                    this._micProducer
                                  ), this._micProducer ? (g3 = ct({
                                    id: this._micProducer.id,
                                    paused: this._micProducer.paused,
                                    track: this._micProducer.track,
                                    rtpParameters: this._micProducer.rtpParameters,
                                    codec: this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    encodings: m3._appData.encodings,
                                    codecOptions: m3._appData.codecOptions,
                                    instance: this._micProducer,
                                    rtpSender: this._micProducer.rtpSender
                                  }), this._micProducer.track.getConstraints().deviceId && (this._mic.device = this._mics.get(
                                    this._micProducer.track.getConstraints().deviceId
                                  )), kr.dispatch(g3), this._eventEmitter.emit(
                                    g3.type,
                                    g3.payload
                                  ), null === (f3 = this._openTelemetry) || void 0 === f3 || f3.completeSpan({
                                    span: c2,
                                    status: 1,
                                    message: "Enable Mic Successful"
                                  })) : null === (v3 = this._openTelemetry) || void 0 === v3 || v3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableMic() :: micProducer null"
                                  }), e5.next = 22;
                                  break;
                                case 19:
                                  return null === (_3 = this._videosdkLogs) || void 0 === _3 || _3.pushLogs({
                                    logText: It.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED.message,
                                    attributes: {
                                      error: "Error in enableMic() :: Transport is not setup"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), this._emitError(
                                    It.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                  ), e5.abrupt("return");
                                case 22:
                                  return y3 = this._metrics.addNewProbe(
                                    this._micProducer,
                                    { name: "mic_producer" }
                                  ), this._micProducer.observer.on(
                                    "pause",
                                    function() {
                                      null == y3 || y3.stop(), ye3._latestStats[ye3._micProducer.id] = [], ye3._metrics.removeExistingProbe(y3);
                                    }
                                  ), this._micProducer.observer.on(
                                    "close",
                                    function() {
                                      null == y3 || y3.stop(), ye3._latestStats[ye3._micProducer.id] = [], ye3._metrics.removeExistingProbe(y3);
                                    }
                                  ), this.getMicStats(y3), y3.start(), e5.abrupt("return");
                                case 28:
                                  if (!this._mediasoupDevice) {
                                    e5.next = 37;
                                    break;
                                  }
                                  if (this._mediasoupDevice.canProduce("audio")) {
                                    e5.next = 35;
                                    break;
                                  }
                                  return S3 = "react-native" == this._deviceInfo.sdkType ? It.q.ERROR_RN_MIC_ACCESS_UNAVAILABLE.message : It.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE.message, null === (b3 = this._videosdkLogs) || void 0 === b3 || b3.pushLogs({
                                    logText: S3,
                                    attributes: {
                                      error: "Error in enableMic() :: Microphone access unavailable"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), Dr.error(
                                    "enableMic() | cannot produce audio"
                                  ), null === (w3 = this._openTelemetry) || void 0 === w3 || w3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableMic() :: ".concat(
                                      S3
                                    )
                                  }), e5.abrupt("return");
                                case 35:
                                  e5.next = 40;
                                  break;
                                case 37:
                                  return null === (R3 = this._videosdkLogs) || void 0 === R3 || R3.pushLogs({
                                    logText: "Oops! Something went wrong, and we're unable to enable the mic. Please try again.",
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic(): Something went wrong."
                                    },
                                    dashboardLog: true
                                  }), null === (k3 = this._openTelemetry) || void 0 === k3 || k3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableMic() :: mediasoupDevice is undefined"
                                  }), e5.abrupt("return");
                                case 40:
                                  if (e5.prev = 40, this._externalVideo) {
                                    e5.next = 107;
                                    break;
                                  }
                                  return Dr.debug(
                                    "enableMic() | calling getUserMedia()"
                                  ), e5.next = 45, this._updateMics(c2);
                                case 45:
                                  if (this._mic.device) {
                                    e5.next = 48;
                                    break;
                                  }
                                  throw new Error(
                                    "Whoops! No Microphone Found: We couldn't find your microphone. Is it plugged in and turned on? If so, try restarting your computer or checking your device settings. Also, ensure you're on a secure website (https://)."
                                  );
                                case 48:
                                  try {
                                    a2 && "ended" == (E3 = a2.getAudioTracks()[0]).readyState && (E3 = null, A3 = It.q.ERROR_CUSTOM_AUDIO_TRACK_ENDED, null === (I3 = this._videosdkLogs) || void 0 === I3 || I3.pushLogs({
                                      logText: A3.message,
                                      logType: "INFO",
                                      attributes: {
                                        error: "In enableMic() :: Invalid Custom Track Passed"
                                      },
                                      dashboardLog: true
                                    }), this._emitError(A3));
                                  } catch (e6) {
                                    L3 = It.q.ERROR_INVALID_CUSTOM_AUDIO_TRACK, null === (M3 = this._videosdkLogs) || void 0 === M3 || M3.pushLogs({
                                      logText: L3.message,
                                      logType: "INFO",
                                      attributes: {
                                        error: "In enableMic() :: Invalid Custom Track Passed"
                                      }
                                    }), this._emitError(L3), console.log(
                                      "Invalid Custom Audio Track Passed. Reverting to default Error: ".concat(
                                        e6
                                      )
                                    );
                                  }
                                  if (E3) {
                                    e5.next = 105;
                                    break;
                                  }
                                  return B3 = null === (N3 = this._openTelemetry) || void 0 === N3 ? void 0 : N3.trace({
                                    spanName: "Creating Track",
                                    span: c2
                                  }), e5.prev = 51, e5.next = 54, navigator.mediaDevices.getUserMedia({
                                    audio: {
                                      deviceId: {
                                        ideal: this._mic.device.deviceId
                                      },
                                      channelCount: 1,
                                      noiseSuppression: true,
                                      echoCancellation: true,
                                      googEchoCancellation: true,
                                      googEchoCancellation2: true,
                                      googAutoGainControl: true,
                                      googAutoGainControl2: true,
                                      googNoiseSuppression: true,
                                      googNoiseSuppression2: true,
                                      googHighpassFilter: true
                                    }
                                  });
                                case 54:
                                  F3 = e5.sent, e5.next = 103;
                                  break;
                                case 57:
                                  if (e5.prev = 57, e5.t0 = e5.catch(51), null === (U3 = this._openTelemetry) || void 0 === U3 || U3.completeSpan({
                                    message: "Error in enableMic() :: ".concat(
                                      e5.t0.message
                                    ),
                                    span: B3,
                                    status: 2
                                  }), "SecurityError" !== e5.t0.name) {
                                    e5.next = 68;
                                    break;
                                  }
                                  V3 = It.q.ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED, H3 = V3.message, this._emitError(V3), null === (W3 = this._videosdkLogs) || void 0 === W3 || W3.pushLogs({
                                    logText: H3,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: Microphone Permission Denied or Dismissed"
                                    },
                                    dashboardLog: true
                                  }), null === (q3 = this._openTelemetry) || void 0 === q3 || q3.completeSpan({
                                    message: "Error in enableMic() :: occurred in creating audio track, ".concat(
                                      H3
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.next = 102;
                                  break;
                                case 68:
                                  if ("DOMException" !== e5.t0.name) {
                                    e5.next = 76;
                                    break;
                                  }
                                  K3 = It.q.ERROR_RN_MIC_NOT_FOUND, $3 = K3.message, this._emitError(K3), null === (z3 = this._videosdkLogs) || void 0 === z3 || z3.pushLogs({
                                    logText: $3,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: No Microphone Device Found"
                                    },
                                    dashboardLog: true
                                  }), null === (G3 = this._openTelemetry) || void 0 === G3 || G3.completeSpan({
                                    message: "Error in enableMic() :: occurred in creating audio track, ".concat(
                                      $3
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.next = 102;
                                  break;
                                case 76:
                                  if (!(e5.t0 instanceof DOMException)) {
                                    e5.next = 99;
                                    break;
                                  }
                                  e5.t1 = e5.t0.name, e5.next = "NotAllowedError" === e5.t1 ? 80 : "NotReadableError" === e5.t1 ? 83 : "NotFoundError" === e5.t1 ? 86 : 93;
                                  break;
                                case 80:
                                  return J3 = this.handleNotAllowedError(
                                    e5.t0,
                                    this._openTelemetry,
                                    this._videosdkLogs,
                                    c2,
                                    "audio"
                                  ), this._emitError(J3), e5.abrupt("break", 97);
                                case 83:
                                  return Q3 = this.handleNotReadableError(
                                    e5.t0,
                                    this._openTelemetry,
                                    this._videosdkLogs,
                                    c2,
                                    "audio"
                                  ), this._emitError(Q3), e5.abrupt("break", 97);
                                case 86:
                                  return Y3 = It.q.ERROR_MICROPHONE_NOT_FOUND, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                    "Firefox"
                                  ) && (Y3 = It.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS), X3 = Y3.message, this._emitError(Y3), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: X3,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: No Microphone Device Found"
                                    },
                                    dashboardLog: true
                                  }), null === (n4 = this._openTelemetry) || void 0 === n4 || n4.completeSpan({
                                    message: "Error in enableMic() :: occurred in creating audio track, ".concat(
                                      X3
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.abrupt("break", 97);
                                case 93:
                                  return Z3 = "An error occurred in creating audio track, ".concat(
                                    e5.t0.message
                                  ), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: ".concat(
                                        Z3
                                      )
                                    },
                                    dashboardLog: true
                                  }), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    message: "Error in enableMic() :: ".concat(
                                      Z3
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.abrupt("break", 97);
                                case 97:
                                  e5.next = 102;
                                  break;
                                case 99:
                                  re3 = "An error occurred in creating audio track, ".concat(
                                    e5.t0.message
                                  ), null === (ee3 = this._videosdkLogs) || void 0 === ee3 || ee3.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: ".concat(
                                        re3
                                      )
                                    },
                                    dashboardLog: true
                                  }), null === (te3 = this._openTelemetry) || void 0 === te3 || te3.completeSpan({
                                    message: "Error in enableMic() :: ".concat(
                                      re3
                                    ),
                                    span: c2,
                                    status: 2
                                  });
                                case 102:
                                  return e5.abrupt("return");
                                case 103:
                                  E3 = F3.getAudioTracks()[0], null === (j3 = this._openTelemetry) || void 0 === j3 || j3.completeSpan({
                                    message: "Audio Track Generated",
                                    span: B3,
                                    status: 1
                                  });
                                case 105:
                                  e5.next = 111;
                                  break;
                                case 107:
                                  return e5.next = 109, this._getExternalVideoStream();
                                case 109:
                                  ne3 = e5.sent, E3 = ne3.getAudioTracks()[0].clone();
                                case 111:
                                  if (C3 = null === (T3 = this._openTelemetry) || void 0 === T3 ? void 0 : T3.trace({
                                    spanName: "Generating Producer Configuration",
                                    span: c2
                                  }), se3 = { opusStereo: 1, opusDtx: 1 }, a2 && (ie3 = a2.encoderConfig ? Dt.$.audioProfiles[a2.encoderConfig] : Dt.$.audioProfiles.speech_standard, se3 = {
                                    opusStereo: ie3.stereo ? 1 : 0,
                                    opusFec: ie3.fec ? 1 : 0,
                                    opusDtx: ie3.dtx ? 1 : 0,
                                    opusMaxPlaybackRate: ie3.maxPlaybackRate,
                                    opusPtime: ie3.packetTime
                                  }), oe3 = {
                                    encodings: ae3 = [
                                      { networkPriority: "high" }
                                    ],
                                    codecOptions: se3
                                  }, null === (P3 = this._openTelemetry) || void 0 === P3 || P3.traceAutoComplete({
                                    spanName: "Generated AppData",
                                    span: C3,
                                    attributes: {
                                      appData: JSON.stringify(oe3)
                                    },
                                    status: 1
                                  }), null === (O3 = this._openTelemetry) || void 0 === O3 || O3.completeSpan({
                                    span: C3,
                                    status: 1,
                                    message: "Producer Configuration Generated"
                                  }), C3 = null === (x3 = this._openTelemetry) || void 0 === x3 ? void 0 : x3.trace({
                                    spanName: "Creating Mic Producer",
                                    span: c2
                                  }), null === (D3 = E3) || void 0 === D3 || D3.addEventListener(
                                    "ended",
                                    function() {
                                      console.log("Track Ended Error");
                                      try {
                                        var e6, t5, r5 = "react-native" == ye3._deviceInfo.sdkType ? It.q.ERROR_RN_MIC_TRACK_ENDED : It.q.ERROR_MICROPHONE_TRACK_ENDED;
                                        null === (e6 = ye3._videosdkLogs) || void 0 === e6 || e6.pushLogs({
                                          logText: r5.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error: "Error Track Ended :: ".concat(
                                              r5.message
                                            )
                                          },
                                          dashboardLog: true
                                        }), null === (t5 = ye3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                          spanName: "this._micProducer trackended or Microphone disconnected!",
                                          span: c2,
                                          message: r5.message,
                                          status: 2
                                        }), kr.dispatch(
                                          Pt({
                                            type: "error",
                                            text: "Microphone disconnected!"
                                          })
                                        ), ye3.disableMic(true, c2).catch(function() {
                                        });
                                      } catch (e7) {
                                        console.error(e7);
                                      }
                                    }
                                  ), !this._sendTransport) {
                                    e5.next = 128;
                                    break;
                                  }
                                  return e5.next = 124, this._sendTransport.produce({
                                    track: E3,
                                    encodings: ae3,
                                    codecOptions: se3,
                                    appData: br(
                                      br({}, oe3),
                                      {},
                                      { isEncrypted: this.isE2EEEnabled }
                                    ),
                                    onRtpSender: function(e6) {
                                      e6.senderStreams = e6.createEncodedStreams();
                                    }
                                  });
                                case 124:
                                  this._micProducer = e5.sent, this.e2eeManager && this.e2eeManager.emit(
                                    "NEW_PRODUCER",
                                    this._micProducer
                                  ), e5.next = 131;
                                  break;
                                case 128:
                                  return null === (ce3 = this._videosdkLogs) || void 0 === ce3 || ce3.pushLogs({
                                    logText: It.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED.message,
                                    attributes: {
                                      error: "Error in enableMic() :: Transport is not setup"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), this._emitError(
                                    It.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                  ), e5.abrupt("return");
                                case 131:
                                  this._micProducer ? (E3.getConstraints().deviceId && (this._mic.device = this._mics.get(
                                    E3.getConstraints().deviceId
                                  )), ue3 = ct({
                                    id: this._micProducer.id,
                                    paused: this._micProducer.paused,
                                    track: this._micProducer.track,
                                    rtpParameters: this._micProducer.rtpParameters,
                                    codec: this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    encodings: ae3,
                                    codecOptions: se3,
                                    instance: this._micProducer,
                                    rtpSender: this._micProducer.rtpSender
                                  }), kr.dispatch(ue3), this._eventEmitter.emit(
                                    ue3.type,
                                    ue3.payload
                                  ), (pe3 = this._metrics.addNewProbe(
                                    this._micProducer,
                                    { name: "mic_producer" }
                                  )).start(), this.getMicStats(pe3), this._micProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = dt(ye3._micProducer.id);
                                      kr.dispatch(t5), ye3._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = ye3._micProducer) || void 0 === e6 || e6.close(), ye3._micProducer = null;
                                    }
                                  ), this._micProducer.observer.on(
                                    "pause",
                                    function() {
                                      null == pe3 || pe3.stop(), ye3._latestStats[ye3._micProducer.id] = [], ye3._metrics.removeExistingProbe(
                                        pe3
                                      );
                                    }
                                  ), this._micProducer.observer.on(
                                    "close",
                                    function() {
                                      null == pe3 || pe3.stop(), ye3._latestStats[ye3._micProducer.id] = [], ye3._metrics.removeExistingProbe(
                                        pe3
                                      );
                                    }
                                  ), this._micProducer.on(
                                    "trackended",
                                    function() {
                                      var e6, t5, r5 = "react-native" == ye3._deviceInfo.sdkType ? It.q.ERROR_RN_MIC_TRACK_ENDED : It.q.ERROR_MICROPHONE_TRACK_ENDED;
                                      null === (e6 = ye3._videosdkLogs) || void 0 === e6 || e6.pushLogs({
                                        logText: r5.message,
                                        logType: "ERROR",
                                        attributes: {
                                          error: "Error in enableMic() :: ".concat(
                                            r5.message
                                          )
                                        },
                                        dashboardLog: true
                                      }), null === (t5 = ye3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "this._micProducer trackended or Microphone disconnected!",
                                        span: c2,
                                        message: r5.message,
                                        status: 2
                                      }), kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Microphone disconnected!"
                                        })
                                      ), ye3.disableMic(true, c2).catch(function() {
                                      });
                                    }
                                  ), null === (de3 = this._openTelemetry) || void 0 === de3 || de3.completeSpan({
                                    span: C3,
                                    status: 1,
                                    message: "Mic Producer Created"
                                  }), null === (le3 = this._openTelemetry) || void 0 === le3 || le3.completeSpan({
                                    span: c2,
                                    status: 1,
                                    message: "Enable Mic Successful"
                                  })) : (null === (he3 = this._videosdkLogs) || void 0 === he3 || he3.pushLogs({
                                    logText: "Oops! Something went wrong, and we're unable to enable the mic. Please try again.",
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic(): Something went wrong."
                                    },
                                    dashboardLog: true
                                  }), null === (me3 = this._openTelemetry) || void 0 === me3 || me3.completeSpan({
                                    span: C3,
                                    status: 2,
                                    message: "Error in enableMic() :: micProducer null"
                                  }), null === (fe3 = this._openTelemetry) || void 0 === fe3 || fe3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableMic() :: micProducer null"
                                  })), e5.next = 144;
                                  break;
                                case 134:
                                  return e5.prev = 134, e5.t2 = e5.catch(40), null === (ge3 = this._openTelemetry) || void 0 === ge3 || ge3.completeSpan({
                                    span: C3,
                                    status: 2,
                                    message: "Error in enableMic() :: occurred in creating mic producer, ".concat(
                                      e5.t2.message
                                    )
                                  }), null === (ve3 = this._openTelemetry) || void 0 === ve3 || ve3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableMic :: ".concat(
                                      e5.t2.message
                                    )
                                  }), null === (_e3 = this._videosdkLogs) || void 0 === _e3 || _e3.pushLogs({
                                    logText: e5.t2.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: ".concat(
                                        e5.t2.message
                                      )
                                    },
                                    dashboardLog: true
                                  }), Dr.error("enableMic() | failed:%o", e5.t2), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error enabling microphone: ".concat(
                                        e5.t2
                                      )
                                    })
                                  ), e5.next = 143, this._socketRequest("produceError", {
                                    mediaType: "audio",
                                    message: e5.t2.message
                                  });
                                case 143:
                                  E3 && E3.stop();
                                case 144:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [40, 134],
                            [51, 57]
                          ]
                        );
                      })
                    ), function() {
                      return Ee2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableMic",
                    value: (ke2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3, _3, y3, b3, w3, S3, R3, k3, E3, C3, T3 = arguments;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (n4 = T3.length > 0 && void 0 !== T3[0] && T3[0], s2 = T3.length > 1 && void 0 !== T3[1] ? T3[1] : void 0, Dr.debug("disableMic()"), i2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "disableMic() Calling",
                                    status: 1,
                                    span: s2 || null
                                  }), this._micProducer) {
                                    e5.next = 8;
                                    break;
                                  }
                                  return null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: i2,
                                    status: 2,
                                    message: "Error in disableMic() :: Mic Producer Not found"
                                  }), null === (o2 = this._videosdkLogs) || void 0 === o2 || o2.pushLogs({
                                    logText: "Attempted to call disableMic() multiple times",
                                    attributes: {
                                      error: "Error in disableMic() :: Microphone is already disabled"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), e5.abrupt("return");
                                case 8:
                                  if (c2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "Closing Mic Producer",
                                    span: i2,
                                    status: 1
                                  }), this._micEnabled = false, !this._micProducer || n4) {
                                    e5.next = 32;
                                    break;
                                  }
                                  return h3 = null === (d2 = this._openTelemetry) || void 0 === d2 ? void 0 : d2.trace({
                                    spanName: "Pausing Mic Producer",
                                    span: c2,
                                    status: 1
                                  }), this._micProducer.pause(), m3 = dt(this._micProducer.id), null === (l3 = this._openTelemetry) || void 0 === l3 || l3.completeSpan({
                                    span: h3,
                                    status: 1,
                                    message: "Pause Mic Successfully"
                                  }), kr.dispatch(m3), this._eventEmitter.emit(
                                    m3.type,
                                    m3.payload
                                  ), e5.prev = 17, e5.next = 20, this._socketRequest("closeProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 20:
                                  null === (f3 = this._openTelemetry) || void 0 === f3 || f3.completeSpan({
                                    span: c2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), e5.next = 30;
                                  break;
                                case 23:
                                  e5.prev = 23, e5.t0 = e5.catch(17), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error closing server-side mic Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), y3 = "Error in disableMic() :: Failed to close server-side microphone producer. closeProducer status: ".concat(
                                    n4
                                  ), null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in disableMic() :: ".concat(
                                      e5.t0.message
                                    )
                                  }), null === (v3 = this._openTelemetry) || void 0 === v3 || v3.completeSpan({
                                    span: i2,
                                    status: 2,
                                    message: y3
                                  }), null === (_3 = this._videosdkLogs) || void 0 === _3 || _3.pushLogs({
                                    logText: y3,
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message },
                                    dashboardLog: true
                                  });
                                case 30:
                                  return null === (p3 = this._openTelemetry) || void 0 === p3 || p3.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "Mic Disabled Successfully"
                                  }), e5.abrupt("return");
                                case 32:
                                  return this._micProducer.close(), b3 = dt(this._micProducer.id), kr.dispatch(b3), this._eventEmitter.emit(
                                    b3.type,
                                    b3.payload
                                  ), e5.prev = 36, e5.next = 39, this._socketRequest("closeProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 39:
                                  null === (w3 = this._openTelemetry) || void 0 === w3 || w3.completeSpan({
                                    span: c2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), null === (S3 = this._openTelemetry) || void 0 === S3 || S3.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "Mic Disabled Successfully"
                                  }), e5.next = 50;
                                  break;
                                case 43:
                                  e5.prev = 43, e5.t1 = e5.catch(36), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error closing server-side mic Producer: ".concat(
                                        e5.t1
                                      )
                                    })
                                  ), C3 = "Error in disableMic() :: Failed to close server-side microphone producer. closeProducer status: ".concat(
                                    n4
                                  ), null === (R3 = this._openTelemetry) || void 0 === R3 || R3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in disableMic() :: ".concat(
                                      e5.t1.message
                                    )
                                  }), null === (k3 = this._openTelemetry) || void 0 === k3 || k3.completeSpan({
                                    span: i2,
                                    status: 2,
                                    message: C3
                                  }), null === (E3 = this._videosdkLogs) || void 0 === E3 || E3.pushLogs({
                                    logText: C3,
                                    logType: "ERROR",
                                    attributes: { error: e5.t1.message },
                                    dashboardLog: true
                                  });
                                case 50:
                                  this._micProducer = null;
                                case 51:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [17, 23],
                            [36, 43]
                          ]
                        );
                      })
                    ), function() {
                      return ke2.apply(this, arguments);
                    })
                  },
                  {
                    key: "muteMic",
                    value: (Re2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("muteMic()"), this._micEnabled = false, this._micProducer.pause(), e5.prev = 3, e5.next = 6, this._socketRequest("pauseProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 6:
                                  kr.dispatch({
                                    type: "SET_PRODUCER_PAUSED",
                                    payload: {
                                      producerId: this._micProducer.id
                                    }
                                  }), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), Dr.error("muteMic() | failed: %o", e5.t0), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "Error pausing server-side mic Producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error pausing server-side mic Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function() {
                      return Re2.apply(this, arguments);
                    })
                  },
                  {
                    key: "unmuteMic",
                    value: (Se2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("unmuteMic()"), this._micEnabled = true, this._micProducer.resume(), e5.prev = 3, e5.next = 6, this._socketRequest("resumeProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 6:
                                  kr.dispatch({
                                    type: "SET_PRODUCER_RESUMED",
                                    payload: {
                                      producerId: this._micProducer.id
                                    }
                                  }), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), Dr.error(
                                    "unmuteMic() | failed: %o",
                                    e5.t0
                                  ), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "Error resuming server-side mic Producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error resuming server-side mic Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function() {
                      return Se2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableWebcam",
                    value: (we2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3, _3, y3, b3, w3, S3, R3, k3, E3, C3, T3, P3, O3, x3, D3, I3, A3, M3, L3, N3, j3, B3, F3, U3, W3, q3, V3, H3, z3, G3, K3, $3, J3, Q3, Y3, X3, Z3, ee3, te3, re3, ne3, se3, ie3, ae3, oe3, ce3, de3, le3, ue3, pe3, he3, me3, fe3, ge3, ve3, _e3 = this, ye3 = arguments;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (a2 = ye3.length > 0 && void 0 !== ye3[0] ? ye3[0] : void 0, o2 = ye3.length > 1 && void 0 !== ye3[1] ? ye3[1] : void 0, c2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "enableWebcam() Calling ".concat(
                                      a2 ? "With Custom Video Track" : "Without Custom Video Track "
                                    ),
                                    attributes: {
                                      customVideoConfig: a2 ? JSON.stringify(a2) : "Not Specify Custom Track"
                                    },
                                    span: o2 || null
                                  }), Dr.debug("enableWebcam()"), this._webcamEnabled = true, !this._webcamProducer) {
                                    e5.next = 9;
                                    break;
                                  }
                                  return null === (d2 = this._openTelemetry) || void 0 === d2 || d2.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: Webcam Producer found"
                                  }), null === (l3 = this._videosdkLogs) || void 0 === l3 || l3.pushLogs({
                                    logText: "Attempted to call enableWebcam() multiple times",
                                    attributes: {
                                      error: "Error in enableWebcam() :: Webcam is already enabled"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), e5.abrupt("return");
                                case 9:
                                  if (!this._mediasoupDevice) {
                                    e5.next = 18;
                                    break;
                                  }
                                  if (this._mediasoupDevice.canProduce("video")) {
                                    e5.next = 16;
                                    break;
                                  }
                                  return m3 = "react-native" == this._deviceInfo.sdkType ? It.q.ERROR_RN_CAMERA_ACCESS_UNAVAILABLE.message : It.q.ERROR_CAMERA_ACCESS_UNAVAILABLE.message, null === (p3 = this._openTelemetry) || void 0 === p3 || p3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: ".concat(
                                      m3
                                    )
                                  }), null === (h3 = this._videosdkLogs) || void 0 === h3 || h3.pushLogs({
                                    logText: m3,
                                    attributes: {
                                      error: "Error in enableWebcam() :: Camera access unavailable"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), Dr.error(
                                    "enableWebcam() | cannot produce video"
                                  ), e5.abrupt("return");
                                case 16:
                                  e5.next = 21;
                                  break;
                                case 18:
                                  return null === (f3 = this._videosdkLogs) || void 0 === f3 || f3.pushLogs({
                                    logText: "Oops! Something went wrong, and we're unable to enable the webcam. Please try again.",
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam(): Something went wrong."
                                    }
                                  }), null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: mediasoupDevice is undefined"
                                  }), e5.abrupt("return");
                                case 21:
                                  if (kr.dispatch(ht(true)), y3 = this._webcam.resolution, e5.prev = 23, this._externalVideo) {
                                    e5.next = 100;
                                    break;
                                  }
                                  return e5.next = 27, this._updateWebcams(c2);
                                case 27:
                                  if (_3 = this._webcam.device) {
                                    e5.next = 31;
                                    break;
                                  }
                                  throw new Error(
                                    "Whoops! No Webcam Found: We couldn't find your camera. Is it plugged in and turned on? If so, try restarting your computer or checking your device settings. If you need help, check out troubleshooter at https://test.8x8.vc/. Also, ensure you're on a secure website (https://)."
                                  );
                                case 31:
                                  Dr.debug(
                                    "enableWebcam() | calling getUserMedia()"
                                  );
                                  try {
                                    a2 && "ended" == (v3 = a2.getVideoTracks()[0]).readyState && (v3 = null, E3 = It.q.ERROR_CUSTOM_VIDEO_TRACK_ENDED, null === (k3 = this._videosdkLogs) || void 0 === k3 || k3.pushLogs({
                                      logText: E3.message,
                                      logType: "INFO",
                                      attributes: {
                                        error: "In enableWebcam() :: Invalid Custom Track Passed"
                                      },
                                      dashboardLog: true
                                    }), this._emitError(E3));
                                  } catch (e6) {
                                    T3 = It.q.ERROR_INVALID_CUSTOM_VIDEO_TRACK, null === (C3 = this._videosdkLogs) || void 0 === C3 || C3.pushLogs({
                                      logText: T3.message,
                                      logType: "INFO",
                                      attributes: {
                                        error: "In enableWebcam() :: Invalid Custom Track Passed"
                                      }
                                    }), this._emitError(T3), console.log(
                                      "Invalid Custom Video Track Passed. Reverting to default Error: ".concat(
                                        e6
                                      )
                                    );
                                  }
                                  if (v3) {
                                    e5.next = 98;
                                    break;
                                  }
                                  if (O3 = null === (P3 = this._openTelemetry) || void 0 === P3 ? void 0 : P3.trace({
                                    spanName: "Creating Track",
                                    span: c2
                                  }), x3 = null, e5.prev = 36, "hd" != this._webcam.resolution) {
                                    e5.next = 44;
                                    break;
                                  }
                                  return e5.next = 40, this.createCameraVideoTrack({
                                    cameraId: _3.deviceId,
                                    encoderConfig: "h720p_w1280p",
                                    multiStream: this._useSimulcast,
                                    facingMode: _3.facing
                                  });
                                case 40:
                                  a2 = e5.sent, x3 = JSON.stringify({
                                    encoderConfig: "h720p_w1280p",
                                    multiStream: this._useSimulcast
                                  }), e5.next = 48;
                                  break;
                                case 44:
                                  return e5.next = 46, this.createCameraVideoTrack({
                                    cameraId: _3.deviceId,
                                    encoderConfig: "h540p_w960p",
                                    multiStream: this._useSimulcast,
                                    facingMode: _3.facing
                                  });
                                case 46:
                                  a2 = e5.sent, x3 = JSON.stringify({
                                    encoderConfig: "h540p_w960p",
                                    multiStream: this._useSimulcast
                                  });
                                case 48:
                                  v3 = a2.getVideoTracks()[0], null === (D3 = this._openTelemetry) || void 0 === D3 || D3.completeSpan({
                                    message: "Video Track Generated",
                                    span: O3,
                                    attributes: {
                                      customVideoTrackConfig: x3
                                    },
                                    status: 1
                                  }), e5.next = 98;
                                  break;
                                case 52:
                                  if (e5.prev = 52, e5.t0 = e5.catch(36), null === (I3 = this._openTelemetry) || void 0 === I3 || I3.completeSpan({
                                    message: "Error in enableWebcam() :: ".concat(
                                      e5.t0.message
                                    ),
                                    span: O3,
                                    status: 2
                                  }), "SecurityError" !== e5.t0.name) {
                                    e5.next = 63;
                                    break;
                                  }
                                  L3 = It.q.ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED, N3 = L3.message, this._emitError(L3), null === (A3 = this._videosdkLogs) || void 0 === A3 || A3.pushLogs({
                                    logText: N3,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: Camera Permission Denied or Dismissed"
                                    },
                                    dashboardLog: true
                                  }), null === (M3 = this._openTelemetry) || void 0 === M3 || M3.completeSpan({
                                    message: "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                      N3
                                    ),
                                    span: enableMicSpan,
                                    status: 2
                                  }), e5.next = 97;
                                  break;
                                case 63:
                                  if ("DOMException" !== e5.t0.name) {
                                    e5.next = 71;
                                    break;
                                  }
                                  F3 = It.q.ERROR_RN_CAMERA_NOT_FOUND, U3 = F3.message, this._emitError(F3), null === (j3 = this._videosdkLogs) || void 0 === j3 || j3.pushLogs({
                                    logText: U3,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: No Camra Device Found"
                                    },
                                    dashboardLog: true
                                  }), null === (B3 = this._openTelemetry) || void 0 === B3 || B3.completeSpan({
                                    message: "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                      U3
                                    ),
                                    span: enableMicSpan,
                                    status: 2
                                  }), e5.next = 97;
                                  break;
                                case 71:
                                  if (!(e5.t0 instanceof DOMException)) {
                                    e5.next = 94;
                                    break;
                                  }
                                  e5.t1 = e5.t0.name, e5.next = "NotAllowedError" === e5.t1 ? 75 : "NotReadableError" === e5.t1 ? 78 : "NotFoundError" === e5.t1 ? 81 : 88;
                                  break;
                                case 75:
                                  return W3 = this.handleNotAllowedError(
                                    e5.t0,
                                    this._openTelemetry,
                                    this._videosdkLogs,
                                    c2,
                                    "video"
                                  ), this._emitError(W3), e5.abrupt("break", 92);
                                case 78:
                                  return q3 = this.handleNotReadableError(
                                    e5.t0,
                                    this._openTelemetry,
                                    this._videosdkLogs,
                                    c2,
                                    "video"
                                  ), this._emitError(q3), e5.abrupt("break", 92);
                                case 81:
                                  return V3 = It.q.ERROR_CAMERA_NOT_FOUND, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                    "Firefox"
                                  ) && (V3 = It.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS), H3 = V3.message, this._emitError(V3), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: H3,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: No Webcam Device Found"
                                    },
                                    dashboardLog: true
                                  }), null === (n4 = this._openTelemetry) || void 0 === n4 || n4.completeSpan({
                                    message: "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                      H3
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.abrupt("break", 92);
                                case 88:
                                  return z3 = "An error occurred in creating video track, ".concat(
                                    e5.t0.message
                                  ), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: ".concat(
                                        z3
                                      )
                                    },
                                    dashboardLog: true
                                  }), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    message: "Error in enableWebcam() :: ".concat(
                                      z3
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.abrupt("break", 92);
                                case 92:
                                  e5.next = 97;
                                  break;
                                case 94:
                                  $3 = "An error occurred in creating video track, ".concat(
                                    e5.t0.message
                                  ), null === (G3 = this._videosdkLogs) || void 0 === G3 || G3.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: ".concat(
                                        $3
                                      )
                                    },
                                    dashboardLog: true
                                  }), null === (K3 = this._openTelemetry) || void 0 === K3 || K3.completeSpan({
                                    message: "Error in enableWebcam() :: ".concat(
                                      $3
                                    ),
                                    span: c2,
                                    status: 2
                                  });
                                case 97:
                                  return e5.abrupt("return");
                                case 98:
                                  e5.next = 105;
                                  break;
                                case 100:
                                  return _3 = { label: "external video" }, e5.next = 103, this._getExternalVideoStream();
                                case 103:
                                  J3 = e5.sent, v3 = J3.getVideoTracks()[0].clone();
                                case 105:
                                  if (Q3 = null === (b3 = this._openTelemetry) || void 0 === b3 ? void 0 : b3.trace({
                                    spanName: "Generating Producer Configuration",
                                    span: c2
                                  }), Z3 = { videoGoogleStartBitrate: 1e3 }, !this._forceH264) {
                                    e5.next = 114;
                                    break;
                                  }
                                  if (X3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/h264" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 112;
                                    break;
                                  }
                                  throw new Error(
                                    "The desired H.264 codec and configuration are not supported"
                                  );
                                case 112:
                                  e5.next = 119;
                                  break;
                                case 114:
                                  if (!this._forceVP9) {
                                    e5.next = 119;
                                    break;
                                  }
                                  if (X3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/vp9" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 119;
                                    break;
                                  }
                                  throw new Error(
                                    "The desired VP9 codec and configuration are not supported"
                                  );
                                case 119:
                                  v3 ? (ee3 = v3.getConstraints(), te3 = "react-native" == this._deviceInfo.sdkType && "ios" == this._deviceInfo.platform, Y3 = (0, xt.v7)(
                                    false,
                                    ee3.width,
                                    ee3.height,
                                    { simulcast: a2.multiStream },
                                    te3
                                  )) : this._useSimulcast && (re3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video" === e6.kind;
                                    }
                                  ), Y3 = this._forceVP9 && X3 || "video/vp9" === re3.mimeType.toLowerCase() ? Pr : Tr[this._webcam.resolution]), ne3 = {};
                                  try {
                                    ne3 = {
                                      encodings: Y3,
                                      width: a2 ? null === (se3 = v3) || void 0 === se3 ? void 0 : se3.getConstraints().width : Cr[y3].width.ideal,
                                      height: a2 ? null === (ie3 = v3) || void 0 === ie3 ? void 0 : ie3.getConstraints().height : Cr[y3].height.ideal
                                    };
                                  } catch (e6) {
                                    null === (ae3 = this._videosdkLogs) || void 0 === ae3 || ae3.pushLogs({
                                      logText: e6.message,
                                      logType: "INFO",
                                      attributes: {
                                        error: "In enableWebcam() :: ".concat(
                                          e6.message
                                        )
                                      },
                                      dashboardLog: true
                                    }), console.log(e6);
                                  }
                                  if (null === (w3 = this._openTelemetry) || void 0 === w3 || w3.traceAutoComplete({
                                    spanName: "Track Generated with height ".concat(ne3.height, " and width ").concat(
                                      ne3.width,
                                      " with multiStream "
                                    ).concat(this._useSimulcast),
                                    attributes: {
                                      appData: JSON.stringify(ne3)
                                    },
                                    span: c2,
                                    status: 1
                                  }), null === (S3 = this._openTelemetry) || void 0 === S3 || S3.completeSpan({
                                    span: Q3,
                                    status: 1,
                                    message: "Producer Configuration Generated"
                                  }), Q3 = null === (R3 = this._openTelemetry) || void 0 === R3 ? void 0 : R3.trace({
                                    spanName: "Creating Webcam Producer",
                                    span: c2
                                  }), !this._sendTransport) {
                                    e5.next = 132;
                                    break;
                                  }
                                  return e5.next = 128, this._sendTransport.produce({
                                    track: v3,
                                    encodings: Y3,
                                    codecOptions: Z3,
                                    codec: X3,
                                    appData: br(
                                      br({}, ne3),
                                      {},
                                      { isEncrypted: this.isE2EEEnabled }
                                    ),
                                    onRtpSender: function(e6) {
                                      e6.senderStreams = e6.createEncodedStreams();
                                    }
                                  });
                                case 128:
                                  this._webcamProducer = e5.sent, this.e2eeManager && this.e2eeManager.emit(
                                    "NEW_PRODUCER",
                                    this._webcamProducer
                                  ), e5.next = 135;
                                  break;
                                case 132:
                                  return null === (oe3 = this._videosdkLogs) || void 0 === oe3 || oe3.pushLogs({
                                    logText: It.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED.message,
                                    attributes: {
                                      error: "Error in enableWebcam() :: Transport is not setup"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), this._emitError(
                                    It.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                  ), e5.abrupt("return");
                                case 135:
                                  v3.getConstraints().deviceId && (this._webcam.device = this._webcams.get(
                                    v3.getConstraints().deviceId
                                  )), this._webcamProducer ? (le3 = ct({
                                    id: this._webcamProducer.id,
                                    deviceLabel: _3.label,
                                    type: this._getWebcamType(_3),
                                    paused: this._webcamProducer.paused,
                                    track: this._webcamProducer.track,
                                    rtpParameters: this._webcamProducer.rtpParameters,
                                    codec: this._webcamProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    instance: this._webcamProducer,
                                    rtpSender: this._webcamProducer.rtpSender
                                  }), kr.dispatch(le3), this._eventEmitter.emit(
                                    le3.type,
                                    le3.payload
                                  ), ue3 = 0, (pe3 = this._metrics.addNewProbe(
                                    this._webcamProducer,
                                    "producer"
                                  )).onStatsCollected = function(e6) {
                                    try {
                                      var t5;
                                      _e3._stats.producerStats || (_e3._stats.producerStats = {}), _e3._stats.producerStats.video || (_e3._stats.producerStats.video = []), _e3._webcamProducer && (_e3._latestStats[null === (t5 = _e3._webcamProducer) || void 0 === t5 ? void 0 : t5.id] = []), e6.video.forEach(function(e7) {
                                        var t6;
                                        _e3._latestStats[null === (t6 = _e3._webcamProducer) || void 0 === t6 ? void 0 : t6.id].push(e7);
                                      }), ue3 % 5 == 0 && null != _e3._webcamProducer && _e3._stats.producerStats.video.push(
                                        {
                                          timestamp: /* @__PURE__ */ new Date(),
                                          stats: _e3._latestStats[_e3._webcamProducer.id]
                                        }
                                      ), ue3++;
                                    } catch (e7) {
                                      var r5;
                                      null === (r5 = _e3._videosdkLogs) || void 0 === r5 || r5.pushLogs({
                                        logText: "Error PRODUCER Stats ERROR",
                                        logType: "ERROR",
                                        attributes: {
                                          error: e7.message
                                        }
                                      }), console.log(
                                        "PRODUCER ERROR",
                                        e7
                                      );
                                    }
                                  }, pe3.start(), this._webcamProducer.observer.on(
                                    "close",
                                    function() {
                                      pe3.stop(), _e3._metrics.removeExistingProbe(
                                        pe3
                                      );
                                    }
                                  ), this._webcamProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = dt(_e3._webcamProducer.id);
                                      kr.dispatch(t5), _e3._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = _e3._webcamProducer) || void 0 === e6 || e6.close(), _e3._webcamProducer = null;
                                    }
                                  ), this._webcamProducer.on(
                                    "trackended",
                                    function() {
                                      var e6, t5, r5 = "react-native" == _e3._deviceInfo.sdkType ? It.q.ERROR_RN_CAMERA_TRACK_ENDED : It.q.ERROR_WEBCAM_TRACK_ENDED;
                                      null === (e6 = _e3._videosdkLogs) || void 0 === e6 || e6.pushLogs({
                                        logText: r5.message,
                                        logType: "ERROR",
                                        attributes: {
                                          error: "Error in enableWebcam() :: ".concat(
                                            r5.message
                                          )
                                        },
                                        dashboardLog: true
                                      }), null === (t5 = _e3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "this._webcamProducer trackended or Webcam disconnected!",
                                        span: c2,
                                        message: r5.message,
                                        status: 2
                                      }), kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Webcam disconnected!"
                                        })
                                      ), _e3.disableWebcam(c2).catch(function() {
                                      });
                                    }
                                  ), null === (ce3 = this._openTelemetry) || void 0 === ce3 || ce3.completeSpan({
                                    span: Q3,
                                    status: 1,
                                    message: "Webcam Producer Created"
                                  }), null === (de3 = this._openTelemetry) || void 0 === de3 || de3.completeSpan({
                                    span: c2,
                                    status: 1,
                                    message: "Enable Webcam Successful"
                                  })) : (null === (he3 = this._videosdkLogs) || void 0 === he3 || he3.pushLogs({
                                    logText: "Oops! Something went wrong, and we're unable to enable the webcam. Please try again.",
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam(): Something went wrong."
                                    },
                                    dashboardLog: true
                                  }), null === (me3 = this._openTelemetry) || void 0 === me3 || me3.completeSpan({
                                    span: Q3,
                                    status: 2,
                                    message: "Error in enableWebcam() :: webcamProducer null"
                                  }), null === (fe3 = this._openTelemetry) || void 0 === fe3 || fe3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: webcamProducer null"
                                  })), e5.next = 147;
                                  break;
                                case 139:
                                  return e5.prev = 139, e5.t2 = e5.catch(23), null === (ge3 = this._videosdkLogs) || void 0 === ge3 || ge3.pushLogs({
                                    logText: e5.t2.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: ".concat(
                                        e5.t2.message
                                      )
                                    },
                                    dashboardLog: true
                                  }), null === (ve3 = this._openTelemetry) || void 0 === ve3 || ve3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: ".concat(
                                      e5.t2.message
                                    )
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error enabling webcam: ".concat(
                                        e5.t2
                                      )
                                    })
                                  ), e5.next = 146, this._socketRequest("produceError", {
                                    mediaType: "video",
                                    message: e5.t2.message
                                  });
                                case 146:
                                  v3 && v3.stop();
                                case 147:
                                  kr.dispatch(ht(false));
                                case 148:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [23, 139],
                            [36, 52]
                          ]
                        );
                      })
                    ), function() {
                      return we2.apply(this, arguments);
                    })
                  },
                  {
                    key: "handleNotAllowedError",
                    value: function(e4, t4, r4, n4, s2) {
                      var i2 = {};
                      return i2 = "Permission denied" === e4.message || "Permission dismissed" === e4.message ? "video" === s2 ? It.q.ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED : It.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED : e4.message.includes(
                        "The request is not allowed by the user agent"
                      ) ? "video" === s2 ? It.q.ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE : It.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED : "Permission denied by system" === e4.message ? "video" === s2 ? It.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS : It.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS : "video" === s2 ? It.q.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED : It.q.ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED, r4.pushLogs({
                        logText: i2.message,
                        logType: "ERROR",
                        attributes: {
                          error: "Error in ".concat(
                            "video" === s2 ? "enableWebcam()" : "enableMic()",
                            " :: "
                          ).concat(e4.message)
                        },
                        dashboardLog: true
                      }), t4.completeSpan({
                        message: "video" === s2 ? "Error in enableWebcam() :: occurred in creating video track, ".concat(
                          i2.message
                        ) : "Error in enableMic() :: occurred in creating audio track, ".concat(
                          i2.message
                        ),
                        span: n4,
                        status: 2
                      }), i2;
                    }
                  },
                  {
                    key: "handleNotReadableError",
                    value: function(e4, t4, r4, n4, s2) {
                      var i2 = {};
                      return i2 = "Device in use" === e4.message ? "video" === s2 ? It.q.ERROR_CAMERA_IN_USE : It.q.ERROR_MICROPHONE_IN_USE : "video" === s2 ? It.q.ERROR_VIDEO_SOURCE_INITIATION_FAILED : It.q.ERROR_MICROPHONE_IN_USE, r4.pushLogs({
                        logText: i2.message,
                        logType: "ERROR",
                        attributes: {
                          error: "Error in ".concat(
                            "video" === s2 ? "enableWebcam()" : "enableMic()",
                            " :: "
                          ).concat(e4.message)
                        },
                        dashboardLog: true
                      }), t4.completeSpan({
                        message: "video" === s2 ? "Error in enableWebcam() :: occurred in creating video track, ".concat(
                          i2.message
                        ) : "Error in enableMic() :: occurred in creating audio track, ".concat(
                          i2.message
                        ),
                        span: n4,
                        status: 2
                      }), i2;
                    }
                  },
                  {
                    key: "createCameraVideoTrack",
                    value: (be2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3;
                        return u().wrap(function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return r4 = t4.cameraId, n4 = void 0 === r4 ? void 0 : r4, s2 = t4.encoderConfig, i2 = void 0 === s2 ? void 0 : s2, a2 = t4.facingMode, o2 = void 0 === a2 ? void 0 : a2, c2 = t4.optimizationMode, d2 = void 0 === c2 ? void 0 : c2, l3 = t4.multiStream, p3 = void 0 === l3 || l3, h3 = i2 ? Dt.$.videoProfiles[i2] : Dt.$.videoProfiles.h360p_w640p, m3 = {
                                  video: {
                                    deviceId: n4 || void 0,
                                    facingMode: o2 || void 0,
                                    width: h3.width,
                                    height: h3.height,
                                    frameRate: h3.frameRate
                                  }
                                }, e5.next = 5, (0, Qt.lp)(m3);
                              case 5:
                                return f3 = e5.sent, d2 && (f3.contentHint = d2), f3.encoderConfig = i2 || "h360p_w640p", f3.contentHint = d2 || "", f3.multiStream = p3, f3.cameraId = n4, e5.abrupt("return", f3);
                              case 12:
                              case "end":
                                return e5.stop();
                            }
                        }, e4);
                      })
                    ), function(e4) {
                      return be2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableWebcam",
                    value: (ye2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3 = arguments;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (n4 = f3.length > 0 && void 0 !== f3[0] ? f3[0] : void 0, s2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "disableWebcam() Calling",
                                    status: 1,
                                    span: n4 || null
                                  }), Dr.debug("disableWebcam()"), this._webcamEnabled = false, this._webcamProducer) {
                                    e5.next = 8;
                                    break;
                                  }
                                  return null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "Error in disableWebcam() :: Webcam Producer Not found"
                                  }), null === (a2 = this._videosdkLogs) || void 0 === a2 || a2.pushLogs({
                                    logText: "Attempted to call disableWebcam() multiple times",
                                    attributes: {
                                      error: "Error in disableWebcam() :: Webcam is already disabled"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), e5.abrupt("return");
                                case 8:
                                  return o2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "Closing Webcam Producer",
                                    span: s2,
                                    status: 1
                                  }), this._webcamProducer.close(), c2 = dt(this._webcamProducer.id), kr.dispatch(c2), this._eventEmitter.emit(
                                    c2.type,
                                    c2.payload
                                  ), e5.prev = 13, e5.next = 16, this._socketRequest("closeProducer", {
                                    producerId: this._webcamProducer.id
                                  });
                                case 16:
                                  null === (d2 = this._openTelemetry) || void 0 === d2 || d2.completeSpan({
                                    span: o2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), this._webcamProducer = null, null === (l3 = this._openTelemetry) || void 0 === l3 || l3.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "Webcam Disabled Successfully"
                                  }), e5.next = 27;
                                  break;
                                case 21:
                                  e5.prev = 21, e5.t0 = e5.catch(13), null === (p3 = this._videosdkLogs) || void 0 === p3 || p3.pushLogs({
                                    logText: "Error in disableWebcam() :: Failed to close server-side webcam producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message },
                                    dashboardLog: true
                                  }), null === (h3 = this._openTelemetry) || void 0 === h3 || h3.completeSpan({
                                    span: o2,
                                    status: 2,
                                    message: "Error in disableWebcam() :: closing server-side webcam Producer: ".concat(
                                      e5.t0
                                    )
                                  }), null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "Error in disableWebcam() :: closing server-side webcam Producer: ".concat(
                                      e5.t0
                                    )
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error closing server-side webcam Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 27:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[13, 21]]
                        );
                      })
                    ), function() {
                      return ye2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getMics",
                    value: (_e2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return t4 = [], e5.prev = 1, e5.next = 4, this._updateMics();
                                case 4:
                                  this._mics.forEach(function(e6, r5) {
                                    t4.push({ deviceId: r5, label: e6.label });
                                  }), e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Dr.error("getMics() | Error", e5.t0), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in getMics() :: Not able to get Mic List"
                                    },
                                    dashboardLog: true
                                  });
                                case 11:
                                  return e5.abrupt("return", t4);
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function() {
                      return _e2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeMic",
                    value: (ve2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, a2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (n4 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "changeMic() Calling"
                                  }), e5.prev = 1, "object" != (0, i.A)(t4)) {
                                    e5.next = 9;
                                    break;
                                  }
                                  return e5.next = 5, this.disableMic(true, n4);
                                case 5:
                                  return e5.next = 7, this.enableMic(t4, n4);
                                case 7:
                                  e5.next = 27;
                                  break;
                                case 9:
                                  return c2 = t4, e5.next = 12, this._updateMics();
                                case 12:
                                  if (d2 = Array.from(this._mics.keys()), l3 = d2.length, p3 = this._mic.device ? this._mic.device.deviceId : void 0, null != c2 && null != c2 ? h3 = d2.indexOf(c2) : (h3 = d2.indexOf(p3)) < l3 - 1 ? h3++ : h3 = 0, this._mic.device = this._mics.get(d2[h3]), m3 = null === (s2 = this._openTelemetry) || void 0 === s2 ? void 0 : s2.trace({
                                    spanName: "Getting Selected Mic",
                                    span: n4,
                                    attributes: {
                                      selectedWebcam: this._mic.device ? JSON.stringify(
                                        this._mic.device
                                      ) : "No Mic devices"
                                    }
                                  }), this._mic.device) {
                                    e5.next = 21;
                                    break;
                                  }
                                  throw null === (f3 = this._videosdkLogs) || void 0 === f3 || f3.pushLogs({
                                    logText: "Error changeMic : No mic Found",
                                    logType: "ERROR"
                                  }), new Error("No mic Found");
                                case 21:
                                  return e5.next = 23, this.disableMic(true, n4);
                                case 23:
                                  return e5.next = 25, this.enableMic(void 0, n4);
                                case 25:
                                  null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: m3,
                                    status: 1,
                                    message: "Done"
                                  }), null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "changeMic() Ending"
                                  });
                                case 27:
                                  e5.next = 33;
                                  break;
                                case 29:
                                  e5.prev = 29, e5.t0 = e5.catch(1), null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "changeMic() | Error ".concat(e5.t0)
                                  }), null === (v3 = this._videosdkLogs) || void 0 === v3 || v3.pushLogs({
                                    logText: "Error changeMic() | Error",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 33:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 29]]
                        );
                      })
                    ), function(e4) {
                      return ve2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getWebcams",
                    value: (ge2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return t4 = [], e5.prev = 1, e5.next = 4, this._updateWebcams();
                                case 4:
                                  this._webcams.forEach(function(e6, r5) {
                                    t4.push({
                                      deviceId: r5,
                                      label: e6.label,
                                      facingMode: e6.facing || "environment"
                                    });
                                  }), e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Dr.error(
                                    "getWebcams() | failed %o",
                                    e5.t0
                                  ), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in getWebcams() :: Not able to get Webcam List"
                                    },
                                    dashboardLog: true
                                  });
                                case 11:
                                  return e5.abrupt("return", t4);
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function() {
                      return ge2.apply(this, arguments);
                    })
                  },
                  {
                    key: "replaceWebcamStream",
                    value: (fe2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._webcamProducer) {
                                    e5.next = 7;
                                    break;
                                  }
                                  return r4 = t4.getVideoTracks()[0], e5.next = 4, this._webcamProducer.replaceTrack({
                                    track: r4
                                  });
                                case 4:
                                  this._eventEmitter.emit("UPDATE_PRODUCER", {
                                    producer: this._webcamProducer
                                  }), e5.next = 11;
                                  break;
                                case 7:
                                  return e5.next = 9, this.disableWebcam();
                                case 9:
                                  return e5.next = 11, this.enableWebcam(t4);
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return fe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeWebcam",
                    value: (me2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, a2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (n4 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "changeWebcam() Calling"
                                  }), kr.dispatch(ht(true)), "object" !== (0, i.A)(t4)) {
                                    e5.next = 17;
                                    break;
                                  }
                                  return e5.prev = 3, e5.next = 6, this.disableWebcam(n4);
                                case 6:
                                  return e5.next = 8, this.enableWebcam(t4, n4);
                                case 8:
                                  e5.next = 15;
                                  break;
                                case 10:
                                  e5.prev = 10, e5.t0 = e5.catch(3), Dr.error(
                                    "changeWebcam() | failed: %o",
                                    e5.t0
                                  ), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Error Could not change webcam",
                                    logType: "ERROR",
                                    attributes: {
                                      object: JSON.stringify(t4),
                                      error: e5.t0.message
                                    }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Could not change webcam: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 15:
                                  e5.next = 46;
                                  break;
                                case 17:
                                  return e5.prev = 17, e5.next = 20, this._updateWebcams(n4);
                                case 20:
                                  if (d2 = Array.from(this._webcams.keys()), l3 = d2.length, p3 = this._webcam.device ? this._webcam.device.deviceId : void 0, null != t4 && null != t4 ? h3 = d2.indexOf(t4) : (h3 = d2.indexOf(p3)) < l3 - 1 ? h3++ : h3 = 0, this._webcam.device = this._webcams.get(
                                    d2[h3]
                                  ), Dr.debug(
                                    "changeWebcam() | new selected webcam [device:%o]",
                                    this._webcam.device
                                  ), this._webcam.resolution = this._webcam.resolution || "hd", m3 = null === (a2 = this._openTelemetry) || void 0 === a2 ? void 0 : a2.trace({
                                    spanName: "Getting Selected Webcam",
                                    span: n4,
                                    attributes: {
                                      selectedWebcam: this._webcam.device ? JSON.stringify(
                                        this._webcam.device
                                      ) : "No webcam devices"
                                    }
                                  }), this._webcam.device) {
                                    e5.next = 31;
                                    break;
                                  }
                                  throw null === (f3 = this._videosdkLogs) || void 0 === f3 || f3.pushLogs({
                                    logText: "Error changeWebcam : No webcam Found",
                                    logType: "ERROR"
                                  }), new Error("no webcam devices");
                                case 31:
                                  return e5.next = 33, this.disableWebcam(n4);
                                case 33:
                                  return e5.next = 35, this.enableWebcam(void 0, n4);
                                case 35:
                                  return null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: m3,
                                    status: 1,
                                    message: "Done"
                                  }), null === (c2 = this._openTelemetry) || void 0 === c2 || c2.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "changeWebcam() Ending"
                                  }), e5.abrupt("return");
                                case 40:
                                  e5.prev = 40, e5.t1 = e5.catch(17), Dr.error(
                                    "changeWebcam() | failed: %o",
                                    e5.t1
                                  ), null === (g3 = this._videosdkLogs) || void 0 === g3 || g3.pushLogs({
                                    logText: "Error Could not change webcam",
                                    logType: "ERROR",
                                    attributes: {
                                      object: JSON.stringify(t4),
                                      error: e5.t1.message
                                    }
                                  }), null === (v3 = this._openTelemetry) || void 0 === v3 || v3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Could not change webcam ".concat(
                                      e5.t1
                                    )
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Could not change webcam: ".concat(
                                        e5.t1
                                      )
                                    })
                                  );
                                case 46:
                                  kr.dispatch(ht(false));
                                case 47:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [3, 10],
                            [17, 40]
                          ]
                        );
                      })
                    ), function(e4) {
                      return me2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeWebcamResolution",
                    value: (he2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  Dr.debug("changeWebcamResolution()"), kr.dispatch(ht(true)), e5.prev = 2, e5.t0 = this._webcam.resolution, e5.next = "qvga" === e5.t0 ? 6 : "vga" === e5.t0 ? 8 : "hd" === e5.t0 ? 10 : 12;
                                  break;
                                case 6:
                                  return this._webcam.resolution = "vga", e5.abrupt("break", 13);
                                case 8:
                                  return this._webcam.resolution = "hd", e5.abrupt("break", 13);
                                case 10:
                                  return this._webcam.resolution = "qvga", e5.abrupt("break", 13);
                                case 12:
                                  this._webcam.resolution = "hd";
                                case 13:
                                  return Dr.debug(
                                    "changeWebcamResolution() | calling getUserMedia()"
                                  ), e5.prev = 14, e5.next = 17, navigator.mediaDevices.getUserMedia({
                                    video: br(
                                      {
                                        deviceId: {
                                          exact: this._webcam.device.deviceId
                                        }
                                      },
                                      Cr[this._webcam.resolution]
                                    )
                                  });
                                case 17:
                                  t4 = e5.sent, e5.next = 25;
                                  break;
                                case 20:
                                  return e5.prev = 20, e5.t1 = e5.catch(14), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error in getUserMedia for changeWebcamResolution",
                                    logType: "ERROR",
                                    attributes: {
                                      error: JSON.stringify(e5.t1)
                                    }
                                  }), "Permission denied" === e5.t1.message || "NotAllowedError" === e5.t1.name ? this._emitError(
                                    It.q.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                                  ) : this._emitError(
                                    It.q.ERROR_GET_VIDEO_MEDIA
                                  ), e5.abrupt("return");
                                case 25:
                                  return n4 = t4.getVideoTracks()[0], e5.next = 28, this._webcamProducer.replaceTrack({
                                    track: n4
                                  });
                                case 28:
                                  kr.dispatch(lt(this._webcamProducer.id, n4)), e5.next = 36;
                                  break;
                                case 31:
                                  e5.prev = 31, e5.t2 = e5.catch(2), Dr.error(
                                    "changeWebcamResolution() | failed: %o",
                                    e5.t2
                                  ), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Error Could not change webcam resolution",
                                    logType: "ERROR",
                                    attributes: { error: e5.t2.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Could not change webcam resolution: ".concat(
                                        e5.t2
                                      )
                                    })
                                  );
                                case 36:
                                  kr.dispatch(ht(false));
                                case 37:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [2, 31],
                            [14, 20]
                          ]
                        );
                      })
                    ), function() {
                      return he2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableShare",
                    value: (pe2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3, _3, y3, b3, w3, S3, R3, k3, E3, C3, T3, P3, O3, x3, D3, I3, A3, M3, L3, N3, j3, B3, F3, U3, W3, q3, V3, H3 = this, z3 = arguments;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r4 = z3.length > 0 && void 0 !== z3[0] ? z3[0] : void 0, n4 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "enableShare() Calling ".concat(
                                      r4 ? "With Custom Video Track" : "Without Custom Video Track "
                                    ),
                                    attributes: {
                                      customShareConfig: r4 ? JSON.stringify(r4) : "Not Specify Custom Track"
                                    }
                                  }), Dr.debug("enableShare()"), !this._shareProducer) {
                                    e5.next = 6;
                                    break;
                                  }
                                  return null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Screen Share Producer found"
                                  }), e5.abrupt("return");
                                case 6:
                                  if (this._mediasoupDevice.canProduce("video")) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "enableShare() | cannot produce video"
                                  }), Dr.error(
                                    "enableShare() | cannot produce video"
                                  ), e5.abrupt("return");
                                case 10:
                                  if (c2 = [], kr.dispatch(mt(true)), e5.prev = 12, Dr.debug(
                                    "enableShare() | calling getUserMedia()"
                                  ), g3 = null === (d2 = this._openTelemetry) || void 0 === d2 ? void 0 : d2.trace({
                                    spanName: "Creating Track",
                                    span: n4
                                  }), !r4 || !r4.active) {
                                    e5.next = 21;
                                    break;
                                  }
                                  a2 = r4.getVideoTracks()[0], o2 = r4.getAudioTracks()[0], r4.multiStream ? (v3 = a2.getConstraints(), _3 = v3.height, y3 = v3.frameRate, b3 = Dt.$.screenShareProfiles["h".concat(_3, "p_").concat(y3, "fps")], w3 = [
                                    {
                                      maxBitrate: b3.bitrates.high,
                                      maxFramerate: y3,
                                      scalabilityMode: "S3T3",
                                      dtx: true
                                    },
                                    {
                                      maxBitrate: b3.bitrates.medium,
                                      maxFramerate: y3,
                                      scalabilityMode: "S2T3",
                                      dtx: true
                                    },
                                    {
                                      maxBitrate: b3.bitrates.low,
                                      maxFramerate: y3,
                                      scalabilityMode: "S1T3",
                                      dtx: true
                                    }
                                  ], c2 = w3) : c2 = Or, e5.next = 41;
                                  break;
                                case 21:
                                  return e5.prev = 21, e5.next = 24, navigator.mediaDevices.getDisplayMedia({
                                    audio: true,
                                    video: {
                                      width: { max: 1920 },
                                      height: { max: 1080 },
                                      frameRate: { max: 10 }
                                    }
                                  });
                                case 24:
                                  R3 = e5.sent, e5.next = 33;
                                  break;
                                case 27:
                                  return e5.prev = 27, e5.t0 = e5.catch(21), null === (k3 = this._videosdkLogs) || void 0 === k3 || k3.pushLogs({
                                    logText: "Error in getDisplayMedia for screen share",
                                    logType: "ERROR",
                                    attributes: {
                                      error: JSON.stringify(e5.t0)
                                    }
                                  }), null === (E3 = this._openTelemetry) || void 0 === E3 || E3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Error in getDisplayMedia for screen share ".concat(
                                      e5.t0
                                    )
                                  }), "Permission denied" === e5.t0.message || "NotAllowedError" === e5.t0.name ? this._emitError(
                                    It.q.ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED
                                  ) : this._emitError(
                                    It.q.ERROR_GET_DISPLAY_MEDIA
                                  ), e5.abrupt("return");
                                case 33:
                                  if (R3) {
                                    e5.next = 37;
                                    break;
                                  }
                                  return kr.dispatch(mt(true)), null === (C3 = this._openTelemetry) || void 0 === C3 || C3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Stream not found"
                                  }), e5.abrupt("return");
                                case 37:
                                  a2 = R3.getVideoTracks()[0], o2 = R3.getAudioTracks()[0], c2 = Or, null === (S3 = this._openTelemetry) || void 0 === S3 || S3.completeSpan({
                                    message: "Track Generated with height ".concat(
                                      a2.getSettings().height,
                                      " and width "
                                    ).concat(a2.getSettings().width),
                                    span: g3,
                                    status: 1
                                  });
                                case 41:
                                  if (T3 = null === (l3 = this._openTelemetry) || void 0 === l3 ? void 0 : l3.trace({
                                    spanName: "Generating Producer Configuration",
                                    span: n4
                                  }), O3 = { videoGoogleStartBitrate: 1e3 }, !this._forceH264) {
                                    e5.next = 50;
                                    break;
                                  }
                                  if (P3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/h264" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 48;
                                    break;
                                  }
                                  throw null === (x3 = this._videosdkLogs) || void 0 === x3 || x3.pushLogs({
                                    logText: "Error EnableShare : desired H264 codec+configuration is not supported",
                                    logType: "ERROR"
                                  }), new Error(
                                    "desired H264 codec+configuration is not supported"
                                  );
                                case 48:
                                  e5.next = 55;
                                  break;
                                case 50:
                                  if (!this._forceVP9) {
                                    e5.next = 55;
                                    break;
                                  }
                                  if (P3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/vp9" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 55;
                                    break;
                                  }
                                  throw null === (D3 = this._videosdkLogs) || void 0 === D3 || D3.pushLogs({
                                    logText: "Error EnableShare :desired VP9 codec+configuration is not supported",
                                    logType: "ERROR"
                                  }), new Error(
                                    "desired VP9 codec+configuration is not supported"
                                  );
                                case 55:
                                  return null === (p3 = this._openTelemetry) || void 0 === p3 || p3.completeSpan({
                                    span: T3,
                                    status: 1,
                                    message: "Producer Configuration Generated"
                                  }), T3 = null === (h3 = this._openTelemetry) || void 0 === h3 ? void 0 : h3.trace({
                                    spanName: "Creating Share Producer",
                                    span: n4
                                  }), e5.next = 59, this._sendTransport.produce({
                                    track: a2,
                                    encodings: c2.length > 0 ? c2 : Or,
                                    codecOptions: O3,
                                    codec: P3,
                                    appData: {
                                      share: true,
                                      isEncrypted: this.isE2EEEnabled
                                    },
                                    onRtpSender: function(e6) {
                                      e6.senderStreams = e6.createEncodedStreams();
                                    }
                                  });
                                case 59:
                                  if (this._shareProducer = e5.sent, this.e2eeManager && this.e2eeManager.emit(
                                    "NEW_PRODUCER",
                                    this._shareProducer
                                  ), I3 = ct({
                                    id: this._shareProducer.id,
                                    type: "share",
                                    paused: this._shareProducer.paused,
                                    track: this._shareProducer.track,
                                    rtpParameters: this._shareProducer.rtpParameters,
                                    codec: this._shareProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    appData: {
                                      share: true,
                                      isEncrypted: this.isE2EEEnabled
                                    },
                                    instance: this._shareProducer,
                                    rtpSender: this._shareProducer.rtpSender
                                  }), kr.dispatch(I3), this._eventEmitter.emit(
                                    I3.type,
                                    I3.payload
                                  ), this._shareProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = dt(H3._shareProducer.id);
                                      kr.dispatch(t5), H3._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = H3._shareProducer) || void 0 === e6 || e6.close(), H3._shareProducer = null;
                                    }
                                  ), this._shareProducer.on(
                                    "trackended",
                                    function() {
                                      var e6;
                                      null === (e6 = H3._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: "this._shareProducer trackended or Share disconnected!",
                                        span: n4,
                                        status: 2
                                      }), kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Share disconnected!"
                                        })
                                      ), H3.disableShare().catch(
                                        function() {
                                        }
                                      );
                                    }
                                  ), null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: T3,
                                    status: 1,
                                    message: "Share Producer Created"
                                  }), !o2) {
                                    e5.next = 88;
                                    break;
                                  }
                                  return e5.prev = 68, L3 = { opusStereo: 1, opusDtx: 1 }, T3 = null === (A3 = this._openTelemetry) || void 0 === A3 ? void 0 : A3.trace({
                                    spanName: "Creating Share Audio Producer",
                                    span: n4
                                  }), e5.next = 73, this._sendTransport.produce({
                                    track: o2,
                                    codecOptions: L3,
                                    appData: {
                                      share: true,
                                      isEncrypted: this.isE2EEEnabled
                                    },
                                    onRtpSender: function(e6) {
                                      e6.senderStreams = e6.createEncodedStreams();
                                    }
                                  });
                                case 73:
                                  this._shareAudioProducer = e5.sent, N3 = ct({
                                    id: this._shareAudioProducer.id,
                                    type: "share",
                                    paused: this._shareAudioProducer.paused,
                                    track: this._shareAudioProducer.track,
                                    rtpParameters: this._shareAudioProducer.rtpParameters,
                                    codec: this._shareAudioProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    appData: {
                                      share: true,
                                      isEncrypted: this.isE2EEEnabled
                                    },
                                    instance: this._shareAudioProducer,
                                    rtpSender: this._shareAudioProducer.rtpSender
                                  }), kr.dispatch(N3), this.e2eeManager && this.e2eeManager.emit(
                                    "NEW_PRODUCER",
                                    this._shareAudioProducer
                                  ), this._eventEmitter.emit(
                                    N3.type,
                                    N3.payload
                                  ), this._shareAudioProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = dt(H3._shareAudioProducer.id);
                                      kr.dispatch(t5), H3._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = H3._shareAudioProducer) || void 0 === e6 || e6.close(), H3._shareAudioProducer = null;
                                    }
                                  ), this._shareAudioProducer.on(
                                    "trackended",
                                    function() {
                                      var e6;
                                      null === (e6 = H3._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: "this._shareAudioProducer trackended",
                                        span: n4,
                                        status: 2
                                      }), kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Share disconnected!"
                                        })
                                      );
                                    }
                                  ), null === (M3 = this._openTelemetry) || void 0 === M3 || M3.completeSpan({
                                    span: T3,
                                    status: 1,
                                    message: "Share Audio Producer Created"
                                  }), e5.next = 88;
                                  break;
                                case 83:
                                  return e5.prev = 83, e5.t1 = e5.catch(68), e5.next = 87, this._socketRequest("produceError", {
                                    mediaType: "shareAudio",
                                    message: e5.t1.message
                                  });
                                case 87:
                                  null === (j3 = this._videosdkLogs) || void 0 === j3 || j3.pushLogs({
                                    logText: "Error in shareAudio produceError",
                                    logType: "ERROR",
                                    attributes: { error: e5.t1.message }
                                  });
                                case 88:
                                  null === (f3 = this._openTelemetry) || void 0 === f3 || f3.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "Enable Share Successful"
                                  }), e5.next = 102;
                                  break;
                                case 91:
                                  return e5.prev = 91, e5.t2 = e5.catch(12), Dr.error(
                                    "enableShare() | failed:%o",
                                    e5.t2
                                  ), null === (B3 = this._openTelemetry) || void 0 === B3 || B3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    attributes: { error: e5.t2.message },
                                    message: "Error in enableShare video produceError"
                                  }), console.log(
                                    "screen share catch",
                                    e5.t2.message
                                  ), null === (F3 = this._videosdkLogs) || void 0 === F3 || F3.pushLogs({
                                    logText: "Error in enableShare video produceError",
                                    logType: "ERROR",
                                    attributes: { error: e5.t2.message }
                                  }), "NotAllowedError" !== e5.t2.name && kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error sharing: ".concat(
                                        e5.t2
                                      )
                                    })
                                  ), e5.next = 100, this._socketRequest("produceError", {
                                    mediaType: "share",
                                    message: e5.t2.message
                                  });
                                case 100:
                                  a2 && a2.stop(), o2 && o2.stop();
                                case 102:
                                  kr.dispatch(mt(false)), this._shareProducer && (U3 = 0, (W3 = this._metrics.addNewProbe(
                                    this._shareProducer,
                                    "share_producer"
                                  )).onStatsCollected = function(e6) {
                                    try {
                                      var t5;
                                      H3._stats.producerStats || (H3._stats.producerStats = {}), H3._stats.producerStats.share || (H3._stats.producerStats.share = []), H3._shareProducer && (H3._latestStats[null === (t5 = H3._shareProducer) || void 0 === t5 ? void 0 : t5.id] = []), e6.video.forEach(function(e7) {
                                        var t6;
                                        H3._shareProducer && H3._latestStats[null === (t6 = H3._shareProducer) || void 0 === t6 ? void 0 : t6.id].push(e7);
                                      }), U3 % 5 == 0 && null != H3._shareProducer && H3._stats.producerStats.share.push(
                                        {
                                          timestamp: /* @__PURE__ */ new Date(),
                                          stats: H3._latestStats[H3._shareProducer.id]
                                        }
                                      ), U3++;
                                    } catch (e7) {
                                      var r5;
                                      null === (r5 = H3._videosdkLogs) || void 0 === r5 || r5.pushLogs({
                                        logText: "Error PRODUCER Stats ERROR",
                                        logType: "ERROR",
                                        attributes: {
                                          error: e7.message
                                        }
                                      }), console.log("PRODUCER ERROR", e7);
                                    }
                                  }, W3.start(), this._shareProducer.observer.on(
                                    "close",
                                    function() {
                                      W3.stop(), H3._metrics.removeExistingProbe(W3);
                                    }
                                  )), this._shareAudioProducer && (q3 = 0, (V3 = this._metrics.addNewProbe(
                                    this._shareAudioProducer,
                                    "share_audio_producer"
                                  )).onStatsCollected = function(e6) {
                                    try {
                                      var t5;
                                      H3._stats.producerStats || (H3._stats.producerStats = {}), H3._stats.producerStats.shareAudio || (H3._stats.producerStats.shareAudio = []), H3._shareAudioProducer && (H3._latestStats[null === (t5 = H3._shareAudioProducer) || void 0 === t5 ? void 0 : t5.id] = []), e6.audio.forEach(function(e7) {
                                        var t6;
                                        H3._shareAudioProducer && H3._latestStats[null === (t6 = H3._shareAudioProducer) || void 0 === t6 ? void 0 : t6.id].push(e7);
                                      }), q3 % 5 == 0 && null != H3._shareAudioProducer && H3._stats.producerStats.shareAudio.push(
                                        br(
                                          { timestamp: /* @__PURE__ */ new Date() },
                                          H3._latestStats[H3._shareAudioProducer.id] ? H3._latestStats[H3._shareAudioProducer.id][0] : {}
                                        )
                                      ), q3++;
                                    } catch (e7) {
                                      var r5;
                                      null === (r5 = H3._videosdkLogs) || void 0 === r5 || r5.pushLogs({
                                        logText: "Error PRODUCER Stats ERROR",
                                        logType: "ERROR",
                                        attributes: {
                                          error: e7.message
                                        }
                                      }), console.log("PRODUCER ERROR", e7);
                                    }
                                  }, V3.start(), this._shareAudioProducer.observer.on(
                                    "close",
                                    function() {
                                      V3.stop(), H3._metrics.removeExistingProbe(V3);
                                    }
                                  ));
                                case 105:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [12, 91],
                            [21, 27],
                            [68, 83]
                          ]
                        );
                      })
                    ), function() {
                      return pe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableShare",
                    value: (ue2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("disableShare()"), s2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "disableShare() Calling",
                                    status: 1
                                  }), this._shareProducer) {
                                    e5.next = 5;
                                    break;
                                  }
                                  return null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "Share Producer Not found"
                                  }), e5.abrupt("return");
                                case 5:
                                  return a2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "Closing Share Producer",
                                    span: s2,
                                    status: 1
                                  }), this._shareProducer.close(), o2 = dt(this._shareProducer.id), kr.dispatch(o2), this._eventEmitter.emit(
                                    o2.type,
                                    o2.payload
                                  ), this._shareAudioProducer && (l3 = null === (c2 = this._openTelemetry) || void 0 === c2 ? void 0 : c2.trace({
                                    spanName: "Closing Share Audio Producer",
                                    span: s2,
                                    status: 1
                                  }), this._shareAudioProducer.close(), o2 = dt(this._shareAudioProducer.id), kr.dispatch(o2), this._eventEmitter.emit(
                                    o2.type,
                                    o2.payload
                                  ), null === (d2 = this._openTelemetry) || void 0 === d2 || d2.completeSpan({
                                    span: l3,
                                    status: 1,
                                    message: "Closed Share Audio Producer"
                                  })), e5.prev = 11, e5.next = 14, this._socketRequest("closeProducer", {
                                    producerId: this._shareProducer.id
                                  });
                                case 14:
                                  if (!this._shareAudioProducer) {
                                    e5.next = 17;
                                    break;
                                  }
                                  return e5.next = 17, this._socketRequest("closeProducer", {
                                    producerId: this._shareAudioProducer.id
                                  });
                                case 17:
                                  null === (p3 = this._openTelemetry) || void 0 === p3 || p3.completeSpan({
                                    span: a2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), e5.next = 25;
                                  break;
                                case 20:
                                  e5.prev = 20, e5.t0 = e5.catch(11), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error closing server-side share Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), null === (h3 = this._openTelemetry) || void 0 === h3 || h3.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "Error closing server-side share Producer ".concat(
                                      e5.t0
                                    )
                                  }), null === (m3 = this._videosdkLogs) || void 0 === m3 || m3.pushLogs({
                                    logText: "Error closing server-side share Producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 25:
                                  this._shareProducer = null, this._shareAudioProducer = null, null === (n4 = this._openTelemetry) || void 0 === n4 || n4.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "Screen Share Disabled Successfully"
                                  });
                                case 28:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[11, 20]]
                        );
                      })
                    ), function() {
                      return ue2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableAudioOnly",
                    value: (le2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  Dr.debug("enableAudioOnly()"), kr.dispatch(it(true)), this.disableWebcam(), t4 = wr(this._consumers.values()), e5.prev = 4, t4.s();
                                case 6:
                                  if ((r4 = t4.n()).done) {
                                    e5.next = 13;
                                    break;
                                  }
                                  if ("video" === (n4 = r4.value).kind) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return e5.abrupt("continue", 11);
                                case 10:
                                  this._pauseConsumer(n4);
                                case 11:
                                  e5.next = 6;
                                  break;
                                case 13:
                                  e5.next = 18;
                                  break;
                                case 15:
                                  e5.prev = 15, e5.t0 = e5.catch(4), t4.e(e5.t0);
                                case 18:
                                  return e5.prev = 18, t4.f(), e5.finish(18);
                                case 21:
                                  kr.dispatch(st(true)), kr.dispatch(it(false));
                                case 23:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 15, 18, 21]]
                        );
                      })
                    ), function() {
                      return le2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableAudioOnly",
                    value: (de2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  Dr.debug("disableAudioOnly()"), kr.dispatch(it(true)), !this._webcamProducer && this._produce && (Qe() || {}).webcamEnabled && this.enableWebcam(), t4 = wr(this._consumers.values()), e5.prev = 4, t4.s();
                                case 6:
                                  if ((r4 = t4.n()).done) {
                                    e5.next = 13;
                                    break;
                                  }
                                  if ("video" === (n4 = r4.value).kind) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return e5.abrupt("continue", 11);
                                case 10:
                                  this._resumeConsumer(n4);
                                case 11:
                                  e5.next = 6;
                                  break;
                                case 13:
                                  e5.next = 18;
                                  break;
                                case 15:
                                  e5.prev = 15, e5.t0 = e5.catch(4), t4.e(e5.t0);
                                case 18:
                                  return e5.prev = 18, t4.f(), e5.finish(18);
                                case 21:
                                  kr.dispatch(st(false)), kr.dispatch(it(false));
                                case 23:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 15, 18, 21]]
                        );
                      })
                    ), function() {
                      return de2.apply(this, arguments);
                    })
                  },
                  {
                    key: "muteAudio",
                    value: (ce2 = (0, a.A)(
                      u().mark(function e4() {
                        return u().wrap(function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                Dr.debug("muteAudio()"), kr.dispatch(at(true));
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        }, e4);
                      })
                    ), function() {
                      return ce2.apply(this, arguments);
                    })
                  },
                  {
                    key: "unmuteAudio",
                    value: (oe2 = (0, a.A)(
                      u().mark(function e4() {
                        return u().wrap(function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                Dr.debug("unmuteAudio()"), kr.dispatch(at(false));
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        }, e4);
                      })
                    ), function() {
                      return oe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "handleRemoteRestartIce",
                    value: (ae2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, a2, o2, c2, d2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return s2 = t4.iceParameters, i2 = t4.transportId, a2 = t4.internalSpan, i2 === (null === (r4 = this._sendTransport) || void 0 === r4 ? void 0 : r4.id) && this._sendTransport.restartIce({
                                    iceParameters: s2
                                  }), i2 === (null === (n4 = this._recvTransport) || void 0 === n4 ? void 0 : n4.id) && this._recvTransport.restartIce({
                                    iceParameters: s2
                                  }), e5.prev = 3, e5.next = 6, this._socketRequest("iceRestarted", {
                                    transportId: i2
                                  });
                                case 6:
                                  null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: a2,
                                    status: 1,
                                    message: "iceRestarted"
                                  }), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), null === (c2 = this._openTelemetry) || void 0 === c2 || c2.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "handleRemoteRestartIce() ICE restart failed ".concat(
                                      e5.t0
                                    )
                                  }), null === (d2 = this._videosdkLogs) || void 0 === d2 || d2.pushLogs({
                                    logText: "Error handleRemoteRestartIce() ICE restart failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "ICE restart failed: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function(e4) {
                      return ae2.apply(this, arguments);
                    })
                  },
                  {
                    key: "restartIce",
                    value: (ie2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("restartIce()"), kr.dispatch(ot(true)), e5.prev = 2, !this._sendTransport) {
                                    e5.next = 9;
                                    break;
                                  }
                                  return e5.next = 6, this._socketRequest("restartIce", {
                                    transportId: this._sendTransport.id
                                  });
                                case 6:
                                  return t4 = e5.sent, e5.next = 9, this._sendTransport.restartIce({
                                    iceParameters: t4
                                  });
                                case 9:
                                  if (!this._recvTransport) {
                                    e5.next = 15;
                                    break;
                                  }
                                  return e5.next = 12, this._socketRequest("restartIce", {
                                    transportId: this._recvTransport.id
                                  });
                                case 12:
                                  return r4 = e5.sent, e5.next = 15, this._recvTransport.restartIce({
                                    iceParameters: r4
                                  });
                                case 15:
                                  kr.dispatch(Pt({ text: "ICE restarted" })), e5.next = 23;
                                  break;
                                case 18:
                                  e5.prev = 18, e5.t0 = e5.catch(2), Dr.error(
                                    "restartIce() | failed:%o",
                                    e5.t0
                                  ), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "ICE restart failed: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error restartIce() ICE restart failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 23:
                                  kr.dispatch(ot(false));
                                case 24:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 18]]
                        );
                      })
                    ), function() {
                      return ie2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_socketRequest",
                    value: (se2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4 = this, s2 = arguments;
                        return u().wrap(function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return r4 = s2.length > 1 && void 0 !== s2[1] ? s2[1] : {}, e5.abrupt(
                                  "return",
                                  new Promise(function(e6, s3) {
                                    n4._webSocket.emit(
                                      "request",
                                      { method: t4, request: true, data: r4 },
                                      function(t5) {
                                        null != t5 && t5.error ? s3(new Error(t5.error)) : e6(t5.data);
                                      }
                                    );
                                  })
                                );
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        }, e4);
                      })
                    ), function(e4) {
                      return se2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setMaxSendingSpatialLayer",
                    value: (ne2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug(
                                    "setMaxSendingSpatialLayer() [spatialLayer:%s]",
                                    t4
                                  ), e5.prev = 1, !this._webcamProducer) {
                                    e5.next = 7;
                                    break;
                                  }
                                  return e5.next = 5, this._webcamProducer.setMaxSpatialLayer(t4);
                                case 5:
                                  e5.next = 10;
                                  break;
                                case 7:
                                  if (!this._shareProducer) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return e5.next = 10, this._shareProducer.setMaxSpatialLayer(t4);
                                case 10:
                                  e5.next = 17;
                                  break;
                                case 12:
                                  e5.prev = 12, e5.t0 = e5.catch(1), Dr.error(
                                    "setMaxSendingSpatialLayer() | failed:%o",
                                    e5.t0
                                  ), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error setting max sending video spatial layer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error setting max sending video spatial layer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 17:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 12]]
                        );
                      })
                    ), function(e4) {
                      return ne2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setWebcamQuality",
                    value: (re2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (this._webcamProducer) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  if (r4 = this._webcam.resolution, n4 = Er[r4][t4].s, this._webcamProducer.maxSpatialLayer != n4) {
                                    e5.next = 6;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 6:
                                  return e5.next = 8, this._webcamProducer.setMaxSpatialLayer(n4);
                                case 8:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return re2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setConsumerScreenShareQuality",
                    value: (te2 = (0, a.A)(
                      u().mark(function e4(t4, r4) {
                        var n4, s2, i2, a2, o2, c2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return a2 = null === (n4 = this._openTelemetry) || void 0 === n4 ? void 0 : n4.trace({
                                    spanName: 'Setting "'.concat(
                                      r4,
                                      '" Quality for Screen Share'
                                    )
                                  }), c2 = (o2 = {
                                    high: {
                                      spatialLayer: 2,
                                      temporalLayer: 2
                                    },
                                    med: {
                                      spatialLayer: 1,
                                      temporalLayer: 2
                                    },
                                    low: {
                                      spatialLayer: 0,
                                      temporalLayer: 2
                                    }
                                  })[r4] || o2.high, null === (s2 = this._openTelemetry) || void 0 === s2 || s2.traceAutoComplete({
                                    spanName: "Getting spatial & temporal layers",
                                    span: a2,
                                    attributes: { selectedQuality: c2 },
                                    status: 1
                                  }), e5.next = 6, this.setConsumerPreferredLayers(
                                    t4,
                                    c2.spatialLayer,
                                    c2.temporalLayer
                                  );
                                case 6:
                                  null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    message: "Done",
                                    span: a2,
                                    status: 1
                                  });
                                case 7:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return te2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setConsumerQuality",
                    value: (ee2 = (0, a.A)(
                      u().mark(function e4(t4, r4) {
                        var n4, s2, i2, a2, o2, c2, d2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return a2 = this._webcam.resolution, o2 = null === (n4 = this._openTelemetry) || void 0 === n4 ? void 0 : n4.trace({
                                    spanName: 'Setting "'.concat(
                                      r4,
                                      '" Quality'
                                    )
                                  }), c2 = Er[a2][r4].s, d2 = Er[a2][r4].t, null === (s2 = this._openTelemetry) || void 0 === s2 || s2.traceAutoComplete({
                                    spanName: "Getting spatial & temporal layers",
                                    span: o2,
                                    attributes: {
                                      spatialLayers: JSON.parse(c2),
                                      temporalLayers: JSON.parse(d2)
                                    },
                                    status: 1
                                  }), e5.next = 7, this.setConsumerPreferredLayers(t4, c2, d2);
                                case 7:
                                  null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    message: "Done",
                                    span: o2,
                                    status: 1
                                  });
                                case 8:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return ee2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setViewPort",
                    value: (Z2 = (0, a.A)(
                      u().mark(function e4(t4, r4, n4) {
                        var s2, i2, a2, o2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (this._consumers.get(t4.id)) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  if (s2 = (0, xt.ed)(
                                    this._consumers.get(t4.id),
                                    r4,
                                    n4
                                  ), i2 = s2.consumerId, a2 = s2.newPreferredSpatialLayer, o2 = s2.newPreferredTemporalLayer, a2 !== t4.preferredSpatialLayer || o2 !== t4.preferredTemporalLayer) {
                                    e5.next = 5;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 5:
                                  if (!i2) {
                                    e5.next = 8;
                                    break;
                                  }
                                  return e5.next = 8, this.setConsumerPreferredLayers(i2, a2, o2);
                                case 8:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4, r4) {
                      return Z2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setConsumerPreferredLayers",
                    value: (X2 = (0, a.A)(
                      u().mark(function e4(t4, r4, n4) {
                        var s2, i2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug(
                                    "setConsumerPreferredLayers() [consumerId:%s, spatialLayer:%s, temporalLayer:%s]",
                                    t4,
                                    r4,
                                    n4
                                  ), e5.prev = 1, (s2 = this._consumers.get(t4)).spatialLayers > 1 && (s2.preferredSpatialLayer = r4, s2.preferredTemporalLayer = n4), e5.next = 6, this._socketRequest(
                                    "setConsumerPreferredLayers",
                                    {
                                      consumerId: t4,
                                      spatialLayer: r4,
                                      temporalLayer: n4
                                    }
                                  );
                                case 6:
                                  kr.dispatch(Rt(t4, r4, n4)), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(1), Dr.error(
                                    "setConsumerPreferredLayers() | failed:%o",
                                    e5.t0
                                  ), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "Error setting Consumer preferred layers:",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error setting Consumer preferred layers: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 9]]
                        );
                      })
                    ), function(e4, t4, r4) {
                      return X2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setConsumerPriority",
                    value: (Y2 = (0, a.A)(
                      u().mark(function e4(t4, r4) {
                        var n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug(
                                    "setConsumerPriority() [consumerId:%s, priority:%d]",
                                    t4,
                                    r4
                                  ), e5.prev = 1, e5.next = 4, this._socketRequest(
                                    "setConsumerPriority",
                                    { consumerId: t4, priority: r4 }
                                  );
                                case 4:
                                  kr.dispatch(kt(t4, r4)), e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Dr.error(
                                    "setConsumerPriority() | failed:%o",
                                    e5.t0
                                  ), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error setting Consumer priority",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error setting Consumer priority: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function(e4, t4) {
                      return Y2.apply(this, arguments);
                    })
                  },
                  {
                    key: "requestConsumerKeyFrame",
                    value: (Q2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug(
                                    "requestConsumerKeyFrame() [consumerId:%s]",
                                    t4
                                  ), e5.prev = 1, e5.next = 4, this._socketRequest(
                                    "requestConsumerKeyFrame",
                                    { consumerId: t4 }
                                  );
                                case 4:
                                  kr.dispatch(
                                    Pt({
                                      text: "Keyframe requested for video consumer"
                                    })
                                  ), e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Dr.error(
                                    "requestConsumerKeyFrame() | failed:%o",
                                    e5.t0
                                  ), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error requesting key frame for Consumer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error requesting key frame for Consumer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function(e4) {
                      return Q2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableChatDataProducer",
                    value: (J2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4 = this;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("enableChatDataProducer()"), this._useDataChannel) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.prev = 3, e5.next = 6, this._sendTransport.produceData({
                                    ordered: false,
                                    maxRetransmits: 1,
                                    label: "chat",
                                    priority: "medium",
                                    appData: {
                                      info: "my-chat-DataProducer"
                                    }
                                  });
                                case 6:
                                  this._chatDataProducer = e5.sent, kr.dispatch(
                                    pt({
                                      id: this._chatDataProducer.id,
                                      sctpStreamParameters: this._chatDataProducer.sctpStreamParameters,
                                      label: this._chatDataProducer.label,
                                      protocol: this._chatDataProducer.protocol
                                    })
                                  ), this._chatDataProducer.on(
                                    "transportclose",
                                    function() {
                                      r4._chatDataProducer = null;
                                    }
                                  ), this._chatDataProducer.on(
                                    "open",
                                    function() {
                                      Dr.debug(
                                        'chat DataProducer "open" event'
                                      );
                                    }
                                  ), this._chatDataProducer.on(
                                    "close",
                                    function() {
                                      Dr.error(
                                        'chat DataProducer "close" event'
                                      ), r4._chatDataProducer = null, kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Chat DataProducer closed"
                                        })
                                      );
                                    }
                                  ), this._chatDataProducer.on(
                                    "error",
                                    function(e6) {
                                      Dr.error(
                                        'chat DataProducer "error" event:%o',
                                        e6
                                      ), kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Chat DataProducer error: ".concat(
                                            e6
                                          )
                                        })
                                      );
                                    }
                                  ), this._chatDataProducer.on(
                                    "bufferedamountlow",
                                    function() {
                                      Dr.debug(
                                        'chat DataProducer "bufferedamountlow" event'
                                      );
                                    }
                                  ), e5.next = 21;
                                  break;
                                case 15:
                                  throw e5.prev = 15, e5.t0 = e5.catch(3), Dr.error(
                                    "enableChatDataProducer() | failed:%o",
                                    e5.t0
                                  ), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "Error enabling chat DataProducer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error enabling chat DataProducer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), e5.t0;
                                case 21:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 15]]
                        );
                      })
                    ), function() {
                      return J2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableBotDataProducer",
                    value: ($2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4 = this;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("enableBotDataProducer()"), this._useDataChannel) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.prev = 3, e5.next = 6, this._sendTransport.produceData({
                                    ordered: false,
                                    maxPacketLifeTime: 2e3,
                                    label: "bot",
                                    priority: "medium",
                                    appData: {
                                      info: "my-bot-DataProducer"
                                    }
                                  });
                                case 6:
                                  this._botDataProducer = e5.sent, kr.dispatch(
                                    pt({
                                      id: this._botDataProducer.id,
                                      sctpStreamParameters: this._botDataProducer.sctpStreamParameters,
                                      label: this._botDataProducer.label,
                                      protocol: this._botDataProducer.protocol
                                    })
                                  ), this._botDataProducer.on(
                                    "transportclose",
                                    function() {
                                      r4._botDataProducer = null;
                                    }
                                  ), this._botDataProducer.on(
                                    "open",
                                    function() {
                                      Dr.debug(
                                        'bot DataProducer "open" event'
                                      );
                                    }
                                  ), this._botDataProducer.on(
                                    "close",
                                    function() {
                                      Dr.error(
                                        'bot DataProducer "close" event'
                                      ), r4._botDataProducer = null, kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Bot DataProducer closed"
                                        })
                                      );
                                    }
                                  ), this._botDataProducer.on(
                                    "error",
                                    function(e6) {
                                      Dr.error(
                                        'bot DataProducer "error" event:%o',
                                        e6
                                      ), kr.dispatch(
                                        Pt({
                                          type: "error",
                                          text: "Bot DataProducer error: ".concat(
                                            e6
                                          )
                                        })
                                      );
                                    }
                                  ), this._botDataProducer.on(
                                    "bufferedamountlow",
                                    function() {
                                      Dr.debug(
                                        'bot DataProducer "bufferedamountlow" event'
                                      );
                                    }
                                  ), e5.next = 21;
                                  break;
                                case 15:
                                  throw e5.prev = 15, e5.t0 = e5.catch(3), Dr.error(
                                    "enableBotDataProducer() | failed:%o",
                                    e5.t0
                                  ), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "Error enabling bot DataProducer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error enabling bot DataProducer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), e5.t0;
                                case 21:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 15]]
                        );
                      })
                    ), function() {
                      return $2.apply(this, arguments);
                    })
                  },
                  {
                    key: "sendChatMessage",
                    value: (K2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug(
                                    'sendChatMessage() [text:"%s]',
                                    t4
                                  ), this._chatDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "No chat DataProducer"
                                    })
                                  ), e5.abrupt("return");
                                case 4:
                                  try {
                                    this._chatDataProducer.send(t4);
                                  } catch (e6) {
                                    Dr.error(
                                      "chat DataProducer.send() failed:%o",
                                      e6
                                    ), kr.dispatch(
                                      Pt({
                                        type: "error",
                                        text: "chat DataProducer.send() failed: ".concat(
                                          e6
                                        )
                                      })
                                    );
                                  }
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return K2.apply(this, arguments);
                    })
                  },
                  {
                    key: "sendBotMessage",
                    value: (G2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug(
                                    'sendBotMessage() [text:"%s]',
                                    t4
                                  ), this._botDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "No bot DataProducer"
                                    })
                                  ), e5.abrupt("return");
                                case 4:
                                  try {
                                    this._botDataProducer.send(t4);
                                  } catch (e6) {
                                    Dr.error(
                                      "bot DataProducer.send() failed:%o",
                                      e6
                                    ), kr.dispatch(
                                      Pt({
                                        type: "error",
                                        text: "bot DataProducer.send() failed: ".concat(
                                          e6
                                        )
                                      })
                                    );
                                  }
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return G2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeDisplayName",
                    value: (z2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug(
                                    'changeDisplayName() [displayName:"%s"]',
                                    t4
                                  ), Je({ displayName: t4 }), e5.prev = 2, e5.next = 5, this._socketRequest("changeDisplayName", {
                                    displayName: t4
                                  });
                                case 5:
                                  this._displayName = t4, kr.dispatch(nt(t4)), kr.dispatch(
                                    Pt({ text: "Display name changed" })
                                  ), e5.next = 15;
                                  break;
                                case 10:
                                  e5.prev = 10, e5.t0 = e5.catch(2), Dr.error(
                                    "changeDisplayName() | failed: %o",
                                    e5.t0
                                  ), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Could not change display name: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), kr.dispatch(nt());
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 10]]
                        );
                      })
                    ), function(e4) {
                      return z2.apply(this, arguments);
                    })
                  },
                  {
                    key: "openConnection",
                    value: (H2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, n4 = t4.payload, e5.next = 3, this._socketRequest("openConnection", {
                                    roomId: r4,
                                    payload: n4
                                  }).catch(function(e6) {
                                    throw new Error(e6);
                                  });
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return H2.apply(this, arguments);
                    })
                  },
                  {
                    key: "closeConnection",
                    value: (V2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, this._socketRequest("closeConnection", {
                                    roomId: t4
                                  });
                                case 2:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return V2.apply(this, arguments);
                    })
                  },
                  {
                    key: "switchPeerRoom",
                    value: (q2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.peerId, n4 = t4.roomId, s2 = t4.payload, i2 = t4.token, e5.next = 3, this._socketRequest("switchPeerRoom", {
                                    roomId: n4,
                                    peerId: r4,
                                    payload: s2,
                                    token: i2
                                  });
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return q2.apply(this, arguments);
                    })
                  },
                  {
                    key: "connectionSwitchPeerRoom",
                    value: (W2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, a2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, n4 = t4.connectionRoomId, s2 = t4.peerId, i2 = t4.payload, a2 = t4.token, e5.next = 3, this._socketRequest(
                                    "connectionSwitchPeerRoom",
                                    {
                                      roomId: r4,
                                      connectionRoomId: n4,
                                      peerId: s2,
                                      payload: i2,
                                      token: a2
                                    }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return W2.apply(this, arguments);
                    })
                  },
                  {
                    key: "connectionSendChatMessage",
                    value: (U2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, n4 = t4.message, e5.next = 3, this._socketRequest(
                                    "connectionSendChatMessage",
                                    { roomId: r4, message: n4 }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return U2.apply(this, arguments);
                    })
                  },
                  {
                    key: "connectionEndMeeting",
                    value: (F2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, e5.next = 3, this._socketRequest(
                                    "connectionCloseRoom",
                                    { roomId: r4 }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return F2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pubsubPublish",
                    value: (B2 = (0, a.A)(
                      u().mark(function e4(t4, r4, n4, s2) {
                        var i2, a2, o2, c2, d2, l3;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (e5.prev = 0, null != n4 && n4.sendOnly) {
                                    if (i2 = n4.sendOnly, a2 = [], i2) {
                                      o2 = wr(i2);
                                      try {
                                        for (o2.s(); !(c2 = o2.n()).done; )
                                          (d2 = c2.value) && a2.push(d2.toString());
                                      } catch (e6) {
                                        o2.e(e6);
                                      } finally {
                                        o2.f();
                                      }
                                    }
                                    n4.sendOnly = a2;
                                  }
                                  return e5.next = 4, this._socketRequest("pubsubPublish", {
                                    topic: t4,
                                    message: r4,
                                    options: n4,
                                    payload: s2
                                  });
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(0), null === (l3 = this._videosdkLogs) || void 0 === l3 || l3.pushLogs({
                                    logText: "Error pubsubPublish() | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "pubsubPublish() | failed: %o",
                                    e5.t0
                                  );
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[0, 6]]
                        );
                      })
                    ), function(e4, t4, r4, n4) {
                      return B2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pubsubSubscribe",
                    value: (j2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return e5.prev = 2, e5.next = 5, this._socketRequest("pubsubSubscribe", {
                                    topic: t4
                                  });
                                case 5:
                                  return r4 = e5.sent, e5.abrupt("return", r4);
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(2), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error pubsubSubscribe() | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "pubsubSubscribe() | failed: %o",
                                    e5.t0
                                  );
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 9]]
                        );
                      })
                    ), function(e4) {
                      return j2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pubsubUnsubscribe",
                    value: (N2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return e5.prev = 2, e5.next = 5, this._socketRequest("pubsubUnsubscribe", {
                                    topic: t4
                                  });
                                case 5:
                                  null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Pubsub Unsubscribing Successfully for topic ".concat(
                                      t4
                                    ),
                                    logType: "INFO"
                                  }), e5.next = 12;
                                  break;
                                case 8:
                                  e5.prev = 8, e5.t0 = e5.catch(2), null === (n4 = this._videosdkLogs) || void 0 === n4 || n4.pushLogs({
                                    logText: "Error pubsubUnsubscribe() | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Dr.error(
                                    "pubsubUnsubscribe() | failed: %o",
                                    e5.t0
                                  );
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 8]]
                        );
                      })
                    ), function(e4) {
                      return N2.apply(this, arguments);
                    })
                  },
                  {
                    key: "closeRoom",
                    value: (L2 = (0, a.A)(
                      u().mark(function e4() {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, this._socketRequest("closeRoom", {});
                                case 2:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return L2.apply(this, arguments);
                    })
                  },
                  {
                    key: "removePeer",
                    value: (M2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Removing peer ".concat(t4),
                                    status: 1
                                  }), null != t4) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.next = 5, this._socketRequest("removePeer", {
                                    peerId: t4
                                  });
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return M2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getSendTransportRemoteStats",
                    value: (A2 = (0, a.A)(
                      u().mark(function e4() {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug(
                                    "getSendTransportRemoteStats()"
                                  ), this._sendTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._socketRequest("getTransportStats", {
                                      transportId: this._sendTransport.id
                                    })
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return A2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getRecvTransportRemoteStats",
                    value: (I2 = (0, a.A)(
                      u().mark(function e4() {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug(
                                    "getRecvTransportRemoteStats()"
                                  ), this._recvTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._socketRequest("getTransportStats", {
                                      transportId: this._recvTransport.id
                                    })
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return I2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getAudioRemoteStats",
                    value: (D2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("getAudioRemoteStats()"), t4 = this._micProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[t4.id]
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return D2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getVideoRemoteStats",
                    value: (x2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("getVideoRemoteStats()"), t4 = this._webcamProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[t4.id]
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return x2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getShareRemoteStats",
                    value: (O2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("getVideoRemoteStats()"), t4 = this._shareProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[t4.id]
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return O2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getShareAudioRemoteStats",
                    value: (P2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (t4 = this._shareAudioProducer) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[t4.id]
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return P2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getConsumerRemoteStats",
                    value: (T2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("getConsumerRemoteStats()"), r4 = this._consumers.get(t4)) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return this._latestStats[t4] && (this._latestStats[t4][0].currentSpatialLayer = r4.currentSpatialLayer, this._latestStats[t4][0].currentTemporalLayer = r4.currentTemporalLayer, this._latestStats[t4][0].preferredSpatialLayer = r4.preferredSpatialLayer, this._latestStats[t4][0].preferredTemporalLayer = r4.preferredTemporalLayer), n4 = r4.track.id.replace(/[{}]/g, ""), e5.abrupt("return", this._latestStats[n4]);
                                case 7:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return T2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getChatDataProducerRemoteStats",
                    value: (C2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug(
                                    "getChatDataProducerRemoteStats()"
                                  ), t4 = this._chatDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._socketRequest(
                                      "getDataProducerStats",
                                      { dataProducerId: t4.id }
                                    )
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return C2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getBotDataProducerRemoteStats",
                    value: (E2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug(
                                    "getBotDataProducerRemoteStats()"
                                  ), t4 = this._botDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._socketRequest(
                                      "getDataProducerStats",
                                      { dataProducerId: t4.id }
                                    )
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return E2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getDataConsumerRemoteStats",
                    value: (k2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("getDataConsumerRemoteStats()"), this._dataConsumers.get(t4)) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._socketRequest(
                                      "getDataConsumerStats",
                                      { dataConsumerId: t4 }
                                    )
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return k2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getSendTransportLocalStats",
                    value: (R2 = (0, a.A)(
                      u().mark(function e4() {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("getSendTransportLocalStats()"), this._sendTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._sendTransport.getStats()
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return R2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getRecvTransportLocalStats",
                    value: (S2 = (0, a.A)(
                      u().mark(function e4() {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("getRecvTransportLocalStats()"), this._recvTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._recvTransport.getStats()
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return S2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getAudioLocalStats",
                    value: (w2 = (0, a.A)(
                      u().mark(function e4() {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("getAudioLocalStats()"), this._micProducer) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._micProducer.getStats()
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return w2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getVideoLocalStats",
                    value: (b2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Dr.debug("getVideoLocalStats()"), t4 = this._webcamProducer || this._shareProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt("return", t4.getStats());
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return b2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getConsumerLocalStats",
                    value: (y2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r4 = this._consumers.get(t4)) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt("return", r4.getStats());
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return y2.apply(this, arguments);
                    })
                  },
                  {
                    key: "applyNetworkThrottle",
                    value: (_2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.uplink, n4 = t4.downlink, s2 = t4.rtt, i2 = t4.secret, Dr.debug(
                                    "applyNetworkThrottle() [uplink:%s, downlink:%s, rtt:%s]",
                                    r4,
                                    n4,
                                    s2
                                  ), e5.prev = 2, e5.next = 5, this._socketRequest(
                                    "applyNetworkThrottle",
                                    {
                                      uplink: r4,
                                      downlink: n4,
                                      rtt: s2,
                                      secret: i2
                                    }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Dr.error(
                                    "applyNetworkThrottle() | failed:%o",
                                    e5.t0
                                  ), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error applying network throttle: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return _2.apply(this, arguments);
                    })
                  },
                  {
                    key: "resetNetworkThrottle",
                    value: (v2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.silent, n4 = void 0 !== r4 && r4, s2 = t4.secret, Dr.debug("resetNetworkThrottle()"), e5.prev = 2, e5.next = 5, this._socketRequest(
                                    "resetNetworkThrottle",
                                    { secret: s2 }
                                  );
                                case 5:
                                  e5.next = 10;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), n4 || (Dr.error(
                                    "resetNetworkThrottle() | failed:%o",
                                    e5.t0
                                  ), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error resetting network throttle: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ));
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return v2.apply(this, arguments);
                    })
                  },
                  {
                    key: "createProducerTransport",
                    value: (g2 = (0, a.A)(
                      u().mark(function e4(t4, r4) {
                        var n4, s2, i2, o2, c2, d2, l3, p3, h3 = this;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  i2 = t4.id, o2 = t4.iceParameters, c2 = t4.iceCandidates, d2 = t4.dtlsParameters, l3 = t4.sctpParameters, p3 = null === (n4 = this._openTelemetry) || void 0 === n4 ? void 0 : n4.trace({
                                    spanName: "Creating Send Transport",
                                    span: r4 || null
                                  }), this._sendTransport = this._mediasoupDevice.createSendTransport(
                                    {
                                      id: i2,
                                      iceParameters: o2,
                                      iceCandidates: c2,
                                      dtlsParameters: d2,
                                      sctpParameters: l3,
                                      iceServers: this._iceServers
                                    }
                                  ), this._sendTransport.on(
                                    "connect",
                                    function(e6, t5, r5) {
                                      var n5, s3 = e6.dtlsParameters;
                                      null === (n5 = h3._openTelemetry) || void 0 === n5 || n5.traceAutoComplete({
                                        spanName: "this._sendTransport `connect` Event : Transport is about to establish the ICE+DTLS connection",
                                        span: p3,
                                        status: 1
                                      }), h3._socketRequest(
                                        "connectWebRtcTransport",
                                        {
                                          transportId: h3._sendTransport.id,
                                          dtlsParameters: s3
                                        }
                                      ).then(function() {
                                        t5();
                                      }).catch(function(e7) {
                                        r5(e7);
                                      });
                                    }
                                  ), this._sendTransport.on(
                                    "produce",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5, n5) {
                                          var s3, i3, a2, o3, c3, d3, l4;
                                          return u().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    return s3 = t5.kind, i3 = t5.rtpParameters, a2 = t5.appData, e8.prev = 1, null === (o3 = h3._openTelemetry) || void 0 === o3 || o3.traceAutoComplete(
                                                      {
                                                        spanName: "this._sendTransport `produce` Event : Transmit information about a new producer ",
                                                        span: p3,
                                                        status: 1
                                                      }
                                                    ), e8.next = 5, h3._socketRequest(
                                                      "produce",
                                                      {
                                                        transportId: h3._sendTransport.id,
                                                        kind: s3,
                                                        rtpParameters: i3,
                                                        appData: a2
                                                      }
                                                    );
                                                  case 5:
                                                    c3 = e8.sent, d3 = c3.id, r5({ id: d3 }), e8.next = 14;
                                                    break;
                                                  case 10:
                                                    e8.prev = 10, e8.t0 = e8.catch(1), null === (l4 = h3._videosdkLogs) || void 0 === l4 || l4.pushLogs({
                                                      logText: 'Error this._sendTransport "produce" Event catch',
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t0.message
                                                      }
                                                    }), n5(e8.t0);
                                                  case 14:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[1, 10]]
                                          );
                                        })
                                      );
                                      return function(t5, r5, n5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._sendTransport.on(
                                    "producedata",
                                    function() {
                                      var e6 = (0, a.A)(
                                        u().mark(function e7(t5, r5, n5) {
                                          var s3, i3, a2, o3, c3, d3, l4;
                                          return u().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    return s3 = t5.sctpStreamParameters, i3 = t5.label, a2 = t5.protocol, o3 = t5.appData, e8.prev = 1, e8.next = 4, h3._socketRequest(
                                                      "produceData",
                                                      {
                                                        transportId: h3._sendTransport.id,
                                                        sctpStreamParameters: s3,
                                                        label: i3,
                                                        protocol: a2,
                                                        appData: o3
                                                      }
                                                    );
                                                  case 4:
                                                    c3 = e8.sent, d3 = c3.id, r5({ id: d3 }), e8.next = 13;
                                                    break;
                                                  case 9:
                                                    e8.prev = 9, e8.t0 = e8.catch(1), null === (l4 = h3._videosdkLogs) || void 0 === l4 || l4.pushLogs({
                                                      logText: "Error producedata event catch",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t0.message
                                                      }
                                                    }), n5(e8.t0);
                                                  case 13:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[1, 9]]
                                          );
                                        })
                                      );
                                      return function(t5, r5, n5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._sendTransport.on(
                                    "connectionstatechange",
                                    function(e6) {
                                      var t5, r5;
                                      "connected" === e6 && h3.emitMeetingStateChange(Mt), null === (t5 = h3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "_sendTransport Event connectionstatechange ".concat(
                                          e6
                                        ),
                                        span: p3,
                                        status: 1
                                      }), "failed" === e6 && (null === (r5 = h3._videosdkLogs) || void 0 === r5 || r5.pushLogs({
                                        logText: "ERROR_MEETING_MEDIA_CONNECTION_FAILED",
                                        logType: "ERROR",
                                        attributes: {
                                          error: "Unable to connect to the meeting or media. Please check your network connection, ensure your firewall or security settings are not blocking the application, or try connecting using a different network."
                                        },
                                        dashboardLog: true
                                      }), h3.restartIce()), h3._transportState = e6;
                                    }
                                  ), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: p3,
                                    status: 1,
                                    message: "Send Transport Created Successfully"
                                  });
                                case 8:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return g2.apply(this, arguments);
                    })
                  },
                  {
                    key: "createConsumerTransport",
                    value: (f2 = (0, a.A)(
                      u().mark(function e4(t4, r4) {
                        var n4, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3 = this;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  a2 = t4.id, o2 = t4.iceParameters, c2 = t4.iceCandidates, d2 = t4.dtlsParameters, l3 = t4.sctpParameters, p3 = null === (n4 = this._openTelemetry) || void 0 === n4 ? void 0 : n4.trace({
                                    spanName: "Creating Recieve Transport",
                                    span: r4 || null
                                  }), this._recvTransport = this._mediasoupDevice.createRecvTransport(
                                    {
                                      id: a2,
                                      iceParameters: o2,
                                      iceCandidates: c2,
                                      dtlsParameters: d2,
                                      sctpParameters: l3,
                                      iceServers: this._iceServers
                                    }
                                  ), this._recvTransport.on(
                                    "connect",
                                    function(e6, t5, r5) {
                                      var n5, s2 = e6.dtlsParameters;
                                      null === (n5 = f3._openTelemetry) || void 0 === n5 || n5.traceAutoComplete({
                                        spanName: "this._recvTransport `connect` Event : Recieve Transport is about to establish the ICE+DTLS connection",
                                        span: p3,
                                        status: 1
                                      }), f3._socketRequest(
                                        "connectWebRtcTransport",
                                        {
                                          transportId: f3._recvTransport.id,
                                          dtlsParameters: s2
                                        }
                                      ).then(function() {
                                        t5();
                                      }).catch(function(e7) {
                                        r5(e7);
                                      });
                                    }
                                  ), this._recvTransport.on(
                                    "connectionstatechange",
                                    function(e6) {
                                      var t5;
                                      null === (t5 = f3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "_recvTransport Event connectionstatechange ".concat(
                                          e6
                                        ),
                                        span: p3,
                                        status: 1
                                      }), "failed" === e6 && f3.restartIce(), f3._transportState = e6;
                                    }
                                  ), h3 = 0, (m3 = this._metrics.addNewProbe(
                                    this._recvTransport,
                                    "transport"
                                  )).onStatsCollected = function(e6) {
                                    try {
                                      var t5 = function(e7, t6, r6) {
                                        f3._stats.consumerStats || (f3._stats.consumerStats = {});
                                        var n6 = t6.appData.peerId;
                                        f3._stats.consumerStats[n6] || (f3._stats.consumerStats[n6] = {}), f3._stats.consumerStats[n6][r6] || (f3._stats.consumerStats[n6][r6] = []), f3._latestStats[t6.track.id.replace(
                                          /[{}]/g,
                                          ""
                                        )] = [e7], h3 % 5 == 0 && f3._stats.consumerStats[n6][r6].push(e7);
                                      }, r5 = function(r6) {
                                        e6[r6].forEach(function(e7) {
                                          var r7, n6 = wr(f3._consumers);
                                          try {
                                            for (n6.s(); !(r7 = n6.n()).done; ) {
                                              var i3 = (0, s.A)(
                                                r7.value,
                                                2
                                              ), a3 = (i3[0], i3[1]);
                                              if (a3.track.id.replace(
                                                /[{}]/g,
                                                ""
                                              ) === e7.trackId) {
                                                var o3 = a3.appData.share ? "audio" === a3.kind ? "shareAudio" : "share" : a3.kind;
                                                t5(e7, a3, o3);
                                              }
                                            }
                                          } catch (e8) {
                                            n6.e(e8);
                                          } finally {
                                            n6.f();
                                          }
                                        });
                                      };
                                      r5("audio"), r5("video"), h3++;
                                    } catch (e7) {
                                      var n5;
                                      null === (n5 = f3._videosdkLogs) || void 0 === n5 || n5.pushLogs({
                                        logText: "Error CONSUMER Stats ERROR",
                                        logType: "ERROR",
                                        attributes: { error: e7.message }
                                      }), console.log("CONSUMER CATCH", e7);
                                    }
                                  }, m3.start(), this._recvTransport.observer.on(
                                    "close",
                                    function() {
                                      m3.stop(), f3._metrics.removeExistingProbe(m3);
                                    }
                                  ), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: p3,
                                    status: 1,
                                    message: "Recieve Transport Created Successfully"
                                  });
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return f2.apply(this, arguments);
                    })
                  },
                  {
                    key: "emitMeetingStateChange",
                    value: function(e4) {
                      this._eventEmitter.emit("MEETING_STATE_CHANGED", {
                        state: e4
                      }), this._meetingConnectionState = e4;
                    }
                  },
                  {
                    key: "joinRoom",
                    value: (m2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3, _3, y3, b3, w3, S3, R3, k3, E3, C3, T3, P3;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Dr.debug("joinRoom()"), e5.prev = 1, o2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "Loading Router Capabilities",
                                    span: this._joinSpan
                                  }), this._mediasoupDevice = new Me.Device({
                                    handlerName: this._handlerName
                                  }), e5.next = 6, this._socketRequest(
                                    "getRouterRtpCapabilities"
                                  );
                                case 6:
                                  return c2 = e5.sent, "react-native" != this._deviceInfo.sdkType ? navigator.userAgent.indexOf(
                                    "Firefox"
                                  ) && (c2.headerExtensions = null === (d2 = c2.headerExtensions) || void 0 === d2 ? void 0 : d2.filter(function(e6) {
                                    return "urn:3gpp:video-orientation" != e6.uri;
                                  })) : c2.headerExtensions = null === (l3 = c2.headerExtensions) || void 0 === l3 ? void 0 : l3.filter(function(e6) {
                                    return "urn:3gpp:video-orientation" != e6.uri;
                                  }), e5.next = 10, this._mediasoupDevice.load({
                                    routerRtpCapabilities: c2
                                  });
                                case 10:
                                  if (null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: o2,
                                    status: 1,
                                    attributes: {
                                      routerRtpCapabilities: JSON.stringify(c2).toString()
                                    },
                                    message: "Router Capabilities Loaded"
                                  }), !this._produce) {
                                    e5.next = 16;
                                    break;
                                  }
                                  return e5.next = 14, this._socketRequest(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: true,
                                      consuming: false,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 14:
                                  p3 = e5.sent, this.createProducerTransport(
                                    p3,
                                    this._joinSpan
                                  );
                                case 16:
                                  if (!this._consume) {
                                    e5.next = 21;
                                    break;
                                  }
                                  return e5.next = 19, this._socketRequest(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: false,
                                      consuming: true,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 19:
                                  h3 = e5.sent, this.createConsumerTransport(
                                    h3,
                                    this._joinSpan
                                  );
                                case 21:
                                  return e5.next = 23, this._socketRequest("join", {
                                    displayName: this._displayName,
                                    device: this._device,
                                    secret: this._secret,
                                    rtpCapabilities: null === (n4 = this._mediasoupDevice) || void 0 === n4 ? void 0 : n4.rtpCapabilities,
                                    sctpCapabilities: null === (s2 = this._mediasoupDevice) || void 0 === s2 ? void 0 : s2.sctpCapabilities,
                                    deviceInfo: this._deviceInfo,
                                    debugMode: this._debugMode,
                                    autoConsume: this._autoConsume,
                                    metaData: this._metaData
                                  });
                                case 23:
                                  m3 = e5.sent, f3 = m3.peers, g3 = m3.poll, v3 = m3.messages, kr.dispatch(Ze("connected")), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.traceAutoComplete({
                                    spanName: "Emitted `MEETING_JOINED` Event",
                                    span: this._joinSpan,
                                    status: 1
                                  }), this._eventEmitter.emit(
                                    "MEETING_JOINED",
                                    {
                                      peers: f3,
                                      poll: g3,
                                      messages: v3,
                                      baseUrl: this._baseUrl
                                    }
                                  ), kr.dispatch({
                                    type: "REMOVE_ALL_NOTIFICATIONS"
                                  }), kr.dispatch(
                                    Pt({
                                      text: "You are in the room!",
                                      timeout: 3e3
                                    })
                                  ), _3 = wr(f3);
                                  try {
                                    for (_3.s(); !(y3 = _3.n()).done; )
                                      b3 = y3.value, w3 = ft(
                                        br(
                                          br({}, b3),
                                          {},
                                          {
                                            consumers: [],
                                            dataConsumers: []
                                          }
                                        )
                                      ), kr.dispatch(w3), this._eventEmitter.emit(
                                        w3.type,
                                        w3.payload
                                      );
                                  } catch (e6) {
                                    _3.e(e6);
                                  } finally {
                                    _3.f();
                                  }
                                  this._produce && (kr.dispatch(
                                    rt({
                                      canSendMic: this._mediasoupDevice.canProduce(
                                        "audio"
                                      ),
                                      canSendWebcam: this._mediasoupDevice.canProduce(
                                        "video"
                                      )
                                    })
                                  ), this._micEnabled ? this.enableMic(
                                    this.customMicrophoneAudioTrack,
                                    this._joinSpan
                                  ) : this.customMicrophoneAudioTrack && (null === (S3 = this._openTelemetry) || void 0 === S3 || S3.traceAutoComplete({
                                    spanName: "Disposing Audio Track",
                                    span: this._joinSpan,
                                    status: 2
                                  }), this.customMicrophoneAudioTrack.getTracks().forEach(function(e6) {
                                    e6.stop();
                                  })), R3 = Qe(), this._webcamEnabled && (!R3 || R3.webcamEnabled || this._externalVideo) ? this.enableWebcam(
                                    this.customCameraVideoTrack,
                                    this._joinSpan
                                  ) : this.customCameraVideoTrack && (null === (k3 = this._openTelemetry) || void 0 === k3 || k3.traceAutoComplete({
                                    spanName: "Disposing Video Track",
                                    span: this._joinSpan,
                                    status: 2
                                  }), this.customCameraVideoTrack.getTracks().forEach(function(e6) {
                                    e6.stop();
                                  }))), window.SHOW_INFO && (E3 = kr.getState(), C3 = E3.me, kr.dispatch(tt(C3.id))), null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: this._joinSpan,
                                    status: 1,
                                    message: "Room Joined"
                                  }), e5.next = 46;
                                  break;
                                case 39:
                                  e5.prev = 39, e5.t0 = e5.catch(1), Dr.error("joinRoom() failed:%o", e5.t0), null === (T3 = this._videosdkLogs) || void 0 === T3 || T3.pushLogs({
                                    logText: "Error Could not join the room",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (P3 = this._openTelemetry) || void 0 === P3 || P3.completeSpan({
                                    span: this._joinSpan,
                                    status: 2,
                                    message: "Could not join the room ".concat(
                                      e5.t0
                                    )
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Could not join the room: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), this.close({ sendLeft: true });
                                case 46:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 39]]
                        );
                      })
                    ), function() {
                      return m2.apply(this, arguments);
                    })
                  },
                  {
                    key: "switchingRoom",
                    value: (h2 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3, _3, y3, b3;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return n4 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    name: "switchingRoom() start",
                                    attributes: {
                                      "room.id": t4,
                                      "peer.id": this._peerId,
                                      display_name: this._displayName
                                    }
                                  }), e5.prev = 1, d2 = null === (s2 = this._openTelemetry) || void 0 === s2 ? void 0 : s2.trace({
                                    name: "switch room join request",
                                    parentSpan: n4
                                  }), e5.next = 5, this._protoo.request("join", {
                                    displayName: this._displayName,
                                    device: this._device,
                                    secret: this._secret,
                                    rtpCapabilities: null === (i2 = this._mediasoupDevice) || void 0 === i2 ? void 0 : i2.rtpCapabilities,
                                    sctpCapabilities: null === (a2 = this._mediasoupDevice) || void 0 === a2 ? void 0 : a2.sctpCapabilities,
                                    deviceInfo: this._deviceInfo,
                                    debugMode: this._debugMode,
                                    autoConsume: this._autoConsume,
                                    metaData: this._metaData,
                                    switchingRoom: true
                                  });
                                case 5:
                                  l3 = e5.sent, p3 = l3.peers, h3 = l3.poll, m3 = l3.messages, null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: d2,
                                    status: 1,
                                    message: "Join request successful in switched room"
                                  }), kr.dispatch(Ze("connected")), this._eventEmitter.emit(
                                    "MEETING_JOINED",
                                    {
                                      switchRoomId: t4,
                                      peers: p3,
                                      poll: h3,
                                      messages: m3,
                                      baseUrl: this._baseUrl
                                    }
                                  ), kr.dispatch({
                                    type: "REMOVE_ALL_NOTIFICATIONS"
                                  }), kr.dispatch(
                                    Pt({
                                      text: "You are in the room!",
                                      timeout: 3e3
                                    })
                                  ), f3 = wr(p3);
                                  try {
                                    for (f3.s(); !(g3 = f3.n()).done; )
                                      v3 = g3.value, _3 = ft(
                                        br(
                                          br({}, v3),
                                          {},
                                          {
                                            consumers: [],
                                            dataConsumers: []
                                          }
                                        )
                                      ), kr.dispatch(_3), this._eventEmitter.emit(
                                        _3.type,
                                        _3.payload
                                      );
                                  } catch (e6) {
                                    f3.e(e6);
                                  } finally {
                                    f3.f();
                                  }
                                  null === (c2 = this._openTelemetry) || void 0 === c2 || c2.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "Room switch completed successfully"
                                  }), e5.next = 26;
                                  break;
                                case 19:
                                  e5.prev = 19, e5.t0 = e5.catch(1), Dr.error("joinRoom() failed:%o", e5.t0), null === (y3 = this._videosdkLogs) || void 0 === y3 || y3.pushLogs({
                                    logText: "Error Could not join the switched room",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (b3 = this._openTelemetry) || void 0 === b3 || b3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Room switch failed: ".concat(
                                      e5.t0.message
                                    )
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Could not join the switched room: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), this.close({ sendLeft: true });
                                case 26:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 19]]
                        );
                      })
                    ), function(e4) {
                      return h2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_updateMics",
                    value: (p2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3 = arguments;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = v3.length > 0 && void 0 !== v3[0] ? v3[0] : void 0, this._mics = /* @__PURE__ */ new Map(), Dr.debug("_updateMics() |"), n4 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "_updateMics() Calling for Getting System Mic list",
                                    span: r4 || null
                                  }), e5.prev = 4, e5.next = 7, navigator.mediaDevices.enumerateDevices();
                                case 7:
                                  a2 = e5.sent, null === (s2 = this._openTelemetry) || void 0 === s2 || s2.traceAutoComplete({
                                    spanName: "Getting System Mic list",
                                    span: n4,
                                    status: 1,
                                    attributes: {
                                      systemDevice: a2 ? JSON.stringify(a2) : "Device not found"
                                    }
                                  }), o2 = wr(a2);
                                  try {
                                    for (o2.s(); !(c2 = o2.n()).done; )
                                      "audioinput" == (d2 = c2.value).kind && this._mics.set(d2.deviceId, d2);
                                  } catch (e6) {
                                    o2.e(e6);
                                  } finally {
                                    o2.f();
                                  }
                                  l3 = Array.from(this._mics.values()), p3 = l3.length, h3 = this._mic.device ? this._mic.device.deviceId : void 0, 0 === p3 ? this._mic.device = null : this._mics.has(h3) || (this._mic.device = l3[0]), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "Update Mic"
                                  }), e5.next = 30;
                                  break;
                                case 18:
                                  if (e5.prev = 18, e5.t0 = e5.catch(4), !(e5.t0 instanceof TypeError)) {
                                    e5.next = 30;
                                    break;
                                  }
                                  if ("TypeError" !== e5.t0.name) {
                                    e5.next = 28;
                                    break;
                                  }
                                  throw f3 = It.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE, this._emitError(f3), null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Error in updateMics() :: ".concat(
                                      f3.message
                                    )
                                  }), new Error(f3.message);
                                case 28:
                                  throw null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Error in updateMics() :: ".concat(
                                      e5.t0.message
                                    )
                                  }), new Error(e5.t0.message);
                                case 30:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 18]]
                        );
                      })
                    ), function() {
                      return p2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_updateWebcams",
                    value: (l2 = (0, a.A)(
                      u().mark(function e4() {
                        var t4, r4, n4, s2, i2, a2, o2, c2, d2, l3, p3, h3, m3, f3, g3, v3 = arguments;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = v3.length > 0 && void 0 !== v3[0] ? v3[0] : void 0, Dr.debug("_updateWebcams()"), this._webcams = /* @__PURE__ */ new Map(), Dr.debug(
                                    "_updateWebcams() | calling enumerateDevices()"
                                  ), n4 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "_updateWebcams() Calling for Getting System Webcam list",
                                    span: r4 || null
                                  }), e5.prev = 5, e5.next = 8, navigator.mediaDevices.enumerateDevices();
                                case 8:
                                  a2 = e5.sent, null === (s2 = this._openTelemetry) || void 0 === s2 || s2.traceAutoComplete({
                                    spanName: "Getting System Webcam list",
                                    span: n4,
                                    status: 1,
                                    attributes: {
                                      systemDevice: a2 ? JSON.stringify(a2) : "Device not found"
                                    }
                                  }), o2 = wr(a2), e5.prev = 11, o2.s();
                                case 13:
                                  if ((c2 = o2.n()).done) {
                                    e5.next = 20;
                                    break;
                                  }
                                  if ("videoinput" === (d2 = c2.value).kind) {
                                    e5.next = 17;
                                    break;
                                  }
                                  return e5.abrupt("continue", 18);
                                case 17:
                                  this._webcams.set(d2.deviceId, d2);
                                case 18:
                                  e5.next = 13;
                                  break;
                                case 20:
                                  e5.next = 25;
                                  break;
                                case 22:
                                  e5.prev = 22, e5.t0 = e5.catch(11), o2.e(e5.t0);
                                case 25:
                                  return e5.prev = 25, o2.f(), e5.finish(25);
                                case 28:
                                  l3 = Array.from(this._webcams.values()), p3 = l3.length, (h3 = this._webcam.device ? this._webcam.device.deviceId : void 0) && (this._defaultCameraIndex = h3), Dr.debug(
                                    "_updateWebcams() [webcams:%o]",
                                    l3
                                  ), 0 === p3 ? this._webcam.device = null : this._webcams.has(h3) || (this._webcam.device = l3[this._defaultCameraIndex]), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: n4,
                                    status: 1,
                                    message: "Update Webcam"
                                  }), kr.dispatch({
                                    type: "SET_CAN_CHANGE_WEBCAM",
                                    payload: this._webcams.size > 1
                                  }), e5.next = 50;
                                  break;
                                case 38:
                                  if (e5.prev = 38, e5.t1 = e5.catch(5), !(e5.t1 instanceof TypeError)) {
                                    e5.next = 50;
                                    break;
                                  }
                                  if ("TypeError" !== e5.t1.name) {
                                    e5.next = 48;
                                    break;
                                  }
                                  throw f3 = It.q.ERROR_CAMERA_ACCESS_UNAVAILABLE, this._emitError(f3), null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Error in updateWebcams() :: ".concat(
                                      f3.message
                                    )
                                  }), new Error(f3.message);
                                case 48:
                                  throw null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: n4,
                                    status: 2,
                                    message: "Error in updateWebcams() :: ".concat(
                                      e5.t1.message
                                    )
                                  }), new Error(e5.t1.message);
                                case 50:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [5, 38],
                            [11, 22, 25, 28]
                          ]
                        );
                      })
                    ), function() {
                      return l2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_getWebcamType",
                    value: function(e4) {
                      return /(back|rear)/i.test(e4.label) ? (Dr.debug(
                        "_getWebcamType() | it seems to be a back camera"
                      ), "back") : (Dr.debug(
                        "_getWebcamType() | it seems to be a front camera"
                      ), "front");
                    }
                  },
                  {
                    key: "_pauseConsumer",
                    value: (n3 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!t4.paused) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return e5.prev = 2, e5.next = 5, this._socketRequest("pauseConsumer", {
                                    consumerId: t4.id
                                  });
                                case 5:
                                  t4.pause(), kr.dispatch(bt(t4.id, "local")), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(2), Dr.error(
                                    "_pauseConsumer() | failed:%o",
                                    e5.t0
                                  ), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error pausing Consumer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error pausing Consumer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 9]]
                        );
                      })
                    ), function(e4) {
                      return n3.apply(this, arguments);
                    })
                  },
                  {
                    key: "_resumeConsumer",
                    value: (r3 = (0, a.A)(
                      u().mark(function e4(t4) {
                        var r4;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (t4.paused) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return e5.prev = 2, e5.next = 5, this._socketRequest("resumeConsumer", {
                                    consumerId: t4.id
                                  });
                                case 5:
                                  t4.resume(), kr.dispatch(wt(t4.id, "local")), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(2), Dr.error(
                                    "_resumeConsumer() | failed:%o",
                                    e5.t0
                                  ), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error resuming Consumer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), kr.dispatch(
                                    Pt({
                                      type: "error",
                                      text: "Error resuming Consumer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 9]]
                        );
                      })
                    ), function(e4) {
                      return r3.apply(this, arguments);
                    })
                  },
                  {
                    key: "_getExternalVideoStream",
                    value: (t3 = (0, a.A)(
                      u().mark(function e4() {
                        var t4 = this;
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._externalVideoStream) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt(
                                    "return",
                                    this._externalVideoStream
                                  );
                                case 2:
                                  if (!(this._externalVideo.readyState < 3)) {
                                    e5.next = 5;
                                    break;
                                  }
                                  return e5.next = 5, new Promise(function(e6) {
                                    return t4._externalVideo.addEventListener(
                                      "canplay",
                                      e6
                                    );
                                  });
                                case 5:
                                  if (!this._externalVideo.captureStream) {
                                    e5.next = 9;
                                    break;
                                  }
                                  this._externalVideoStream = this._externalVideo.captureStream(), e5.next = 14;
                                  break;
                                case 9:
                                  if (!this._externalVideo.mozCaptureStream) {
                                    e5.next = 13;
                                    break;
                                  }
                                  this._externalVideoStream = this._externalVideo.mozCaptureStream(), e5.next = 14;
                                  break;
                                case 13:
                                  throw new Error(
                                    "video.captureStream() not supported"
                                  );
                                case 14:
                                  return e5.abrupt(
                                    "return",
                                    this._externalVideoStream
                                  );
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return t3.apply(this, arguments);
                    })
                  },
                  {
                    key: "toggleE2EEEnabled",
                    value: (e3 = (0, a.A)(
                      u().mark(function e4(t4) {
                        return u().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this.e2eeManager) {
                                    e5.next = 5;
                                    break;
                                  }
                                  this._peerId && this.e2eeManager.setParticipantCryptorEnabled(
                                    t4,
                                    this._peerId
                                  ), this.isE2EEEnabled = t4, e5.next = 6;
                                  break;
                                case 5:
                                  throw Error(
                                    "e2ee not configured, please set e2ee settings within the room options"
                                  );
                                case 6:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(t4) {
                      return e3.apply(this, arguments);
                    })
                  },
                  {
                    key: "_emitError",
                    value: function(e4) {
                      this._eventEmitter.emit("ERROR", e4);
                    }
                  }
                ],
                [
                  {
                    key: "init",
                    value: function(e4) {
                      kr = e4.store;
                    }
                  }
                ]
              );
              var e3, t3, r3, n3, l2, p2, h2, m2, f2, g2, v2, _2, y2, b2, w2, S2, R2, k2, E2, C2, T2, P2, O2, x2, D2, I2, A2, M2, L2, N2, j2, B2, F2, U2, W2, q2, V2, H2, z2, G2, K2, $2, J2, Q2, Y2, X2, Z2, ee2, te2, re2, ne2, se2, ie2, ae2, oe2, ce2, de2, le2, ue2, pe2, he2, me2, fe2, ge2, ve2, _e2, ye2, be2, we2, Se2, Re2, ke2, Ee2, Ce2, Te2, Pe2, Oe2, xe2, De2, Ie2, Le2, Ne2, je2, Be2, Fe2, Ue2, We2, Ve2, He2, ze2, Ge2, Ke2, $e2, Ye2, Xe2, Ut2, Wt2, qt2, Vt2, Ht2, zt2, Kt2, $t2, Yt2, Xt2, Zt2, er2, tr2, rr2, nr2, sr2;
            }();
            function Mr(e3) {
              return Lr.apply(this, arguments);
            }
            function Lr() {
              return (Lr = (0, a.A)(
                u().mark(function e3(t3) {
                  var r3, n3 = this;
                  return u().wrap(
                    function(e4) {
                      for (; ; )
                        switch (e4.prev = e4.next) {
                          case 0:
                            if (e4.prev = 0, this.e2eeManager) {
                              e4.next = 13;
                              break;
                            }
                            return e4.t0 = fr, e4.t1 = t3, e4.next = 6, gr();
                          case 6:
                            e4.t2 = e4.sent, e4.t3 = { keyProvider: e4.t1, worker: e4.t2 }, this.e2eeManager = new e4.t0(e4.t3), this.e2eeManager.on(
                              dr.KS.ParticipantEncryptionStatusChanged,
                              function(e5) {
                                n3.isE2EEEnabled = e5;
                              }
                            ), this.e2eeManager.on(
                              dr.KS.E2EEStateChange,
                              function(e5) {
                                n3._eventEmitter.emit("E2EE_STATE_CHANGE", e5);
                              }
                            ), null === (r3 = this.e2eeManager) || void 0 === r3 || r3.setup(this), this.toggleE2EEEnabled(true);
                          case 13:
                            e4.next = 19;
                            break;
                          case 15:
                            throw e4.prev = 15, e4.t4 = e4.catch(0), console.error("Error setting up E2EE: ", e4.t4), new Error("Error setting up E2EE: " + e4.t4.message);
                          case 19:
                          case "end":
                            return e4.stop();
                        }
                    },
                    e3,
                    this,
                    [[0, 15]]
                  );
                })
              )).apply(this, arguments);
            }
          },
          2010: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.EnhancedEventEmitter = void 0;
            const n2 = r2(7007), s = new (r2(2994)).Logger("EnhancedEventEmitter");
            class i extends n2.EventEmitter {
              constructor() {
                super(), this.setMaxListeners(1 / 0);
              }
              emit(e3, ...t3) {
                return super.emit(e3, ...t3);
              }
              safeEmit(e3, ...t3) {
                const r3 = super.listenerCount(e3);
                try {
                  return super.emit(e3, ...t3);
                } catch (t4) {
                  return s.error(
                    "safeEmit() | event listener threw an error [eventName:%s]:%o",
                    e3,
                    t4
                  ), Boolean(r3);
                }
              }
              on(e3, t3) {
                return super.on(e3, t3), this;
              }
              off(e3, t3) {
                return super.off(e3, t3), this;
              }
              addListener(e3, t3) {
                return super.on(e3, t3), this;
              }
              prependListener(e3, t3) {
                return super.prependListener(e3, t3), this;
              }
              once(e3, t3) {
                return super.once(e3, t3), this;
              }
              prependOnceListener(e3, t3) {
                return super.prependOnceListener(e3, t3), this;
              }
              removeListener(e3, t3) {
                return super.off(e3, t3), this;
              }
              removeAllListeners(e3) {
                return super.removeAllListeners(e3), this;
              }
              listenerCount(e3) {
                return super.listenerCount(e3);
              }
              listeners(e3) {
                return super.listeners(e3);
              }
              rawListeners(e3) {
                return super.rawListeners(e3);
              }
            }
            t2.EnhancedEventEmitter = i;
          },
          2073: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(7165), n2.pad.AnsiX923 = {
              pad: function(e3, t3) {
                var r3 = e3.sigBytes, n3 = 4 * t3, s = n3 - r3 % n3, i = r3 + s - 1;
                e3.clamp(), e3.words[i >>> 2] |= s << 24 - i % 4 * 8, e3.sigBytes += s;
              },
              unpad: function(e3) {
                var t3 = 255 & e3.words[e3.sigBytes - 1 >>> 2];
                e3.sigBytes -= t3;
              }
            }, n2.pad.Ansix923);
          },
          2107: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { kR: () => s, nI: () => n2, wZ: () => i });
            var n2 = {
              CONFERENCE: "CONFERENCE",
              VIEWER: "VIEWER",
              SEND_AND_RECV: "SEND_AND_RECV",
              SIGNALLING_ONLY: "SIGNALLING_ONLY",
              RECV_ONLY: "RECV_ONLY"
            };
            function s(e3) {
              return e3 === n2.CONFERENCE || e3 === n2.SEND_AND_RECV;
            }
            function i(e3) {
              return e3 === n2.VIEWER || e3 === n2.SIGNALLING_ONLY;
            }
          },
          2155: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(7165), n2.pad.ZeroPadding = {
              pad: function(e3, t3) {
                var r3 = 4 * t3;
                e3.clamp(), e3.sigBytes += r3 - (e3.sigBytes % r3 || r3);
              },
              unpad: function(e3) {
                var t3 = e3.words, r3 = e3.sigBytes - 1;
                for (r3 = e3.sigBytes - 1; r3 >= 0; r3--)
                  if (t3[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255) {
                    e3.sigBytes = r3 + 1;
                    break;
                  }
              }
            }, n2.pad.ZeroPadding);
          },
          2169: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(7165), n2.mode.CFB = function() {
              var e3 = n2.lib.BlockCipherMode.extend();
              function t3(e4, t4, r3, n3) {
                var s, i = this._iv;
                i ? (s = i.slice(0), this._iv = void 0) : s = this._prevBlock, n3.encryptBlock(s, 0);
                for (var a = 0; a < r3; a++) e4[t4 + a] ^= s[a];
              }
              return e3.Encryptor = e3.extend({
                processBlock: function(e4, r3) {
                  var n3 = this._cipher, s = n3.blockSize;
                  t3.call(this, e4, r3, s, n3), this._prevBlock = e4.slice(r3, r3 + s);
                }
              }), e3.Decryptor = e3.extend({
                processBlock: function(e4, r3) {
                  var n3 = this._cipher, s = n3.blockSize, i = e4.slice(r3, r3 + s);
                  t3.call(this, e4, r3, s, n3), this._prevBlock = i;
                }
              }), e3;
            }(), n2.mode.CFB);
          },
          2183: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome111 = void 0;
            const a = i(r2(7363)), o = r2(2994), c = i(r2(1765)), d = i(r2(8046)), l = i(r2(5544)), u = i(r2(5938)), p = i(r2(4256)), h = r2(4893), m = r2(521), f = r2(1305), g = r2(3303), v = new o.Logger("Chrome111"), _ = { OS: 1024, MIS: 1024 };
            class y extends m.HandlerInterface {
              static createFactory() {
                return () => new y();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome111";
              }
              close() {
                if (v.debug("close()"), !this._closed) {
                  if (this._closed = true, this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                v.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = a.parse(t3.sdp), n3 = l.extractRtpCapabilities({ sdpObject: r3 });
                  return p.addNackSuppportForOpus(n3), n3;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return v.debug("getNativeSctpCapabilities()"), { numStreams: _ };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                this.assertNotClosed(), v.debug("run()"), this._direction = e3, this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, n3.role && "auto" !== n3.role && (this._forcedLocalDtlsRole = "server" === n3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : (v.warn(
                  "run() | pc.connectionState not supported, using pc.iceConnectionState"
                ), this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                ));
              }
              async updateIceServers(e3) {
                this.assertNotClosed(), v.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), v.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    v.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    v.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    v.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    v.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                if (this.assertNotClosed(), this.assertSendDirection(), v.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1) {
                  let e4 = 1;
                  for (const r4 of t3) {
                    const t4 = r4.scalabilityMode ? (0, g.parse)(r4.scalabilityMode).temporalLayers : 3;
                    t4 > e4 && (e4 = t4);
                  }
                  t3.forEach((t4, r4) => {
                    t4.rid = `r${r4}`, t4.scalabilityMode = `L1T${e4}`;
                  });
                }
                const s2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, n3);
                const i2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                i2.codecs = d.reduceCodecs(i2.codecs, n3);
                const o2 = this._remoteSdp.getNextMediaSectionIdx(), p2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                }), h2 = await this._pc.createOffer();
                let m2 = a.parse(h2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: m2
                }), v.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  h2
                ), await this._pc.setLocalDescription(h2);
                const f2 = p2.mid;
                s2.mid = f2, m2 = a.parse(this._pc.localDescription.sdp);
                const _2 = m2.media[o2.idx];
                if (s2.rtcp.cname = l.getCname({ offerMediaObject: _2 }), t3)
                  if (1 === t3.length) {
                    const e4 = u.getRtpEncodings({ offerMediaObject: _2 });
                    Object.assign(e4[0], t3[0]), s2.encodings = e4;
                  } else s2.encodings = t3;
                else s2.encodings = u.getRtpEncodings({ offerMediaObject: _2 });
                this._remoteSdp.send({
                  offerMediaObject: _2,
                  reuseMid: o2.reuseMid,
                  offerRtpParameters: s2,
                  answerRtpParameters: i2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const y2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return v.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y2
                ), await this._pc.setRemoteDescription(y2), this._mapMidTransceiver.set(f2, p2), { localId: f2, rtpParameters: s2, rtpSender: p2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), v.debug("stopSending() [localId:%s]", e3), this._closed)
                  return;
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                v.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                v.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (this._remoteSdp.resumeSendingMediaSection(e3), !t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly";
                const r3 = await this._pc.createOffer();
                v.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? v.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : v.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                v.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  n3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                v.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                v.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % _.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), v.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: n4,
                    rtpParameters: s3,
                    streamId: i3
                  } = t4;
                  v.debug("receive() [trackId:%s, kind:%s]", e4, n4);
                  const a2 = s3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, a2), this._remoteSdp.receive({
                    mid: a2,
                    kind: n4,
                    offerRtpParameters: s3,
                    streamId: i3 || s3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
                let s2 = await this._pc.createAnswer();
                const i2 = a.parse(s2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: n4 } = t4, s3 = r3.get(e4), a2 = i2.media.find((e5) => String(e5.mid) === s3);
                  l.applyCodecParameters({
                    offerRtpParameters: n4,
                    answerMediaObject: a2
                  });
                }
                s2 = { type: "answer", sdp: a.write(i2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: i2
                }), v.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                for (const n4 of e3) {
                  const { trackId: e4 } = n4, s3 = r3.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === s3);
                  if (!i3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(s3, i3), t3.push({
                    localId: s3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  v.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  v.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  v.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                v.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  v.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new h.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome111 = y;
          },
          2211: (e2) => {
            "use strict";
            e2.exports = function(e3) {
              var t2, r2, n2 = "", s = (e3 = function(e4) {
                return e4 || (e4 = {}), {
                  length: e4.length || 8,
                  numeric: "boolean" != typeof e4.numeric || e4.numeric,
                  letters: "boolean" != typeof e4.letters || e4.letters,
                  special: "boolean" == typeof e4.special && e4.special,
                  exclude: Array.isArray(e4.exclude) ? e4.exclude : []
                };
              }(e3)).length, i = (e3.exclude, function(e4) {
                var t3 = "";
                e4.numeric && (t3 += "0123456789"), e4.letters && (t3 += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"), e4.special && (t3 += "!$%^&*()_+|~-=`{}[]:;<>?,./");
                for (var r3 = 0; r3 <= e4.exclude.length; r3++)
                  t3 = t3.replace(e4.exclude[r3], "");
                return t3;
              }(e3));
              for (t2 = 1; t2 <= s; t2++)
                n2 += i.substring(
                  r2 = Math.floor(Math.random() * i.length),
                  r2 + 1
                );
              return n2;
            };
          },
          2215: (e2, t2, r2) => {
            var n2, s;
            !function(i) {
              if (void 0 === (s = "function" == typeof (n2 = i) ? n2.call(t2, r2, t2, e2) : n2) || (e2.exports = s), e2.exports = i(), false) {
                var a = window.Cookies, o = window.Cookies = i();
                o.noConflict = function() {
                  return window.Cookies = a, o;
                };
              }
            }(function() {
              function e3() {
                for (var e4 = 0, t4 = {}; e4 < arguments.length; e4++) {
                  var r3 = arguments[e4];
                  for (var n3 in r3) t4[n3] = r3[n3];
                }
                return t4;
              }
              function t3(e4) {
                return e4.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
              }
              return function r3(n3) {
                function s2() {
                }
                function i(t4, r4, i2) {
                  if ("undefined" != typeof document) {
                    "number" == typeof (i2 = e3({ path: "/" }, s2.defaults, i2)).expires && (i2.expires = new Date(1 * /* @__PURE__ */ new Date() + 864e5 * i2.expires)), i2.expires = i2.expires ? i2.expires.toUTCString() : "";
                    try {
                      var a2 = JSON.stringify(r4);
                      /^[\{\[]/.test(a2) && (r4 = a2);
                    } catch (e4) {
                    }
                    r4 = n3.write ? n3.write(r4, t4) : encodeURIComponent(String(r4)).replace(
                      /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
                      decodeURIComponent
                    ), t4 = encodeURIComponent(String(t4)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
                    var o = "";
                    for (var c in i2)
                      i2[c] && (o += "; " + c, true !== i2[c] && (o += "=" + i2[c].split(";")[0]));
                    return document.cookie = t4 + "=" + r4 + o;
                  }
                }
                function a(e4, r4) {
                  if ("undefined" != typeof document) {
                    for (var s3 = {}, i2 = document.cookie ? document.cookie.split("; ") : [], a2 = 0; a2 < i2.length; a2++) {
                      var o = i2[a2].split("="), c = o.slice(1).join("=");
                      r4 || '"' !== c.charAt(0) || (c = c.slice(1, -1));
                      try {
                        var d = t3(o[0]);
                        if (c = (n3.read || n3)(c, d) || t3(c), r4)
                          try {
                            c = JSON.parse(c);
                          } catch (e5) {
                          }
                        if (s3[d] = c, e4 === d) break;
                      } catch (e5) {
                      }
                    }
                    return e4 ? s3[e4] : s3;
                  }
                }
                return s2.set = i, s2.get = function(e4) {
                  return a(e4, false);
                }, s2.getJSON = function(e4) {
                  return a(e4, true);
                }, s2.remove = function(t4, r4) {
                  i(t4, "", e3(r4, { expires: -1 }));
                }, s2.defaults = {}, s2.withConverter = r3, s2;
              }(function() {
              });
            });
          },
          2284: (e2, t2, r2) => {
            "use strict";
            function n2(e3) {
              return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
                return typeof e4;
              } : function(e4) {
                return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
              }, n2(e3);
            }
            r2.d(t2, { A: () => n2 });
          },
          2292: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Firefox120 = void 0;
            const a = i(r2(7363)), o = r2(2994), c = r2(4893), d = i(r2(1765)), l = i(r2(8046)), u = i(r2(5544)), p = i(r2(5938)), h = r2(521), m = r2(1305), f = r2(3303), g = new o.Logger("Firefox120"), v = { OS: 16, MIS: 2048 };
            class _ extends h.HandlerInterface {
              static createFactory() {
                return () => new _();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Firefox120";
              }
              close() {
                if (g.debug("close()"), !this._closed) {
                  if (this._closed = true, this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                g.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require"
                }), t3 = document.createElement("canvas");
                t3.getContext("2d");
                const r3 = t3.captureStream().getVideoTracks()[0];
                try {
                  e3.addTransceiver("audio", { direction: "sendrecv" }), e3.addTransceiver(r3, {
                    direction: "sendrecv",
                    sendEncodings: [
                      { rid: "r0", maxBitrate: 1e5 },
                      { rid: "r1", maxBitrate: 5e5 }
                    ]
                  });
                  const n3 = await e3.createOffer();
                  try {
                    t3.remove();
                  } catch (e4) {
                  }
                  try {
                    r3.stop();
                  } catch (e4) {
                  }
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const s2 = a.parse(n3.sdp);
                  return u.extractRtpCapabilities({ sdpObject: s2 });
                } catch (n3) {
                  try {
                    t3.remove();
                  } catch (e4) {
                  }
                  try {
                    r3.stop();
                  } catch (e4) {
                  }
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw n3;
                }
              }
              async getNativeSctpCapabilities() {
                return g.debug("getNativeSctpCapabilities()"), { numStreams: v };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                this.assertNotClosed(), g.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2
                }), this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d2),
                  video: l.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d2),
                  video: l.getSendingRemoteRtpParameters("video", d2)
                }, this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (g.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                throw this.assertNotClosed(), new c.UnsupportedError("not supported");
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), g.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    g.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    g.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    g.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    g.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1 && t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                });
                const s2 = d.clone(this._sendingRtpParametersByKind[e3.kind]);
                s2.codecs = l.reduceCodecs(s2.codecs, n3);
                const i2 = d.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                i2.codecs = l.reduceCodecs(i2.codecs, n3);
                const o2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                }), c2 = await this._pc.createOffer();
                let h2 = a.parse(c2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h2
                });
                const m2 = (0, f.parse)((t3 || [{}])[0].scalabilityMode);
                g.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  c2
                ), await this._pc.setLocalDescription(c2);
                const v2 = o2.mid;
                s2.mid = v2, h2 = a.parse(this._pc.localDescription.sdp);
                const _2 = h2.media[h2.media.length - 1];
                if (s2.rtcp.cname = u.getCname({ offerMediaObject: _2 }), t3)
                  if (1 === t3.length) {
                    const e4 = p.getRtpEncodings({ offerMediaObject: _2 });
                    Object.assign(e4[0], t3[0]), s2.encodings = e4;
                  } else s2.encodings = t3;
                else s2.encodings = p.getRtpEncodings({ offerMediaObject: _2 });
                if (s2.encodings.length > 1 && ("video/vp8" === s2.codecs[0].mimeType.toLowerCase() || "video/h264" === s2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of s2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${m2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: _2,
                  offerRtpParameters: s2,
                  answerRtpParameters: i2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const y = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return g.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y
                ), await this._pc.setRemoteDescription(y), this._mapMidTransceiver.set(v2, o2), { localId: v2, rtpParameters: s2, rtpSender: o2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), g.debug("stopSending() [localId:%s]", e3), this._closed)
                  return;
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated transceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender), this._remoteSdp.disableMediaSection(t3.mid);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly", this._remoteSdp.resumeSendingMediaSection(e3);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? g.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : g.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated transceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                g.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  n3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                g.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                g.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % v.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t4
                  }), g.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: n4,
                    rtpParameters: s3,
                    streamId: i3
                  } = t4;
                  g.debug("receive() [trackId:%s, kind:%s]", e4, n4);
                  const a2 = s3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, a2), this._remoteSdp.receive({
                    mid: a2,
                    kind: n4,
                    offerRtpParameters: s3,
                    streamId: i3 || s3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
                let s2 = await this._pc.createAnswer();
                const i2 = a.parse(s2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: n4 } = t4, o2 = r3.get(e4), c2 = i2.media.find((e5) => String(e5.mid) === o2);
                  u.applyCodecParameters({
                    offerRtpParameters: n4,
                    answerMediaObject: c2
                  }), s2 = { type: "answer", sdp: a.write(i2) };
                }
                this._transportReady || await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: i2
                }), g.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                for (const n4 of e3) {
                  const { trackId: e4 } = n4, s3 = r3.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === s3);
                  if (!i3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(s3, i3), t3.push({
                    localId: s3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  g.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  g.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  g.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                g.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: "client",
                      localSdpObject: e5
                    });
                  }
                  g.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = u.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new c.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Firefox120 = _;
          },
          2696: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = n2, t3 = e3.lib.StreamCipher, r3 = e3.algo, s = [], i = [], a = [], o = r3.RabbitLegacy = t3.extend({
                _doReset: function() {
                  var e4 = this._key.words, t4 = this.cfg.iv, r4 = this._X = [
                    e4[0],
                    e4[3] << 16 | e4[2] >>> 16,
                    e4[1],
                    e4[0] << 16 | e4[3] >>> 16,
                    e4[2],
                    e4[1] << 16 | e4[0] >>> 16,
                    e4[3],
                    e4[2] << 16 | e4[1] >>> 16
                  ], n3 = this._C = [
                    e4[2] << 16 | e4[2] >>> 16,
                    4294901760 & e4[0] | 65535 & e4[1],
                    e4[3] << 16 | e4[3] >>> 16,
                    4294901760 & e4[1] | 65535 & e4[2],
                    e4[0] << 16 | e4[0] >>> 16,
                    4294901760 & e4[2] | 65535 & e4[3],
                    e4[1] << 16 | e4[1] >>> 16,
                    4294901760 & e4[3] | 65535 & e4[0]
                  ];
                  this._b = 0;
                  for (var s2 = 0; s2 < 4; s2++) c.call(this);
                  for (s2 = 0; s2 < 8; s2++) n3[s2] ^= r4[s2 + 4 & 7];
                  if (t4) {
                    var i2 = t4.words, a2 = i2[0], o2 = i2[1], d = 16711935 & (a2 << 8 | a2 >>> 24) | 4278255360 & (a2 << 24 | a2 >>> 8), l = 16711935 & (o2 << 8 | o2 >>> 24) | 4278255360 & (o2 << 24 | o2 >>> 8), u = d >>> 16 | 4294901760 & l, p = l << 16 | 65535 & d;
                    for (n3[0] ^= d, n3[1] ^= u, n3[2] ^= l, n3[3] ^= p, n3[4] ^= d, n3[5] ^= u, n3[6] ^= l, n3[7] ^= p, s2 = 0; s2 < 4; s2++)
                      c.call(this);
                  }
                },
                _doProcessBlock: function(e4, t4) {
                  var r4 = this._X;
                  c.call(this), s[0] = r4[0] ^ r4[5] >>> 16 ^ r4[3] << 16, s[1] = r4[2] ^ r4[7] >>> 16 ^ r4[5] << 16, s[2] = r4[4] ^ r4[1] >>> 16 ^ r4[7] << 16, s[3] = r4[6] ^ r4[3] >>> 16 ^ r4[1] << 16;
                  for (var n3 = 0; n3 < 4; n3++)
                    s[n3] = 16711935 & (s[n3] << 8 | s[n3] >>> 24) | 4278255360 & (s[n3] << 24 | s[n3] >>> 8), e4[t4 + n3] ^= s[n3];
                },
                blockSize: 4,
                ivSize: 2
              });
              function c() {
                for (var e4 = this._X, t4 = this._C, r4 = 0; r4 < 8; r4++)
                  i[r4] = t4[r4];
                for (t4[0] = t4[0] + 1295307597 + this._b | 0, t4[1] = t4[1] + 3545052371 + (t4[0] >>> 0 < i[0] >>> 0 ? 1 : 0) | 0, t4[2] = t4[2] + 886263092 + (t4[1] >>> 0 < i[1] >>> 0 ? 1 : 0) | 0, t4[3] = t4[3] + 1295307597 + (t4[2] >>> 0 < i[2] >>> 0 ? 1 : 0) | 0, t4[4] = t4[4] + 3545052371 + (t4[3] >>> 0 < i[3] >>> 0 ? 1 : 0) | 0, t4[5] = t4[5] + 886263092 + (t4[4] >>> 0 < i[4] >>> 0 ? 1 : 0) | 0, t4[6] = t4[6] + 1295307597 + (t4[5] >>> 0 < i[5] >>> 0 ? 1 : 0) | 0, t4[7] = t4[7] + 3545052371 + (t4[6] >>> 0 < i[6] >>> 0 ? 1 : 0) | 0, this._b = t4[7] >>> 0 < i[7] >>> 0 ? 1 : 0, r4 = 0; r4 < 8; r4++) {
                  var n3 = e4[r4] + t4[r4], s2 = 65535 & n3, o2 = n3 >>> 16, c2 = ((s2 * s2 >>> 17) + s2 * o2 >>> 15) + o2 * o2, d = ((4294901760 & n3) * n3 | 0) + ((65535 & n3) * n3 | 0);
                  a[r4] = c2 ^ d;
                }
                e4[0] = a[0] + (a[7] << 16 | a[7] >>> 16) + (a[6] << 16 | a[6] >>> 16) | 0, e4[1] = a[1] + (a[0] << 8 | a[0] >>> 24) + a[7] | 0, e4[2] = a[2] + (a[1] << 16 | a[1] >>> 16) + (a[0] << 16 | a[0] >>> 16) | 0, e4[3] = a[3] + (a[2] << 8 | a[2] >>> 24) + a[1] | 0, e4[4] = a[4] + (a[3] << 16 | a[3] >>> 16) + (a[2] << 16 | a[2] >>> 16) | 0, e4[5] = a[5] + (a[4] << 8 | a[4] >>> 24) + a[3] | 0, e4[6] = a[6] + (a[5] << 16 | a[5] >>> 16) + (a[4] << 16 | a[4] >>> 16) | 0, e4[7] = a[7] + (a[6] << 8 | a[6] >>> 24) + a[5] | 0;
              }
              e3.RabbitLegacy = t3._createHelper(o);
            }(), n2.RabbitLegacy);
          },
          2901: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => i });
            var n2 = r2(816);
            function s(e3, t3) {
              for (var r3 = 0; r3 < t3.length; r3++) {
                var s2 = t3[r3];
                s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(e3, (0, n2.A)(s2.key), s2);
              }
            }
            function i(e3, t3, r3) {
              return t3 && s(e3.prototype, t3), r3 && s(e3, r3), Object.defineProperty(e3, "prototype", { writable: false }), e3;
            }
          },
          2994: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Logger = void 0;
            const s = n2(r2(7833)), i = "mediasoup-client";
            t2.Logger = class {
              constructor(e3) {
                e3 ? (this._debug = (0, s.default)(`${i}:${e3}`), this._warn = (0, s.default)(`${i}:WARN:${e3}`), this._error = (0, s.default)(`${i}:ERROR:${e3}`)) : (this._debug = (0, s.default)(i), this._warn = (0, s.default)(`${i}:WARN`), this._error = (0, s.default)(`${i}:ERROR`)), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              get debug() {
                return this._debug;
              }
              get warn() {
                return this._warn;
              }
              get error() {
                return this._error;
              }
            };
          },
          3009: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), function(e3) {
              var t3 = n2, r3 = t3.lib, s = r3.WordArray, i = r3.Hasher, a = t3.algo, o = [], c = [];
              !function() {
                function t4(t5) {
                  for (var r5 = e3.sqrt(t5), n4 = 2; n4 <= r5; n4++)
                    if (!(t5 % n4)) return false;
                  return true;
                }
                function r4(e4) {
                  return 4294967296 * (e4 - (0 | e4)) | 0;
                }
                for (var n3 = 2, s2 = 0; s2 < 64; )
                  t4(n3) && (s2 < 8 && (o[s2] = r4(e3.pow(n3, 0.5))), c[s2] = r4(e3.pow(n3, 1 / 3)), s2++), n3++;
              }();
              var d = [], l = a.SHA256 = i.extend({
                _doReset: function() {
                  this._hash = new s.init(o.slice(0));
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = this._hash.words, n3 = r4[0], s2 = r4[1], i2 = r4[2], a2 = r4[3], o2 = r4[4], l2 = r4[5], u = r4[6], p = r4[7], h = 0; h < 64; h++) {
                    if (h < 16) d[h] = 0 | e4[t4 + h];
                    else {
                      var m = d[h - 15], f = (m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3, g = d[h - 2], v = (g << 15 | g >>> 17) ^ (g << 13 | g >>> 19) ^ g >>> 10;
                      d[h] = f + d[h - 7] + v + d[h - 16];
                    }
                    var _ = n3 & s2 ^ n3 & i2 ^ s2 & i2, y = (n3 << 30 | n3 >>> 2) ^ (n3 << 19 | n3 >>> 13) ^ (n3 << 10 | n3 >>> 22), b = p + ((o2 << 26 | o2 >>> 6) ^ (o2 << 21 | o2 >>> 11) ^ (o2 << 7 | o2 >>> 25)) + (o2 & l2 ^ ~o2 & u) + c[h] + d[h];
                    p = u, u = l2, l2 = o2, o2 = a2 + b | 0, a2 = i2, i2 = s2, s2 = n3, n3 = b + (y + _) | 0;
                  }
                  r4[0] = r4[0] + n3 | 0, r4[1] = r4[1] + s2 | 0, r4[2] = r4[2] + i2 | 0, r4[3] = r4[3] + a2 | 0, r4[4] = r4[4] + o2 | 0, r4[5] = r4[5] + l2 | 0, r4[6] = r4[6] + u | 0, r4[7] = r4[7] + p | 0;
                },
                _doFinalize: function() {
                  var t4 = this._data, r4 = t4.words, n3 = 8 * this._nDataBytes, s2 = 8 * t4.sigBytes;
                  return r4[s2 >>> 5] |= 128 << 24 - s2 % 32, r4[14 + (s2 + 64 >>> 9 << 4)] = e3.floor(
                    n3 / 4294967296
                  ), r4[15 + (s2 + 64 >>> 9 << 4)] = n3, t4.sigBytes = 4 * r4.length, this._process(), this._hash;
                },
                clone: function() {
                  var e4 = i.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                }
              });
              t3.SHA256 = i._createHelper(l), t3.HmacSHA256 = i._createHmacHelper(l);
            }(Math), n2.SHA256);
          },
          3029: (e2, t2, r2) => {
            "use strict";
            function n2(e3, t3) {
              if (!(e3 instanceof t3))
                throw new TypeError("Cannot call a class as a function");
            }
            r2.d(t2, { A: () => n2 });
          },
          3128: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = n2, t3 = e3.lib.BlockCipher, r3 = e3.algo;
              const s = 16, i = [
                608135816,
                2242054355,
                320440878,
                57701188,
                2752067618,
                698298832,
                137296536,
                3964562569,
                1160258022,
                953160567,
                3193202383,
                887688300,
                3232508343,
                3380367581,
                1065670069,
                3041331479,
                2450970073,
                2306472731
              ], a = [
                [
                  3509652390,
                  2564797868,
                  805139163,
                  3491422135,
                  3101798381,
                  1780907670,
                  3128725573,
                  4046225305,
                  614570311,
                  3012652279,
                  134345442,
                  2240740374,
                  1667834072,
                  1901547113,
                  2757295779,
                  4103290238,
                  227898511,
                  1921955416,
                  1904987480,
                  2182433518,
                  2069144605,
                  3260701109,
                  2620446009,
                  720527379,
                  3318853667,
                  677414384,
                  3393288472,
                  3101374703,
                  2390351024,
                  1614419982,
                  1822297739,
                  2954791486,
                  3608508353,
                  3174124327,
                  2024746970,
                  1432378464,
                  3864339955,
                  2857741204,
                  1464375394,
                  1676153920,
                  1439316330,
                  715854006,
                  3033291828,
                  289532110,
                  2706671279,
                  2087905683,
                  3018724369,
                  1668267050,
                  732546397,
                  1947742710,
                  3462151702,
                  2609353502,
                  2950085171,
                  1814351708,
                  2050118529,
                  680887927,
                  999245976,
                  1800124847,
                  3300911131,
                  1713906067,
                  1641548236,
                  4213287313,
                  1216130144,
                  1575780402,
                  4018429277,
                  3917837745,
                  3693486850,
                  3949271944,
                  596196993,
                  3549867205,
                  258830323,
                  2213823033,
                  772490370,
                  2760122372,
                  1774776394,
                  2652871518,
                  566650946,
                  4142492826,
                  1728879713,
                  2882767088,
                  1783734482,
                  3629395816,
                  2517608232,
                  2874225571,
                  1861159788,
                  326777828,
                  3124490320,
                  2130389656,
                  2716951837,
                  967770486,
                  1724537150,
                  2185432712,
                  2364442137,
                  1164943284,
                  2105845187,
                  998989502,
                  3765401048,
                  2244026483,
                  1075463327,
                  1455516326,
                  1322494562,
                  910128902,
                  469688178,
                  1117454909,
                  936433444,
                  3490320968,
                  3675253459,
                  1240580251,
                  122909385,
                  2157517691,
                  634681816,
                  4142456567,
                  3825094682,
                  3061402683,
                  2540495037,
                  79693498,
                  3249098678,
                  1084186820,
                  1583128258,
                  426386531,
                  1761308591,
                  1047286709,
                  322548459,
                  995290223,
                  1845252383,
                  2603652396,
                  3431023940,
                  2942221577,
                  3202600964,
                  3727903485,
                  1712269319,
                  422464435,
                  3234572375,
                  1170764815,
                  3523960633,
                  3117677531,
                  1434042557,
                  442511882,
                  3600875718,
                  1076654713,
                  1738483198,
                  4213154764,
                  2393238008,
                  3677496056,
                  1014306527,
                  4251020053,
                  793779912,
                  2902807211,
                  842905082,
                  4246964064,
                  1395751752,
                  1040244610,
                  2656851899,
                  3396308128,
                  445077038,
                  3742853595,
                  3577915638,
                  679411651,
                  2892444358,
                  2354009459,
                  1767581616,
                  3150600392,
                  3791627101,
                  3102740896,
                  284835224,
                  4246832056,
                  1258075500,
                  768725851,
                  2589189241,
                  3069724005,
                  3532540348,
                  1274779536,
                  3789419226,
                  2764799539,
                  1660621633,
                  3471099624,
                  4011903706,
                  913787905,
                  3497959166,
                  737222580,
                  2514213453,
                  2928710040,
                  3937242737,
                  1804850592,
                  3499020752,
                  2949064160,
                  2386320175,
                  2390070455,
                  2415321851,
                  4061277028,
                  2290661394,
                  2416832540,
                  1336762016,
                  1754252060,
                  3520065937,
                  3014181293,
                  791618072,
                  3188594551,
                  3933548030,
                  2332172193,
                  3852520463,
                  3043980520,
                  413987798,
                  3465142937,
                  3030929376,
                  4245938359,
                  2093235073,
                  3534596313,
                  375366246,
                  2157278981,
                  2479649556,
                  555357303,
                  3870105701,
                  2008414854,
                  3344188149,
                  4221384143,
                  3956125452,
                  2067696032,
                  3594591187,
                  2921233993,
                  2428461,
                  544322398,
                  577241275,
                  1471733935,
                  610547355,
                  4027169054,
                  1432588573,
                  1507829418,
                  2025931657,
                  3646575487,
                  545086370,
                  48609733,
                  2200306550,
                  1653985193,
                  298326376,
                  1316178497,
                  3007786442,
                  2064951626,
                  458293330,
                  2589141269,
                  3591329599,
                  3164325604,
                  727753846,
                  2179363840,
                  146436021,
                  1461446943,
                  4069977195,
                  705550613,
                  3059967265,
                  3887724982,
                  4281599278,
                  3313849956,
                  1404054877,
                  2845806497,
                  146425753,
                  1854211946
                ],
                [
                  1266315497,
                  3048417604,
                  3681880366,
                  3289982499,
                  290971e4,
                  1235738493,
                  2632868024,
                  2414719590,
                  3970600049,
                  1771706367,
                  1449415276,
                  3266420449,
                  422970021,
                  1963543593,
                  2690192192,
                  3826793022,
                  1062508698,
                  1531092325,
                  1804592342,
                  2583117782,
                  2714934279,
                  4024971509,
                  1294809318,
                  4028980673,
                  1289560198,
                  2221992742,
                  1669523910,
                  35572830,
                  157838143,
                  1052438473,
                  1016535060,
                  1802137761,
                  1753167236,
                  1386275462,
                  3080475397,
                  2857371447,
                  1040679964,
                  2145300060,
                  2390574316,
                  1461121720,
                  2956646967,
                  4031777805,
                  4028374788,
                  33600511,
                  2920084762,
                  1018524850,
                  629373528,
                  3691585981,
                  3515945977,
                  2091462646,
                  2486323059,
                  586499841,
                  988145025,
                  935516892,
                  3367335476,
                  2599673255,
                  2839830854,
                  265290510,
                  3972581182,
                  2759138881,
                  3795373465,
                  1005194799,
                  847297441,
                  406762289,
                  1314163512,
                  1332590856,
                  1866599683,
                  4127851711,
                  750260880,
                  613907577,
                  1450815602,
                  3165620655,
                  3734664991,
                  3650291728,
                  3012275730,
                  3704569646,
                  1427272223,
                  778793252,
                  1343938022,
                  2676280711,
                  2052605720,
                  1946737175,
                  3164576444,
                  3914038668,
                  3967478842,
                  3682934266,
                  1661551462,
                  3294938066,
                  4011595847,
                  840292616,
                  3712170807,
                  616741398,
                  312560963,
                  711312465,
                  1351876610,
                  322626781,
                  1910503582,
                  271666773,
                  2175563734,
                  1594956187,
                  70604529,
                  3617834859,
                  1007753275,
                  1495573769,
                  4069517037,
                  2549218298,
                  2663038764,
                  504708206,
                  2263041392,
                  3941167025,
                  2249088522,
                  1514023603,
                  1998579484,
                  1312622330,
                  694541497,
                  2582060303,
                  2151582166,
                  1382467621,
                  776784248,
                  2618340202,
                  3323268794,
                  2497899128,
                  2784771155,
                  503983604,
                  4076293799,
                  907881277,
                  423175695,
                  432175456,
                  1378068232,
                  4145222326,
                  3954048622,
                  3938656102,
                  3820766613,
                  2793130115,
                  2977904593,
                  26017576,
                  3274890735,
                  3194772133,
                  1700274565,
                  1756076034,
                  4006520079,
                  3677328699,
                  720338349,
                  1533947780,
                  354530856,
                  688349552,
                  3973924725,
                  1637815568,
                  332179504,
                  3949051286,
                  53804574,
                  2852348879,
                  3044236432,
                  1282449977,
                  3583942155,
                  3416972820,
                  4006381244,
                  1617046695,
                  2628476075,
                  3002303598,
                  1686838959,
                  431878346,
                  2686675385,
                  1700445008,
                  1080580658,
                  1009431731,
                  832498133,
                  3223435511,
                  2605976345,
                  2271191193,
                  2516031870,
                  1648197032,
                  4164389018,
                  2548247927,
                  300782431,
                  375919233,
                  238389289,
                  3353747414,
                  2531188641,
                  2019080857,
                  1475708069,
                  455242339,
                  2609103871,
                  448939670,
                  3451063019,
                  1395535956,
                  2413381860,
                  1841049896,
                  1491858159,
                  885456874,
                  4264095073,
                  4001119347,
                  1565136089,
                  3898914787,
                  1108368660,
                  540939232,
                  1173283510,
                  2745871338,
                  3681308437,
                  4207628240,
                  3343053890,
                  4016749493,
                  1699691293,
                  1103962373,
                  3625875870,
                  2256883143,
                  3830138730,
                  1031889488,
                  3479347698,
                  1535977030,
                  4236805024,
                  3251091107,
                  2132092099,
                  1774941330,
                  1199868427,
                  1452454533,
                  157007616,
                  2904115357,
                  342012276,
                  595725824,
                  1480756522,
                  206960106,
                  497939518,
                  591360097,
                  863170706,
                  2375253569,
                  3596610801,
                  1814182875,
                  2094937945,
                  3421402208,
                  1082520231,
                  3463918190,
                  2785509508,
                  435703966,
                  3908032597,
                  1641649973,
                  2842273706,
                  3305899714,
                  1510255612,
                  2148256476,
                  2655287854,
                  3276092548,
                  4258621189,
                  236887753,
                  3681803219,
                  274041037,
                  1734335097,
                  3815195456,
                  3317970021,
                  1899903192,
                  1026095262,
                  4050517792,
                  356393447,
                  2410691914,
                  3873677099,
                  3682840055
                ],
                [
                  3913112168,
                  2491498743,
                  4132185628,
                  2489919796,
                  1091903735,
                  1979897079,
                  3170134830,
                  3567386728,
                  3557303409,
                  857797738,
                  1136121015,
                  1342202287,
                  507115054,
                  2535736646,
                  337727348,
                  3213592640,
                  1301675037,
                  2528481711,
                  1895095763,
                  1721773893,
                  3216771564,
                  62756741,
                  2142006736,
                  835421444,
                  2531993523,
                  1442658625,
                  3659876326,
                  2882144922,
                  676362277,
                  1392781812,
                  170690266,
                  3921047035,
                  1759253602,
                  3611846912,
                  1745797284,
                  664899054,
                  1329594018,
                  3901205900,
                  3045908486,
                  2062866102,
                  2865634940,
                  3543621612,
                  3464012697,
                  1080764994,
                  553557557,
                  3656615353,
                  3996768171,
                  991055499,
                  499776247,
                  1265440854,
                  648242737,
                  3940784050,
                  980351604,
                  3713745714,
                  1749149687,
                  3396870395,
                  4211799374,
                  3640570775,
                  1161844396,
                  3125318951,
                  1431517754,
                  545492359,
                  4268468663,
                  3499529547,
                  1437099964,
                  2702547544,
                  3433638243,
                  2581715763,
                  2787789398,
                  1060185593,
                  1593081372,
                  2418618748,
                  4260947970,
                  69676912,
                  2159744348,
                  86519011,
                  2512459080,
                  3838209314,
                  1220612927,
                  3339683548,
                  133810670,
                  1090789135,
                  1078426020,
                  1569222167,
                  845107691,
                  3583754449,
                  4072456591,
                  1091646820,
                  628848692,
                  1613405280,
                  3757631651,
                  526609435,
                  236106946,
                  48312990,
                  2942717905,
                  3402727701,
                  1797494240,
                  859738849,
                  992217954,
                  4005476642,
                  2243076622,
                  3870952857,
                  3732016268,
                  765654824,
                  3490871365,
                  2511836413,
                  1685915746,
                  3888969200,
                  1414112111,
                  2273134842,
                  3281911079,
                  4080962846,
                  172450625,
                  2569994100,
                  980381355,
                  4109958455,
                  2819808352,
                  2716589560,
                  2568741196,
                  3681446669,
                  3329971472,
                  1835478071,
                  660984891,
                  3704678404,
                  4045999559,
                  3422617507,
                  3040415634,
                  1762651403,
                  1719377915,
                  3470491036,
                  2693910283,
                  3642056355,
                  3138596744,
                  1364962596,
                  2073328063,
                  1983633131,
                  926494387,
                  3423689081,
                  2150032023,
                  4096667949,
                  1749200295,
                  3328846651,
                  309677260,
                  2016342300,
                  1779581495,
                  3079819751,
                  111262694,
                  1274766160,
                  443224088,
                  298511866,
                  1025883608,
                  3806446537,
                  1145181785,
                  168956806,
                  3641502830,
                  3584813610,
                  1689216846,
                  3666258015,
                  3200248200,
                  1692713982,
                  2646376535,
                  4042768518,
                  1618508792,
                  1610833997,
                  3523052358,
                  4130873264,
                  2001055236,
                  3610705100,
                  2202168115,
                  4028541809,
                  2961195399,
                  1006657119,
                  2006996926,
                  3186142756,
                  1430667929,
                  3210227297,
                  1314452623,
                  4074634658,
                  4101304120,
                  2273951170,
                  1399257539,
                  3367210612,
                  3027628629,
                  1190975929,
                  2062231137,
                  2333990788,
                  2221543033,
                  2438960610,
                  1181637006,
                  548689776,
                  2362791313,
                  3372408396,
                  3104550113,
                  3145860560,
                  296247880,
                  1970579870,
                  3078560182,
                  3769228297,
                  1714227617,
                  3291629107,
                  3898220290,
                  166772364,
                  1251581989,
                  493813264,
                  448347421,
                  195405023,
                  2709975567,
                  677966185,
                  3703036547,
                  1463355134,
                  2715995803,
                  1338867538,
                  1343315457,
                  2802222074,
                  2684532164,
                  233230375,
                  2599980071,
                  2000651841,
                  3277868038,
                  1638401717,
                  4028070440,
                  3237316320,
                  6314154,
                  819756386,
                  300326615,
                  590932579,
                  1405279636,
                  3267499572,
                  3150704214,
                  2428286686,
                  3959192993,
                  3461946742,
                  1862657033,
                  1266418056,
                  963775037,
                  2089974820,
                  2263052895,
                  1917689273,
                  448879540,
                  3550394620,
                  3981727096,
                  150775221,
                  3627908307,
                  1303187396,
                  508620638,
                  2975983352,
                  2726630617,
                  1817252668,
                  1876281319,
                  1457606340,
                  908771278,
                  3720792119,
                  3617206836,
                  2455994898,
                  1729034894,
                  1080033504
                ],
                [
                  976866871,
                  3556439503,
                  2881648439,
                  1522871579,
                  1555064734,
                  1336096578,
                  3548522304,
                  2579274686,
                  3574697629,
                  3205460757,
                  3593280638,
                  3338716283,
                  3079412587,
                  564236357,
                  2993598910,
                  1781952180,
                  1464380207,
                  3163844217,
                  3332601554,
                  1699332808,
                  1393555694,
                  1183702653,
                  3581086237,
                  1288719814,
                  691649499,
                  2847557200,
                  2895455976,
                  3193889540,
                  2717570544,
                  1781354906,
                  1676643554,
                  2592534050,
                  3230253752,
                  1126444790,
                  2770207658,
                  2633158820,
                  2210423226,
                  2615765581,
                  2414155088,
                  3127139286,
                  673620729,
                  2805611233,
                  1269405062,
                  4015350505,
                  3341807571,
                  4149409754,
                  1057255273,
                  2012875353,
                  2162469141,
                  2276492801,
                  2601117357,
                  993977747,
                  3918593370,
                  2654263191,
                  753973209,
                  36408145,
                  2530585658,
                  25011837,
                  3520020182,
                  2088578344,
                  530523599,
                  2918365339,
                  1524020338,
                  1518925132,
                  3760827505,
                  3759777254,
                  1202760957,
                  3985898139,
                  3906192525,
                  674977740,
                  4174734889,
                  2031300136,
                  2019492241,
                  3983892565,
                  4153806404,
                  3822280332,
                  352677332,
                  2297720250,
                  60907813,
                  90501309,
                  3286998549,
                  1016092578,
                  2535922412,
                  2839152426,
                  457141659,
                  509813237,
                  4120667899,
                  652014361,
                  1966332200,
                  2975202805,
                  55981186,
                  2327461051,
                  676427537,
                  3255491064,
                  2882294119,
                  3433927263,
                  1307055953,
                  942726286,
                  933058658,
                  2468411793,
                  3933900994,
                  4215176142,
                  1361170020,
                  2001714738,
                  2830558078,
                  3274259782,
                  1222529897,
                  1679025792,
                  2729314320,
                  3714953764,
                  1770335741,
                  151462246,
                  3013232138,
                  1682292957,
                  1483529935,
                  471910574,
                  1539241949,
                  458788160,
                  3436315007,
                  1807016891,
                  3718408830,
                  978976581,
                  1043663428,
                  3165965781,
                  1927990952,
                  4200891579,
                  2372276910,
                  3208408903,
                  3533431907,
                  1412390302,
                  2931980059,
                  4132332400,
                  1947078029,
                  3881505623,
                  4168226417,
                  2941484381,
                  1077988104,
                  1320477388,
                  886195818,
                  18198404,
                  3786409e3,
                  2509781533,
                  112762804,
                  3463356488,
                  1866414978,
                  891333506,
                  18488651,
                  661792760,
                  1628790961,
                  3885187036,
                  3141171499,
                  876946877,
                  2693282273,
                  1372485963,
                  791857591,
                  2686433993,
                  3759982718,
                  3167212022,
                  3472953795,
                  2716379847,
                  445679433,
                  3561995674,
                  3504004811,
                  3574258232,
                  54117162,
                  3331405415,
                  2381918588,
                  3769707343,
                  4154350007,
                  1140177722,
                  4074052095,
                  668550556,
                  3214352940,
                  367459370,
                  261225585,
                  2610173221,
                  4209349473,
                  3468074219,
                  3265815641,
                  314222801,
                  3066103646,
                  3808782860,
                  282218597,
                  3406013506,
                  3773591054,
                  379116347,
                  1285071038,
                  846784868,
                  2669647154,
                  3771962079,
                  3550491691,
                  2305946142,
                  453669953,
                  1268987020,
                  3317592352,
                  3279303384,
                  3744833421,
                  2610507566,
                  3859509063,
                  266596637,
                  3847019092,
                  517658769,
                  3462560207,
                  3443424879,
                  370717030,
                  4247526661,
                  2224018117,
                  4143653529,
                  4112773975,
                  2788324899,
                  2477274417,
                  1456262402,
                  2901442914,
                  1517677493,
                  1846949527,
                  2295493580,
                  3734397586,
                  2176403920,
                  1280348187,
                  1908823572,
                  3871786941,
                  846861322,
                  1172426758,
                  3287448474,
                  3383383037,
                  1655181056,
                  3139813346,
                  901632758,
                  1897031941,
                  2986607138,
                  3066810236,
                  3447102507,
                  1393639104,
                  373351379,
                  950779232,
                  625454576,
                  3124240540,
                  4148612726,
                  2007998917,
                  544563296,
                  2244738638,
                  2330496472,
                  2058025392,
                  1291430526,
                  424198748,
                  50039436,
                  29584100,
                  3605783033,
                  2429876329,
                  2791104160,
                  1057563949,
                  3255363231,
                  3075367218,
                  3463963227,
                  1469046755,
                  985887462
                ]
              ];
              var o = { pbox: [], sbox: [] };
              function c(e4, t4) {
                let r4 = t4 >> 24 & 255, n3 = t4 >> 16 & 255, s2 = t4 >> 8 & 255, i2 = 255 & t4, a2 = e4.sbox[0][r4] + e4.sbox[1][n3];
                return a2 ^= e4.sbox[2][s2], a2 += e4.sbox[3][i2], a2;
              }
              function d(e4, t4, r4) {
                let n3, i2 = t4, a2 = r4;
                for (let t5 = 0; t5 < s; ++t5)
                  i2 ^= e4.pbox[t5], a2 = c(e4, i2) ^ a2, n3 = i2, i2 = a2, a2 = n3;
                return n3 = i2, i2 = a2, a2 = n3, a2 ^= e4.pbox[s], i2 ^= e4.pbox[s + 1], { left: i2, right: a2 };
              }
              function l(e4, t4, r4) {
                let n3, i2 = t4, a2 = r4;
                for (let t5 = s + 1; t5 > 1; --t5)
                  i2 ^= e4.pbox[t5], a2 = c(e4, i2) ^ a2, n3 = i2, i2 = a2, a2 = n3;
                return n3 = i2, i2 = a2, a2 = n3, a2 ^= e4.pbox[1], i2 ^= e4.pbox[0], { left: i2, right: a2 };
              }
              function u(e4, t4, r4) {
                for (let t5 = 0; t5 < 4; t5++) {
                  e4.sbox[t5] = [];
                  for (let r5 = 0; r5 < 256; r5++) e4.sbox[t5][r5] = a[t5][r5];
                }
                let n3 = 0;
                for (let a2 = 0; a2 < s + 2; a2++)
                  e4.pbox[a2] = i[a2] ^ t4[n3], n3++, n3 >= r4 && (n3 = 0);
                let o2 = 0, c2 = 0, l2 = 0;
                for (let t5 = 0; t5 < s + 2; t5 += 2)
                  l2 = d(e4, o2, c2), o2 = l2.left, c2 = l2.right, e4.pbox[t5] = o2, e4.pbox[t5 + 1] = c2;
                for (let t5 = 0; t5 < 4; t5++)
                  for (let r5 = 0; r5 < 256; r5 += 2)
                    l2 = d(e4, o2, c2), o2 = l2.left, c2 = l2.right, e4.sbox[t5][r5] = o2, e4.sbox[t5][r5 + 1] = c2;
                return true;
              }
              var p = r3.Blowfish = t3.extend({
                _doReset: function() {
                  if (this._keyPriorReset !== this._key) {
                    var e4 = this._keyPriorReset = this._key, t4 = e4.words, r4 = e4.sigBytes / 4;
                    u(o, t4, r4);
                  }
                },
                encryptBlock: function(e4, t4) {
                  var r4 = d(o, e4[t4], e4[t4 + 1]);
                  e4[t4] = r4.left, e4[t4 + 1] = r4.right;
                },
                decryptBlock: function(e4, t4) {
                  var r4 = l(o, e4[t4], e4[t4 + 1]);
                  e4[t4] = r4.left, e4[t4 + 1] = r4.right;
                },
                blockSize: 2,
                keySize: 4,
                ivSize: 2
              });
              e3.Blowfish = t3._createHelper(p);
            }(), n2.Blowfish);
          },
          3145: (e2, t2, r2) => {
            "use strict";
            function n2(e3, t3) {
              (null == t3 || t3 > e3.length) && (t3 = e3.length);
              for (var r3 = 0, n3 = Array(t3); r3 < t3; r3++) n3[r3] = e3[r3];
              return n3;
            }
            r2.d(t2, { A: () => n2 });
          },
          3200: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.ProfileLevelId = t2.Level = t2.Profile = void 0, t2.parseProfileLevelId = p, t2.profileLevelIdToString = h, t2.profileToString = function(e3) {
              switch (e3) {
                case s.ConstrainedBaseline:
                  return "ConstrainedBaseline";
                case s.Baseline:
                  return "Baseline";
                case s.Main:
                  return "Main";
                case s.ConstrainedHigh:
                  return "ConstrainedHigh";
                case s.High:
                  return "High";
                case s.PredictiveHigh444:
                  return "PredictiveHigh444";
                default:
                  return void n2.warn(
                    `profileToString() | unrecognized profile ${e3}`
                  );
              }
            }, t2.levelToString = function(e3) {
              switch (e3) {
                case i.L1_b:
                  return "1b";
                case i.L1:
                  return "1";
                case i.L1_1:
                  return "1.1";
                case i.L1_2:
                  return "1.2";
                case i.L1_3:
                  return "1.3";
                case i.L2:
                  return "2";
                case i.L2_1:
                  return "2.1";
                case i.L2_2:
                  return "2.2";
                case i.L3:
                  return "3";
                case i.L3_1:
                  return "3.1";
                case i.L3_2:
                  return "3.2";
                case i.L4:
                  return "4";
                case i.L4_1:
                  return "4.1";
                case i.L4_2:
                  return "4.2";
                case i.L5:
                  return "5";
                case i.L5_1:
                  return "5.1";
                case i.L5_2:
                  return "5.2";
                default:
                  return void n2.warn(
                    `levelToString() | unrecognized level ${e3}`
                  );
              }
            }, t2.parseSdpProfileLevelId = m, t2.isSameProfile = function(e3 = {}, t3 = {}) {
              const r3 = m(e3), n3 = m(t3);
              return Boolean(r3 && n3 && r3.profile === n3.profile);
            }, t2.isSameProfileAndLevel = function(e3 = {}, t3 = {}) {
              const r3 = m(e3), n3 = m(t3);
              return Boolean(
                r3 && n3 && r3.profile === n3.profile && r3.level == n3.level
              );
            }, t2.generateProfileLevelIdStringForAnswer = function(e3 = {}, t3 = {}) {
              if (!e3["profile-level-id"] && !t3["profile-level-id"])
                return void n2.warn(
                  "generateProfileLevelIdStringForAnswer() | profile-level-id missing in local and remote params"
                );
              const r3 = m(e3), s2 = m(t3);
              if (!r3) throw new TypeError("invalid local_profile_level_id");
              if (!s2) throw new TypeError("invalid remote_profile_level_id");
              if (r3.profile !== s2.profile)
                throw new TypeError("H264 Profile mismatch");
              const o2 = g(e3) && g(t3), c2 = r3.level, d2 = s2.level, l2 = (p2 = c2, f2 = d2, function(e4, t4) {
                return e4 === i.L1_b ? t4 !== i.L1 && t4 !== i.L1_b : t4 === i.L1_b ? e4 !== i.L1 : e4 < t4;
              }(p2, f2) ? p2 : f2), u2 = o2 ? c2 : l2;
              var p2, f2;
              return n2.debug(
                `generateProfileLevelIdStringForAnswer() | result [profile:${r3.profile}, level:${u2}]`
              ), h(new a(r3.profile, u2));
            }, t2.supportedLevel = function(e3, t3) {
              for (let r3 = u.length - 1; r3 >= 0; --r3) {
                const s2 = u[r3];
                if (256 * s2.max_macroblock_frame_size <= e3 && s2.max_macroblocks_per_second <= t3 * s2.max_macroblock_frame_size)
                  return n2.debug(
                    `supportedLevel() | result [max_frame_pixel_count:${e3}, max_fps:${t3}, level:${s2.level}]`
                  ), s2.level;
              }
              return void n2.warn(
                `supportedLevel() | no level supported [max_frame_pixel_count:${e3}, max_fps:${t3}]`
              );
            };
            const n2 = new (r2(3582)).Logger();
            var s, i;
            !function(e3) {
              e3[e3.ConstrainedBaseline = 1] = "ConstrainedBaseline", e3[e3.Baseline = 2] = "Baseline", e3[e3.Main = 3] = "Main", e3[e3.ConstrainedHigh = 4] = "ConstrainedHigh", e3[e3.High = 5] = "High", e3[e3.PredictiveHigh444 = 6] = "PredictiveHigh444";
            }(s || (t2.Profile = s = {})), function(e3) {
              e3[e3.L1_b = 0] = "L1_b", e3[e3.L1 = 10] = "L1", e3[e3.L1_1 = 11] = "L1_1", e3[e3.L1_2 = 12] = "L1_2", e3[e3.L1_3 = 13] = "L1_3", e3[e3.L2 = 20] = "L2", e3[e3.L2_1 = 21] = "L2_1", e3[e3.L2_2 = 22] = "L2_2", e3[e3.L3 = 30] = "L3", e3[e3.L3_1 = 31] = "L3_1", e3[e3.L3_2 = 32] = "L3_2", e3[e3.L4 = 40] = "L4", e3[e3.L4_1 = 41] = "L4_1", e3[e3.L4_2 = 42] = "L4_2", e3[e3.L5 = 50] = "L5", e3[e3.L5_1 = 51] = "L5_1", e3[e3.L5_2 = 52] = "L5_2";
            }(i || (t2.Level = i = {}));
            class a {
              constructor(e3, t3) {
                this.profile = e3, this.level = t3;
              }
            }
            t2.ProfileLevelId = a;
            const o = new a(s.ConstrainedBaseline, i.L3_1);
            class c {
              constructor(e3) {
                this.mask = ~f("x", e3), this.masked_value = f("1", e3);
              }
              isMatch(e3) {
                return this.masked_value === (e3 & this.mask);
              }
            }
            class d {
              constructor(e3, t3, r3) {
                this.profile_idc = e3, this.profile_iop = t3, this.profile = r3;
              }
            }
            const l = [
              new d(66, new c("x1xx0000"), s.ConstrainedBaseline),
              new d(77, new c("1xxx0000"), s.ConstrainedBaseline),
              new d(88, new c("11xx0000"), s.ConstrainedBaseline),
              new d(66, new c("x0xx0000"), s.Baseline),
              new d(88, new c("10xx0000"), s.Baseline),
              new d(77, new c("0x0x0000"), s.Main),
              new d(100, new c("00000000"), s.High),
              new d(100, new c("00001100"), s.ConstrainedHigh),
              new d(244, new c("00000000"), s.PredictiveHigh444)
            ], u = [
              {
                max_macroblocks_per_second: 1485,
                max_macroblock_frame_size: 99,
                level: i.L1
              },
              {
                max_macroblocks_per_second: 1485,
                max_macroblock_frame_size: 99,
                level: i.L1_b
              },
              {
                max_macroblocks_per_second: 3e3,
                max_macroblock_frame_size: 396,
                level: i.L1_1
              },
              {
                max_macroblocks_per_second: 6e3,
                max_macroblock_frame_size: 396,
                level: i.L1_2
              },
              {
                max_macroblocks_per_second: 11880,
                max_macroblock_frame_size: 396,
                level: i.L1_3
              },
              {
                max_macroblocks_per_second: 11880,
                max_macroblock_frame_size: 396,
                level: i.L2
              },
              {
                max_macroblocks_per_second: 19800,
                max_macroblock_frame_size: 792,
                level: i.L2_1
              },
              {
                max_macroblocks_per_second: 20250,
                max_macroblock_frame_size: 1620,
                level: i.L2_2
              },
              {
                max_macroblocks_per_second: 40500,
                max_macroblock_frame_size: 1620,
                level: i.L3
              },
              {
                max_macroblocks_per_second: 108e3,
                max_macroblock_frame_size: 3600,
                level: i.L3_1
              },
              {
                max_macroblocks_per_second: 216e3,
                max_macroblock_frame_size: 5120,
                level: i.L3_2
              },
              {
                max_macroblocks_per_second: 245760,
                max_macroblock_frame_size: 8192,
                level: i.L4
              },
              {
                max_macroblocks_per_second: 245760,
                max_macroblock_frame_size: 8192,
                level: i.L4_1
              },
              {
                max_macroblocks_per_second: 522240,
                max_macroblock_frame_size: 8704,
                level: i.L4_2
              },
              {
                max_macroblocks_per_second: 589824,
                max_macroblock_frame_size: 22080,
                level: i.L5
              },
              {
                max_macroblocks_per_second: 983040,
                max_macroblock_frame_size: 36864,
                level: i.L5_1
              },
              {
                max_macroblocks_per_second: 2073600,
                max_macroblock_frame_size: 36864,
                level: i.L5_2
              }
            ];
            function p(e3) {
              if ("string" != typeof e3 || 6 !== e3.length) return;
              const t3 = parseInt(e3, 16);
              if (0 === t3) return;
              const r3 = 255 & t3, s2 = t3 >> 8 & 255, o2 = t3 >> 16 & 255;
              let c2;
              switch (r3) {
                case i.L1_1:
                  c2 = 16 & s2 ? i.L1_b : i.L1_1;
                  break;
                case i.L1:
                case i.L1_2:
                case i.L1_3:
                case i.L2:
                case i.L2_1:
                case i.L2_2:
                case i.L3:
                case i.L3_1:
                case i.L3_2:
                case i.L4:
                case i.L4_1:
                case i.L4_2:
                case i.L5:
                case i.L5_1:
                case i.L5_2:
                  c2 = r3;
                  break;
                default:
                  return void n2.warn(
                    `parseProfileLevelId() | unrecognized level_idc [str:${e3}, level_idc:${r3}]`
                  );
              }
              for (const t4 of l)
                if (o2 === t4.profile_idc && t4.profile_iop.isMatch(s2))
                  return n2.debug(
                    `parseProfileLevelId() | result [str:${e3}, profile:${t4.profile}, level:${c2}]`
                  ), new a(t4.profile, c2);
              n2.warn(
                `parseProfileLevelId() | unrecognized profile_idc/profile_iop combination [str:${e3}, profile_idc:${o2}, profile_iop:${s2}]`
              );
            }
            function h(e3) {
              if (e3.level == i.L1_b)
                switch (e3.profile) {
                  case s.ConstrainedBaseline:
                    return "42f00b";
                  case s.Baseline:
                    return "42100b";
                  case s.Main:
                    return "4d100b";
                  default:
                    return void n2.warn(
                      `profileLevelIdToString() | Level 1_b not is allowed for profile ${e3.profile}`
                    );
                }
              let t3;
              switch (e3.profile) {
                case s.ConstrainedBaseline:
                  t3 = "42e0";
                  break;
                case s.Baseline:
                  t3 = "4200";
                  break;
                case s.Main:
                  t3 = "4d00";
                  break;
                case s.ConstrainedHigh:
                  t3 = "640c";
                  break;
                case s.High:
                  t3 = "6400";
                  break;
                case s.PredictiveHigh444:
                  t3 = "f400";
                  break;
                default:
                  return void n2.warn(
                    `profileLevelIdToString() | unrecognized profile ${e3.profile}`
                  );
              }
              let r3 = e3.level.toString(16);
              return 1 === r3.length && (r3 = `0${r3}`), `${t3}${r3}`;
            }
            function m(e3 = {}) {
              const t3 = e3["profile-level-id"];
              return t3 ? p(t3) : o;
            }
            function f(e3, t3) {
              return Number(t3[0] === e3) << 7 | Number(t3[1] === e3) << 6 | Number(t3[2] === e3) << 5 | Number(t3[3] === e3) << 4 | Number(t3[4] === e3) << 3 | Number(t3[5] === e3) << 2 | Number(t3[6] === e3) << 1 | Number(t3[7] === e3);
            }
            function g(e3 = {}) {
              const t3 = e3["level-asymmetry-allowed"];
              return true === t3 || 1 === t3 || "1" === t3;
            }
          },
          3240: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), function(e3) {
              var t3 = n2, r3 = t3.lib, s = r3.Base, i = r3.WordArray, a = t3.x64 = {};
              a.Word = s.extend({
                init: function(e4, t4) {
                  this.high = e4, this.low = t4;
                }
              }), a.WordArray = s.extend({
                init: function(t4, r4) {
                  t4 = this.words = t4 || [], this.sigBytes = r4 != e3 ? r4 : 8 * t4.length;
                },
                toX32: function() {
                  for (var e4 = this.words, t4 = e4.length, r4 = [], n3 = 0; n3 < t4; n3++) {
                    var s2 = e4[n3];
                    r4.push(s2.high), r4.push(s2.low);
                  }
                  return i.create(r4, this.sigBytes);
                },
                clone: function() {
                  for (var e4 = s.clone.call(this), t4 = e4.words = this.words.slice(0), r4 = t4.length, n3 = 0; n3 < r4; n3++)
                    t4[n3] = t4[n3].clone();
                  return e4;
                }
              });
            }(), n2);
          },
          3303: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.parse = void 0;
            const r2 = new RegExp("^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})");
            t2.parse = function(e3) {
              const t3 = r2.exec(e3 || "");
              return t3 ? { spatialLayers: Number(t3[1]), temporalLayers: Number(t3[2]) } : { spatialLayers: 1, temporalLayers: 1 };
            };
          },
          3471: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.OfferMediaSection = t2.AnswerMediaSection = t2.MediaSection = void 0;
            const a = i(r2(7363)), o = i(r2(1765));
            class c {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                planB: n3 = false
              }) {
                if (this._mediaObject = {}, this._planB = n3, e3 && this.setIceParameters(e3), t3) {
                  this._mediaObject.candidates = [];
                  for (const e4 of t3) {
                    const t4 = { component: 1 };
                    t4.foundation = e4.foundation, t4.ip = e4.address ?? e4.ip, t4.port = e4.port, t4.priority = e4.priority, t4.transport = e4.protocol, t4.type = e4.type, e4.tcpType && (t4.tcptype = e4.tcpType), this._mediaObject.candidates.push(t4);
                  }
                  this._mediaObject.endOfCandidates = "end-of-candidates", this._mediaObject.iceOptions = "renomination";
                }
                r3 && this.setDtlsRole(r3.role);
              }
              get mid() {
                return String(this._mediaObject.mid);
              }
              get closed() {
                return 0 === this._mediaObject.port;
              }
              getObject() {
                return this._mediaObject;
              }
              setIceParameters(e3) {
                this._mediaObject.iceUfrag = e3.usernameFragment, this._mediaObject.icePwd = e3.password;
              }
              pause() {
                this._mediaObject.direction = "inactive";
              }
              disable() {
                this.pause(), delete this._mediaObject.ext, delete this._mediaObject.ssrcs, delete this._mediaObject.ssrcGroups, delete this._mediaObject.simulcast, delete this._mediaObject.simulcast_03, delete this._mediaObject.rids, delete this._mediaObject.extmapAllowMixed;
              }
              close() {
                this.disable(), this._mediaObject.port = 0;
              }
            }
            t2.MediaSection = c;
            t2.AnswerMediaSection = class extends c {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                sctpParameters: n3,
                plainRtpParameters: s2,
                planB: i2 = false,
                offerMediaObject: a2,
                offerRtpParameters: c2,
                answerRtpParameters: l,
                codecOptions: u,
                extmapAllowMixed: p = false
              }) {
                switch (super({
                  iceParameters: e3,
                  iceCandidates: t3,
                  dtlsParameters: r3,
                  planB: i2
                }), this._mediaObject.mid = String(a2.mid), this._mediaObject.type = a2.type, this._mediaObject.protocol = a2.protocol, s2 ? (this._mediaObject.connection = {
                  ip: s2.ip,
                  version: s2.ipVersion
                }, this._mediaObject.port = s2.port) : (this._mediaObject.connection = {
                  ip: "127.0.0.1",
                  version: 4
                }, this._mediaObject.port = 7), a2.type) {
                  case "audio":
                  case "video":
                    this._mediaObject.direction = "recvonly", this._mediaObject.rtp = [], this._mediaObject.rtcpFb = [], this._mediaObject.fmtp = [];
                    for (const e4 of l.codecs) {
                      const t4 = {
                        payload: e4.payloadType,
                        codec: d(e4),
                        rate: e4.clockRate
                      };
                      e4.channels > 1 && (t4.encoding = e4.channels), this._mediaObject.rtp.push(t4);
                      const r4 = o.clone(e4.parameters) ?? {};
                      let n4 = o.clone(e4.rtcpFeedback) ?? [];
                      if (u) {
                        const {
                          opusStereo: t5,
                          opusFec: s4,
                          opusDtx: i3,
                          opusMaxPlaybackRate: a3,
                          opusMaxAverageBitrate: o2,
                          opusPtime: d2,
                          opusNack: l2,
                          videoGoogleStartBitrate: p2,
                          videoGoogleMaxBitrate: h,
                          videoGoogleMinBitrate: m
                        } = u, f = c2.codecs.find(
                          (t6) => t6.payloadType === e4.payloadType
                        );
                        switch (e4.mimeType.toLowerCase()) {
                          case "audio/opus":
                          case "audio/multiopus":
                            void 0 !== t5 && (f.parameters["sprop-stereo"] = t5 ? 1 : 0, r4.stereo = t5 ? 1 : 0), void 0 !== s4 && (f.parameters.useinbandfec = s4 ? 1 : 0, r4.useinbandfec = s4 ? 1 : 0), void 0 !== i3 && (f.parameters.usedtx = i3 ? 1 : 0, r4.usedtx = i3 ? 1 : 0), void 0 !== a3 && (r4.maxplaybackrate = a3), void 0 !== o2 && (r4.maxaveragebitrate = o2), void 0 !== d2 && (f.parameters.ptime = d2, r4.ptime = d2), l2 || (f.rtcpFeedback = f.rtcpFeedback.filter(
                              (e5) => "nack" !== e5.type || e5.parameter
                            ), n4 = n4.filter(
                              (e5) => "nack" !== e5.type || e5.parameter
                            ));
                            break;
                          case "video/vp8":
                          case "video/vp9":
                          case "video/h264":
                          case "video/h265":
                            void 0 !== p2 && (r4["x-google-start-bitrate"] = p2), void 0 !== h && (r4["x-google-max-bitrate"] = h), void 0 !== m && (r4["x-google-min-bitrate"] = m);
                        }
                      }
                      const s3 = { payload: e4.payloadType, config: "" };
                      for (const e5 of Object.keys(r4))
                        s3.config && (s3.config += ";"), s3.config += `${e5}=${r4[e5]}`;
                      s3.config && this._mediaObject.fmtp.push(s3);
                      for (const t5 of n4)
                        this._mediaObject.rtcpFb.push({
                          payload: e4.payloadType,
                          type: t5.type,
                          subtype: t5.parameter
                        });
                    }
                    this._mediaObject.payloads = l.codecs.map((e4) => e4.payloadType).join(" "), this._mediaObject.ext = [];
                    for (const e4 of l.headerExtensions) {
                      (a2.ext || []).some((t4) => t4.uri === e4.uri) && this._mediaObject.ext.push({ uri: e4.uri, value: e4.id });
                    }
                    if (p && "extmap-allow-mixed" === a2.extmapAllowMixed && (this._mediaObject.extmapAllowMixed = "extmap-allow-mixed"), a2.simulcast) {
                      this._mediaObject.simulcast = {
                        dir1: "recv",
                        list1: a2.simulcast.list1
                      }, this._mediaObject.rids = [];
                      for (const e4 of a2.rids || [])
                        "send" === e4.direction && this._mediaObject.rids.push({
                          id: e4.id,
                          direction: "recv"
                        });
                    } else if (a2.simulcast_03) {
                      this._mediaObject.simulcast_03 = {
                        value: a2.simulcast_03.value.replace(/send/g, "recv")
                      }, this._mediaObject.rids = [];
                      for (const e4 of a2.rids || [])
                        "send" === e4.direction && this._mediaObject.rids.push({
                          id: e4.id,
                          direction: "recv"
                        });
                    }
                    this._mediaObject.rtcpMux = "rtcp-mux", this._mediaObject.rtcpRsize = "rtcp-rsize", this._planB && "video" === this._mediaObject.type && (this._mediaObject.xGoogleFlag = "conference");
                    break;
                  case "application":
                    "number" == typeof a2.sctpPort ? (this._mediaObject.payloads = "webrtc-datachannel", this._mediaObject.sctpPort = n3.port, this._mediaObject.maxMessageSize = n3.maxMessageSize) : a2.sctpmap && (this._mediaObject.payloads = n3.port, this._mediaObject.sctpmap = {
                      app: "webrtc-datachannel",
                      sctpmapNumber: n3.port,
                      maxMessageSize: n3.maxMessageSize
                    });
                }
              }
              setDtlsRole(e3) {
                switch (e3) {
                  case "client":
                    this._mediaObject.setup = "active";
                    break;
                  case "server":
                    this._mediaObject.setup = "passive";
                    break;
                  case "auto":
                    this._mediaObject.setup = "actpass";
                }
              }
              resume() {
                this._mediaObject.direction = "recvonly";
              }
              muxSimulcastStreams(e3) {
                var _a;
                if (!this._mediaObject.simulcast || !this._mediaObject.simulcast.list1)
                  return;
                const t3 = {};
                for (const r4 of e3) r4.rid && (t3[r4.rid] = r4);
                const r3 = this._mediaObject.simulcast.list1, n3 = a.parseSimulcastStreamList(r3);
                for (const e4 of n3)
                  for (const r4 of e4) r4.paused = !((_a = t3[r4.scid]) == null ? void 0 : _a.active);
                this._mediaObject.simulcast.list1 = n3.map(
                  (e4) => e4.map((e5) => `${e5.paused ? "~" : ""}${e5.scid}`).join(",")
                ).join(";");
              }
            };
            function d(e3) {
              const t3 = new RegExp("^(audio|video)/(.+)", "i").exec(e3.mimeType);
              if (!t3) throw new TypeError("invalid codec.mimeType");
              return t3[2];
            }
            t2.OfferMediaSection = class extends c {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                sctpParameters: n3,
                plainRtpParameters: s2,
                planB: i2 = false,
                mid: a2,
                kind: o2,
                offerRtpParameters: c2,
                streamId: l,
                trackId: u,
                oldDataChannelSpec: p = false
              }) {
                switch (super({
                  iceParameters: e3,
                  iceCandidates: t3,
                  dtlsParameters: r3,
                  planB: i2
                }), this._mediaObject.mid = String(a2), this._mediaObject.type = o2, s2 ? (this._mediaObject.connection = {
                  ip: s2.ip,
                  version: s2.ipVersion
                }, this._mediaObject.protocol = "RTP/AVP", this._mediaObject.port = s2.port) : (this._mediaObject.connection = {
                  ip: "127.0.0.1",
                  version: 4
                }, this._mediaObject.protocol = n3 ? "UDP/DTLS/SCTP" : "UDP/TLS/RTP/SAVPF", this._mediaObject.port = 7), o2) {
                  case "audio":
                  case "video": {
                    this._mediaObject.direction = "sendonly", this._mediaObject.rtp = [], this._mediaObject.rtcpFb = [], this._mediaObject.fmtp = [], this._planB || (this._mediaObject.msid = `${l || "-"} ${u}`);
                    for (const e5 of c2.codecs) {
                      const t5 = {
                        payload: e5.payloadType,
                        codec: d(e5),
                        rate: e5.clockRate
                      };
                      e5.channels > 1 && (t5.encoding = e5.channels), this._mediaObject.rtp.push(t5);
                      const r5 = { payload: e5.payloadType, config: "" };
                      for (const t6 of Object.keys(e5.parameters))
                        r5.config && (r5.config += ";"), r5.config += `${t6}=${e5.parameters[t6]}`;
                      r5.config && this._mediaObject.fmtp.push(r5);
                      for (const t6 of e5.rtcpFeedback)
                        this._mediaObject.rtcpFb.push({
                          payload: e5.payloadType,
                          type: t6.type,
                          subtype: t6.parameter
                        });
                    }
                    this._mediaObject.payloads = c2.codecs.map((e5) => e5.payloadType).join(" "), this._mediaObject.ext = [];
                    for (const e5 of c2.headerExtensions)
                      this._mediaObject.ext.push({ uri: e5.uri, value: e5.id });
                    this._mediaObject.rtcpMux = "rtcp-mux", this._mediaObject.rtcpRsize = "rtcp-rsize";
                    const e4 = c2.encodings[0], t4 = e4.ssrc, r4 = e4.rtx && e4.rtx.ssrc ? e4.rtx.ssrc : void 0;
                    this._mediaObject.ssrcs = [], this._mediaObject.ssrcGroups = [], c2.rtcp.cname && this._mediaObject.ssrcs.push({
                      id: t4,
                      attribute: "cname",
                      value: c2.rtcp.cname
                    }), this._planB && this._mediaObject.ssrcs.push({
                      id: t4,
                      attribute: "msid",
                      value: `${l || "-"} ${u}`
                    }), r4 && (c2.rtcp.cname && this._mediaObject.ssrcs.push({
                      id: r4,
                      attribute: "cname",
                      value: c2.rtcp.cname
                    }), this._planB && this._mediaObject.ssrcs.push({
                      id: r4,
                      attribute: "msid",
                      value: `${l || "-"} ${u}`
                    }), this._mediaObject.ssrcGroups.push({
                      semantics: "FID",
                      ssrcs: `${t4} ${r4}`
                    }));
                    break;
                  }
                  case "application":
                    p ? (this._mediaObject.payloads = n3.port, this._mediaObject.sctpmap = {
                      app: "webrtc-datachannel",
                      sctpmapNumber: n3.port,
                      maxMessageSize: n3.maxMessageSize
                    }) : (this._mediaObject.payloads = "webrtc-datachannel", this._mediaObject.sctpPort = n3.port, this._mediaObject.maxMessageSize = n3.maxMessageSize);
                }
              }
              setDtlsRole(e3) {
                this._mediaObject.setup = "actpass";
              }
              resume() {
                this._mediaObject.direction = "sendonly";
              }
              planBReceive({ offerRtpParameters: e3, streamId: t3, trackId: r3 }) {
                const n3 = e3.encodings[0], s2 = n3.ssrc, i2 = n3.rtx && n3.rtx.ssrc ? n3.rtx.ssrc : void 0, a2 = this._mediaObject.payloads.split(" ");
                for (const t4 of e3.codecs) {
                  if (a2.includes(String(t4.payloadType))) continue;
                  const e4 = {
                    payload: t4.payloadType,
                    codec: d(t4),
                    rate: t4.clockRate
                  };
                  t4.channels > 1 && (e4.encoding = t4.channels), this._mediaObject.rtp.push(e4);
                  const r4 = { payload: t4.payloadType, config: "" };
                  for (const e5 of Object.keys(t4.parameters))
                    r4.config && (r4.config += ";"), r4.config += `${e5}=${t4.parameters[e5]}`;
                  r4.config && this._mediaObject.fmtp.push(r4);
                  for (const e5 of t4.rtcpFeedback)
                    this._mediaObject.rtcpFb.push({
                      payload: t4.payloadType,
                      type: e5.type,
                      subtype: e5.parameter
                    });
                }
                this._mediaObject.payloads += ` ${e3.codecs.filter(
                  (e4) => !this._mediaObject.payloads.includes(e4.payloadType)
                ).map((e4) => e4.payloadType).join(" ")}`, this._mediaObject.payloads = this._mediaObject.payloads.trim(), e3.rtcp.cname && this._mediaObject.ssrcs.push({
                  id: s2,
                  attribute: "cname",
                  value: e3.rtcp.cname
                }), this._mediaObject.ssrcs.push({
                  id: s2,
                  attribute: "msid",
                  value: `${t3 || "-"} ${r3}`
                }), i2 && (e3.rtcp.cname && this._mediaObject.ssrcs.push({
                  id: i2,
                  attribute: "cname",
                  value: e3.rtcp.cname
                }), this._mediaObject.ssrcs.push({
                  id: i2,
                  attribute: "msid",
                  value: `${t3 || "-"} ${r3}`
                }), this._mediaObject.ssrcGroups.push({
                  semantics: "FID",
                  ssrcs: `${s2} ${i2}`
                }));
              }
              planBStopReceiving({ offerRtpParameters: e3 }) {
                const t3 = e3.encodings[0], r3 = t3.ssrc, n3 = t3.rtx && t3.rtx.ssrc ? t3.rtx.ssrc : void 0;
                this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(
                  (e4) => e4.id !== r3 && e4.id !== n3
                ), n3 && (this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups.filter(
                  (e4) => e4.ssrcs !== `${r3} ${n3}`
                ));
              }
            };
          },
          3518: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Consumer = void 0;
            const n2 = r2(2994), s = r2(2010), i = r2(4893), a = new n2.Logger("Consumer");
            class o extends s.EnhancedEventEmitter {
              constructor({
                id: e3,
                localId: t3,
                producerId: r3,
                rtpReceiver: n3,
                track: i2,
                rtpParameters: o2,
                appData: c
              }) {
                super(), this._closed = false, this._observer = new s.EnhancedEventEmitter(), a.debug("constructor()"), this._id = e3, this._localId = t3, this._producerId = r3, this._rtpReceiver = n3, this._track = i2, this._rtpParameters = o2, this._paused = !i2.enabled, this._appData = c || {}, this.onTrackEnded = this.onTrackEnded.bind(this), this.handleTrack();
              }
              get id() {
                return this._id;
              }
              get localId() {
                return this._localId;
              }
              get producerId() {
                return this._producerId;
              }
              get closed() {
                return this._closed;
              }
              get kind() {
                return this._track.kind;
              }
              get rtpReceiver() {
                return this._rtpReceiver;
              }
              get track() {
                return this._track;
              }
              get rtpParameters() {
                return this._rtpParameters;
              }
              get paused() {
                return this._paused;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (a.debug("close()"), this._closed = true, this.destroyTrack(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (a.debug("transportClosed()"), this._closed = true, this.destroyTrack(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              async getStats() {
                if (this._closed) throw new i.InvalidStateError("closed");
                return new Promise((e3, t3) => {
                  this.safeEmit("@getstats", e3, t3);
                });
              }
              pause() {
                a.debug("pause()"), this._closed ? a.error("pause() | Consumer closed") : this._paused ? a.debug("pause() | Consumer is already paused") : (this._paused = true, this._track.enabled = false, this.emit("@pause"), this._observer.safeEmit("pause"));
              }
              resume() {
                a.debug("resume()"), this._closed ? a.error("resume() | Consumer closed") : this._paused ? (this._paused = false, this._track.enabled = true, this.emit("@resume"), this._observer.safeEmit("resume")) : a.debug("resume() | Consumer is already resumed");
              }
              onTrackEnded() {
                a.debug('track "ended" event'), this.safeEmit("trackended"), this._observer.safeEmit("trackended");
              }
              handleTrack() {
                this._track.addEventListener("ended", this.onTrackEnded);
              }
              destroyTrack() {
                try {
                  this._track.removeEventListener("ended", this.onTrackEnded), this._track.stop();
                } catch (e3) {
                }
              }
            }
            t2.Consumer = o;
          },
          3582: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Logger = void 0;
            const s = n2(r2(7833)), i = "h264-profile-level-id";
            t2.Logger = class {
              constructor(e3) {
                e3 ? (this._debug = (0, s.default)(`${i}:${e3}`), this._warn = (0, s.default)(`${i}:WARN:${e3}`), this._error = (0, s.default)(`${i}:ERROR:${e3}`)) : (this._debug = (0, s.default)(i), this._warn = (0, s.default)(`${i}:WARN`), this._error = (0, s.default)(`${i}:ERROR`)), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              get debug() {
                return this._debug;
              }
              get warn() {
                return this._warn;
              }
              get error() {
                return this._error;
              }
            };
          },
          3662: (e2, t2, r2) => {
            "use strict";
            function n2(e3, t3) {
              return n2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e4, t4) {
                return e4.__proto__ = t4, e4;
              }, n2(e3, t3);
            }
            r2.d(t2, { A: () => n2 });
          },
          3738: (e2) => {
            function t2(r2) {
              return e2.exports = t2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
                return typeof e3;
              } : function(e3) {
                return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
              }, e2.exports.__esModule = true, e2.exports.default = e2.exports, t2(r2);
            }
            e2.exports = t2, e2.exports.__esModule = true, e2.exports.default = e2.exports;
          },
          3797: function(e2, t2, r2) {
            var n2, s, i;
            e2.exports = (i = r2(9021), r2(7165), i.mode.OFB = (n2 = i.lib.BlockCipherMode.extend(), s = n2.Encryptor = n2.extend({
              processBlock: function(e3, t3) {
                var r3 = this._cipher, n3 = r3.blockSize, s2 = this._iv, i2 = this._keystream;
                s2 && (i2 = this._keystream = s2.slice(0), this._iv = void 0), r3.encryptBlock(i2, 0);
                for (var a = 0; a < n3; a++) e3[t3 + a] ^= i2[a];
              }
            }), n2.Decryptor = s, n2), i.mode.OFB);
          },
          3804: (e2, t2, r2) => {
            var n2 = r2(5602), s = /%[sdv%]/g, i = function(e3) {
              var t3 = 1, r3 = arguments, n3 = r3.length;
              return e3.replace(s, function(e4) {
                if (t3 >= n3) return e4;
                var s2 = r3[t3];
                switch (t3 += 1, e4) {
                  case "%%":
                    return "%";
                  case "%s":
                    return String(s2);
                  case "%d":
                    return Number(s2);
                  case "%v":
                    return "";
                }
              });
            }, a = function(e3, t3, r3) {
              var n3 = [
                e3 + "=" + (t3.format instanceof Function ? t3.format(t3.push ? r3 : r3[t3.name]) : t3.format)
              ];
              if (t3.names)
                for (var s2 = 0; s2 < t3.names.length; s2 += 1) {
                  var a2 = t3.names[s2];
                  t3.name ? n3.push(r3[t3.name][a2]) : n3.push(r3[t3.names[s2]]);
                }
              else n3.push(r3[t3.name]);
              return i.apply(null, n3);
            }, o = [
              "v",
              "o",
              "s",
              "i",
              "u",
              "e",
              "p",
              "c",
              "b",
              "t",
              "r",
              "z",
              "a"
            ], c = ["i", "c", "b", "a"];
            e2.exports = function(e3, t3) {
              t3 = t3 || {}, null == e3.version && (e3.version = 0), null == e3.name && (e3.name = " "), e3.media.forEach(function(e4) {
                null == e4.payloads && (e4.payloads = "");
              });
              var r3 = t3.outerOrder || o, s2 = t3.innerOrder || c, i2 = [];
              return r3.forEach(function(t4) {
                n2[t4].forEach(function(r4) {
                  r4.name in e3 && null != e3[r4.name] ? i2.push(a(t4, r4, e3)) : r4.push in e3 && null != e3[r4.push] && e3[r4.push].forEach(function(e4) {
                    i2.push(a(t4, r4, e4));
                  });
                });
              }), e3.media.forEach(function(e4) {
                i2.push(a("m", n2.m[0], e4)), s2.forEach(function(t4) {
                  n2[t4].forEach(function(r4) {
                    r4.name in e4 && null != e4[r4.name] ? i2.push(a(t4, r4, e4)) : r4.push in e4 && null != e4[r4.push] && e4[r4.push].forEach(function(e5) {
                      i2.push(a(t4, r4, e5));
                    });
                  });
                });
              }), i2.join("\r\n") + "\r\n";
            };
          },
          3954: (e2, t2, r2) => {
            "use strict";
            function n2(e3) {
              return n2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e4) {
                return e4.__proto__ || Object.getPrototypeOf(e4);
              }, n2(e3);
            }
            r2.d(t2, { A: () => n2 });
          },
          4039: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.ReactNativeUnifiedPlan = void 0;
            const a = i(r2(7363)), o = r2(2994), c = i(r2(1765)), d = i(r2(8046)), l = i(r2(5544)), u = i(r2(5938)), p = i(r2(4256)), h = r2(4893), m = r2(521), f = r2(1305), g = r2(3303), v = new o.Logger("ReactNativeUnifiedPlan"), _ = { OS: 1024, MIS: 1024 };
            class y extends m.HandlerInterface {
              static createFactory() {
                return () => new y();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "ReactNativeUnifiedPlan";
              }
              close() {
                if (v.debug("close()"), !this._closed) {
                  if (this._closed = true, this._sendStream.release(false), this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                v.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = a.parse(t3.sdp), n3 = l.extractRtpCapabilities({ sdpObject: r3 });
                  return p.addNackSuppportForOpus(n3), n3;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return v.debug("getNativeSctpCapabilities()"), { numStreams: _ };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                this.assertNotClosed(), v.debug("run()"), this._direction = e3, this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, n3.role && "auto" !== n3.role && (this._forcedLocalDtlsRole = "server" === n3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (v.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                this.assertNotClosed(), v.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), v.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    v.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    v.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    v.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    v.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1 && t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                });
                const s2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, n3);
                const i2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                i2.codecs = d.reduceCodecs(i2.codecs, n3);
                const o2 = this._remoteSdp.getNextMediaSectionIdx(), p2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                });
                let h2, m2 = await this._pc.createOffer(), f2 = a.parse(m2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f2
                });
                let _2 = false;
                const y2 = (0, g.parse)((t3 || [{}])[0].scalabilityMode);
                t3 && 1 === t3.length && y2.spatialLayers > 1 && "video/vp9" === s2.codecs[0].mimeType.toLowerCase() && (v.debug("send() | enabling legacy simulcast for VP9 SVC"), _2 = true, f2 = a.parse(m2.sdp), h2 = f2.media[o2.idx], u.addLegacySimulcast({
                  offerMediaObject: h2,
                  numStreams: y2.spatialLayers
                }), m2 = { type: "offer", sdp: a.write(f2) }), v.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m2
                ), await this._pc.setLocalDescription(m2);
                let b = p2.mid ?? void 0;
                if (b || v.warn(
                  "send() | missing transceiver.mid (bug in react-native-webrtc, using a workaround"
                ), s2.mid = b, f2 = a.parse(this._pc.localDescription.sdp), h2 = f2.media[o2.idx], s2.rtcp.cname = l.getCname({ offerMediaObject: h2 }), t3)
                  if (1 === t3.length) {
                    let e4 = u.getRtpEncodings({ offerMediaObject: h2 });
                    Object.assign(e4[0], t3[0]), _2 && (e4 = [e4[0]]), s2.encodings = e4;
                  } else s2.encodings = t3;
                else s2.encodings = u.getRtpEncodings({ offerMediaObject: h2 });
                if (s2.encodings.length > 1 && ("video/vp8" === s2.codecs[0].mimeType.toLowerCase() || "video/h264" === s2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of s2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${y2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: h2,
                  reuseMid: o2.reuseMid,
                  offerRtpParameters: s2,
                  answerRtpParameters: i2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return v.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ), await this._pc.setRemoteDescription(w), b || (b = p2.mid, s2.mid = b), this._mapMidTransceiver.set(b, p2), { localId: b, rtpParameters: s2, rtpSender: p2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), this._closed) return;
                v.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                v.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                v.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (this._remoteSdp.resumeSendingMediaSection(e3), !t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly";
                const r3 = await this._pc.createOffer();
                v.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? v.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : v.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                v.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  n3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                v.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                v.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % _.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), v.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: n4,
                    rtpParameters: s3,
                    streamId: i3
                  } = t4;
                  v.debug("receive() [trackId:%s, kind:%s]", e4, n4);
                  const a2 = s3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, a2), this._remoteSdp.receive({
                    mid: a2,
                    kind: n4,
                    offerRtpParameters: s3,
                    streamId: i3 || s3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
                let s2 = await this._pc.createAnswer();
                const i2 = a.parse(s2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: n4 } = t4, s3 = r3.get(e4), a2 = i2.media.find((e5) => String(e5.mid) === s3);
                  l.applyCodecParameters({
                    offerRtpParameters: n4,
                    answerMediaObject: a2
                  });
                }
                s2 = { type: "answer", sdp: a.write(i2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: i2
                }), v.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                for (const n4 of e3) {
                  const { trackId: e4 } = n4, s3 = r3.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === s3);
                  if (!i3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(s3, i3), t3.push({
                    localId: s3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  v.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  v.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  v.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                v.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  v.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new h.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.ReactNativeUnifiedPlan = y;
          },
          4160: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
          },
          4253: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.AwaitQueueRemovedTaskError = t2.AwaitQueueStoppedError = void 0;
            class r2 extends Error {
              constructor(e3) {
                super(e3 ?? "queue stopped"), this.name = "AwaitQueueStoppedError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, r2);
              }
            }
            t2.AwaitQueueStoppedError = r2;
            class n2 extends Error {
              constructor(e3) {
                super(e3 ?? "queue task removed"), this.name = "AwaitQueueRemovedTaskError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, n2);
              }
            }
            t2.AwaitQueueRemovedTaskError = n2;
          },
          4256: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.addNackSuppportForOpus = void 0, t2.addNackSuppportForOpus = function(e3) {
              var _a;
              for (const t3 of e3.codecs || [])
                "audio/opus" !== t3.mimeType.toLowerCase() && "audio/multiopus" !== t3.mimeType.toLowerCase() || ((_a = t3.rtcpFeedback) == null ? void 0 : _a.some(
                  (e4) => "nack" === e4.type && !e4.parameter
                )) || (t3.rtcpFeedback || (t3.rtcpFeedback = []), t3.rtcpFeedback.push({ type: "nack" }));
            };
          },
          4467: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => s });
            var n2 = r2(816);
            function s(e3, t3, r3) {
              return (t3 = (0, n2.A)(t3)) in e3 ? Object.defineProperty(e3, t3, {
                value: r3,
                enumerable: true,
                configurable: true,
                writable: true
              }) : e3[t3] = r3, e3;
            }
          },
          4496: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.addLegacySimulcast = t2.getRtpEncodings = void 0, t2.getRtpEncodings = function({ offerMediaObject: e3, track: t3 }) {
              let r2;
              const n2 = /* @__PURE__ */ new Set();
              for (const s2 of e3.ssrcs || []) {
                if ("msid" !== s2.attribute) continue;
                if (s2.value.split(" ")[1] === t3.id) {
                  const e4 = s2.id;
                  n2.add(e4), r2 || (r2 = e4);
                }
              }
              if (0 === n2.size)
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t3.id}]`
                );
              const s = /* @__PURE__ */ new Map();
              for (const t4 of e3.ssrcGroups || []) {
                if ("FID" !== t4.semantics) continue;
                let [e4, r3] = t4.ssrcs.split(/\s+/);
                e4 = Number(e4), r3 = Number(r3), n2.has(e4) && (n2.delete(e4), n2.delete(r3), s.set(e4, r3));
              }
              for (const e4 of n2) s.set(e4, null);
              const i = [];
              for (const [e4, t4] of s) {
                const r3 = { ssrc: e4 };
                t4 && (r3.rtx = { ssrc: t4 }), i.push(r3);
              }
              return i;
            }, t2.addLegacySimulcast = function({
              offerMediaObject: e3,
              track: t3,
              numStreams: r2
            }) {
              if (r2 <= 1)
                throw new TypeError("numStreams must be greater than 1");
              let n2, s, i;
              if (!(e3.ssrcs || []).find((e4) => {
                if ("msid" !== e4.attribute) return false;
                return e4.value.split(" ")[1] === t3.id && (n2 = e4.id, i = e4.value.split(" ")[0], true);
              }))
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t3.id}]`
                );
              (e3.ssrcGroups || []).some((e4) => {
                if ("FID" !== e4.semantics) return false;
                const t4 = e4.ssrcs.split(/\s+/);
                return Number(t4[0]) === n2 && (s = Number(t4[1]), true);
              });
              const a = e3.ssrcs.find(
                (e4) => "cname" === e4.attribute && e4.id === n2
              );
              if (!a)
                throw new Error(
                  `a=ssrc line with cname information not found [track.id:${t3.id}]`
                );
              const o = a.value, c = [], d = [];
              for (let e4 = 0; e4 < r2; ++e4) c.push(n2 + e4), s && d.push(s + e4);
              e3.ssrcGroups = e3.ssrcGroups || [], e3.ssrcs = e3.ssrcs || [], e3.ssrcGroups.push({ semantics: "SIM", ssrcs: c.join(" ") });
              for (let r3 = 0; r3 < c.length; ++r3) {
                const n3 = c[r3];
                e3.ssrcs.push({ id: n3, attribute: "cname", value: o }), e3.ssrcs.push({
                  id: n3,
                  attribute: "msid",
                  value: `${i} ${t3.id}`
                });
              }
              for (let r3 = 0; r3 < d.length; ++r3) {
                const n3 = c[r3], s2 = d[r3];
                e3.ssrcs.push({ id: s2, attribute: "cname", value: o }), e3.ssrcs.push({
                  id: s2,
                  attribute: "msid",
                  value: `${i} ${t3.id}`
                }), e3.ssrcGroups.push({ semantics: "FID", ssrcs: `${n3} ${s2}` });
              }
            };
          },
          4633: (e2, t2, r2) => {
            var n2 = r2(3738).default;
            function s() {
              "use strict";
              e2.exports = s = function() {
                return r3;
              }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
              var t3, r3 = {}, i = Object.prototype, a = i.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, c = o.iterator || "@@iterator", d = o.asyncIterator || "@@asyncIterator", l = o.toStringTag || "@@toStringTag";
              function u(e3, t4, r4, n3) {
                return Object.defineProperty(e3, t4, {
                  value: r4,
                  enumerable: !n3,
                  configurable: !n3,
                  writable: !n3
                });
              }
              try {
                u({}, "");
              } catch (t4) {
                u = function(e3, t5, r4) {
                  return e3[t5] = r4;
                };
              }
              function p(e3, r4, n3, s2) {
                var i2 = r4 && r4.prototype instanceof f ? r4 : f, a2 = Object.create(i2.prototype);
                return u(
                  a2,
                  "_invoke",
                  /* @__PURE__ */ function(e4, r5, n4) {
                    var s3 = 1;
                    return function(i3, a3) {
                      if (3 === s3) throw Error("Generator is already running");
                      if (4 === s3) {
                        if ("throw" === i3) throw a3;
                        return { value: t3, done: true };
                      }
                      for (n4.method = i3, n4.arg = a3; ; ) {
                        var o2 = n4.delegate;
                        if (o2) {
                          var c2 = k(o2, n4);
                          if (c2) {
                            if (c2 === m) continue;
                            return c2;
                          }
                        }
                        if ("next" === n4.method) n4.sent = n4._sent = n4.arg;
                        else if ("throw" === n4.method) {
                          if (1 === s3) throw s3 = 4, n4.arg;
                          n4.dispatchException(n4.arg);
                        } else
                          "return" === n4.method && n4.abrupt("return", n4.arg);
                        s3 = 3;
                        var d2 = h(e4, r5, n4);
                        if ("normal" === d2.type) {
                          if (s3 = n4.done ? 4 : 2, d2.arg === m) continue;
                          return { value: d2.arg, done: n4.done };
                        }
                        "throw" === d2.type && (s3 = 4, n4.method = "throw", n4.arg = d2.arg);
                      }
                    };
                  }(e3, n3, new T(s2 || [])),
                  true
                ), a2;
              }
              function h(e3, t4, r4) {
                try {
                  return { type: "normal", arg: e3.call(t4, r4) };
                } catch (e4) {
                  return { type: "throw", arg: e4 };
                }
              }
              r3.wrap = p;
              var m = {};
              function f() {
              }
              function g() {
              }
              function v() {
              }
              var _ = {};
              u(_, c, function() {
                return this;
              });
              var y = Object.getPrototypeOf, b = y && y(y(P([])));
              b && b !== i && a.call(b, c) && (_ = b);
              var w = v.prototype = f.prototype = Object.create(_);
              function S(e3) {
                ["next", "throw", "return"].forEach(function(t4) {
                  u(e3, t4, function(e4) {
                    return this._invoke(t4, e4);
                  });
                });
              }
              function R(e3, t4) {
                function r4(s3, i2, o2, c2) {
                  var d2 = h(e3[s3], e3, i2);
                  if ("throw" !== d2.type) {
                    var l2 = d2.arg, u2 = l2.value;
                    return u2 && "object" == n2(u2) && a.call(u2, "__await") ? t4.resolve(u2.__await).then(
                      function(e4) {
                        r4("next", e4, o2, c2);
                      },
                      function(e4) {
                        r4("throw", e4, o2, c2);
                      }
                    ) : t4.resolve(u2).then(
                      function(e4) {
                        l2.value = e4, o2(l2);
                      },
                      function(e4) {
                        return r4("throw", e4, o2, c2);
                      }
                    );
                  }
                  c2(d2.arg);
                }
                var s2;
                u(
                  this,
                  "_invoke",
                  function(e4, n3) {
                    function i2() {
                      return new t4(function(t5, s3) {
                        r4(e4, n3, t5, s3);
                      });
                    }
                    return s2 = s2 ? s2.then(i2, i2) : i2();
                  },
                  true
                );
              }
              function k(e3, r4) {
                var n3 = r4.method, s2 = e3.i[n3];
                if (s2 === t3)
                  return r4.delegate = null, "throw" === n3 && e3.i.return && (r4.method = "return", r4.arg = t3, k(e3, r4), "throw" === r4.method) || "return" !== n3 && (r4.method = "throw", r4.arg = new TypeError(
                    "The iterator does not provide a '" + n3 + "' method"
                  )), m;
                var i2 = h(s2, e3.i, r4.arg);
                if ("throw" === i2.type)
                  return r4.method = "throw", r4.arg = i2.arg, r4.delegate = null, m;
                var a2 = i2.arg;
                return a2 ? a2.done ? (r4[e3.r] = a2.value, r4.next = e3.n, "return" !== r4.method && (r4.method = "next", r4.arg = t3), r4.delegate = null, m) : a2 : (r4.method = "throw", r4.arg = new TypeError("iterator result is not an object"), r4.delegate = null, m);
              }
              function E(e3) {
                this.tryEntries.push(e3);
              }
              function C(e3) {
                var r4 = e3[4] || {};
                r4.type = "normal", r4.arg = t3, e3[4] = r4;
              }
              function T(e3) {
                this.tryEntries = [[-1]], e3.forEach(E, this), this.reset(true);
              }
              function P(e3) {
                if (null != e3) {
                  var r4 = e3[c];
                  if (r4) return r4.call(e3);
                  if ("function" == typeof e3.next) return e3;
                  if (!isNaN(e3.length)) {
                    var s2 = -1, i2 = function r5() {
                      for (; ++s2 < e3.length; )
                        if (a.call(e3, s2))
                          return r5.value = e3[s2], r5.done = false, r5;
                      return r5.value = t3, r5.done = true, r5;
                    };
                    return i2.next = i2;
                  }
                }
                throw new TypeError(n2(e3) + " is not iterable");
              }
              return g.prototype = v, u(w, "constructor", v), u(v, "constructor", g), g.displayName = u(v, l, "GeneratorFunction"), r3.isGeneratorFunction = function(e3) {
                var t4 = "function" == typeof e3 && e3.constructor;
                return !!t4 && (t4 === g || "GeneratorFunction" === (t4.displayName || t4.name));
              }, r3.mark = function(e3) {
                return Object.setPrototypeOf ? Object.setPrototypeOf(e3, v) : (e3.__proto__ = v, u(e3, l, "GeneratorFunction")), e3.prototype = Object.create(w), e3;
              }, r3.awrap = function(e3) {
                return { __await: e3 };
              }, S(R.prototype), u(R.prototype, d, function() {
                return this;
              }), r3.AsyncIterator = R, r3.async = function(e3, t4, n3, s2, i2) {
                void 0 === i2 && (i2 = Promise);
                var a2 = new R(p(e3, t4, n3, s2), i2);
                return r3.isGeneratorFunction(t4) ? a2 : a2.next().then(function(e4) {
                  return e4.done ? e4.value : a2.next();
                });
              }, S(w), u(w, l, "Generator"), u(w, c, function() {
                return this;
              }), u(w, "toString", function() {
                return "[object Generator]";
              }), r3.keys = function(e3) {
                var t4 = Object(e3), r4 = [];
                for (var n3 in t4) r4.unshift(n3);
                return function e4() {
                  for (; r4.length; )
                    if ((n3 = r4.pop()) in t4)
                      return e4.value = n3, e4.done = false, e4;
                  return e4.done = true, e4;
                };
              }, r3.values = P, T.prototype = {
                constructor: T,
                reset: function(e3) {
                  if (this.prev = this.next = 0, this.sent = this._sent = t3, this.done = false, this.delegate = null, this.method = "next", this.arg = t3, this.tryEntries.forEach(C), !e3)
                    for (var r4 in this)
                      "t" === r4.charAt(0) && a.call(this, r4) && !isNaN(+r4.slice(1)) && (this[r4] = t3);
                },
                stop: function() {
                  this.done = true;
                  var e3 = this.tryEntries[0][4];
                  if ("throw" === e3.type) throw e3.arg;
                  return this.rval;
                },
                dispatchException: function(e3) {
                  if (this.done) throw e3;
                  var r4 = this;
                  function n3(t4) {
                    a2.type = "throw", a2.arg = e3, r4.next = t4;
                  }
                  for (var s2 = r4.tryEntries.length - 1; s2 >= 0; --s2) {
                    var i2 = this.tryEntries[s2], a2 = i2[4], o2 = this.prev, c2 = i2[1], d2 = i2[2];
                    if (-1 === i2[0]) return n3("end"), false;
                    if (!c2 && !d2)
                      throw Error("try statement without catch or finally");
                    if (null != i2[0] && i2[0] <= o2) {
                      if (o2 < c2)
                        return this.method = "next", this.arg = t3, n3(c2), true;
                      if (o2 < d2) return n3(d2), false;
                    }
                  }
                },
                abrupt: function(e3, t4) {
                  for (var r4 = this.tryEntries.length - 1; r4 >= 0; --r4) {
                    var n3 = this.tryEntries[r4];
                    if (n3[0] > -1 && n3[0] <= this.prev && this.prev < n3[2]) {
                      var s2 = n3;
                      break;
                    }
                  }
                  s2 && ("break" === e3 || "continue" === e3) && s2[0] <= t4 && t4 <= s2[2] && (s2 = null);
                  var i2 = s2 ? s2[4] : {};
                  return i2.type = e3, i2.arg = t4, s2 ? (this.method = "next", this.next = s2[2], m) : this.complete(i2);
                },
                complete: function(e3, t4) {
                  if ("throw" === e3.type) throw e3.arg;
                  return "break" === e3.type || "continue" === e3.type ? this.next = e3.arg : "return" === e3.type ? (this.rval = this.arg = e3.arg, this.method = "return", this.next = "end") : "normal" === e3.type && t4 && (this.next = t4), m;
                },
                finish: function(e3) {
                  for (var t4 = this.tryEntries.length - 1; t4 >= 0; --t4) {
                    var r4 = this.tryEntries[t4];
                    if (r4[2] === e3) return this.complete(r4[4], r4[3]), C(r4), m;
                  }
                },
                catch: function(e3) {
                  for (var t4 = this.tryEntries.length - 1; t4 >= 0; --t4) {
                    var r4 = this.tryEntries[t4];
                    if (r4[0] === e3) {
                      var n3 = r4[4];
                      if ("throw" === n3.type) {
                        var s2 = n3.arg;
                        C(r4);
                      }
                      return s2;
                    }
                  }
                  throw Error("illegal catch attempt");
                },
                delegateYield: function(e3, r4, n3) {
                  return this.delegate = { i: P(e3), r: r4, n: n3 }, "next" === this.method && (this.arg = t3), m;
                }
              }, r3;
            }
            e2.exports = s, e2.exports.__esModule = true, e2.exports.default = e2.exports;
          },
          4636: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), function(e3) {
              var t3 = n2, r3 = t3.lib, s = r3.WordArray, i = r3.Hasher, a = t3.algo, o = [];
              !function() {
                for (var t4 = 0; t4 < 64; t4++)
                  o[t4] = 4294967296 * e3.abs(e3.sin(t4 + 1)) | 0;
              }();
              var c = a.MD5 = i.extend({
                _doReset: function() {
                  this._hash = new s.init([
                    1732584193,
                    4023233417,
                    2562383102,
                    271733878
                  ]);
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = 0; r4 < 16; r4++) {
                    var n3 = t4 + r4, s2 = e4[n3];
                    e4[n3] = 16711935 & (s2 << 8 | s2 >>> 24) | 4278255360 & (s2 << 24 | s2 >>> 8);
                  }
                  var i2 = this._hash.words, a2 = e4[t4 + 0], c2 = e4[t4 + 1], h = e4[t4 + 2], m = e4[t4 + 3], f = e4[t4 + 4], g = e4[t4 + 5], v = e4[t4 + 6], _ = e4[t4 + 7], y = e4[t4 + 8], b = e4[t4 + 9], w = e4[t4 + 10], S = e4[t4 + 11], R = e4[t4 + 12], k = e4[t4 + 13], E = e4[t4 + 14], C = e4[t4 + 15], T = i2[0], P = i2[1], O = i2[2], x = i2[3];
                  T = d(T, P, O, x, a2, 7, o[0]), x = d(x, T, P, O, c2, 12, o[1]), O = d(O, x, T, P, h, 17, o[2]), P = d(P, O, x, T, m, 22, o[3]), T = d(T, P, O, x, f, 7, o[4]), x = d(x, T, P, O, g, 12, o[5]), O = d(O, x, T, P, v, 17, o[6]), P = d(P, O, x, T, _, 22, o[7]), T = d(T, P, O, x, y, 7, o[8]), x = d(x, T, P, O, b, 12, o[9]), O = d(O, x, T, P, w, 17, o[10]), P = d(P, O, x, T, S, 22, o[11]), T = d(T, P, O, x, R, 7, o[12]), x = d(x, T, P, O, k, 12, o[13]), O = d(O, x, T, P, E, 17, o[14]), T = l(
                    T,
                    P = d(P, O, x, T, C, 22, o[15]),
                    O,
                    x,
                    c2,
                    5,
                    o[16]
                  ), x = l(x, T, P, O, v, 9, o[17]), O = l(O, x, T, P, S, 14, o[18]), P = l(P, O, x, T, a2, 20, o[19]), T = l(T, P, O, x, g, 5, o[20]), x = l(x, T, P, O, w, 9, o[21]), O = l(O, x, T, P, C, 14, o[22]), P = l(P, O, x, T, f, 20, o[23]), T = l(T, P, O, x, b, 5, o[24]), x = l(x, T, P, O, E, 9, o[25]), O = l(O, x, T, P, m, 14, o[26]), P = l(P, O, x, T, y, 20, o[27]), T = l(T, P, O, x, k, 5, o[28]), x = l(x, T, P, O, h, 9, o[29]), O = l(O, x, T, P, _, 14, o[30]), T = u(
                    T,
                    P = l(P, O, x, T, R, 20, o[31]),
                    O,
                    x,
                    g,
                    4,
                    o[32]
                  ), x = u(x, T, P, O, y, 11, o[33]), O = u(O, x, T, P, S, 16, o[34]), P = u(P, O, x, T, E, 23, o[35]), T = u(T, P, O, x, c2, 4, o[36]), x = u(x, T, P, O, f, 11, o[37]), O = u(O, x, T, P, _, 16, o[38]), P = u(P, O, x, T, w, 23, o[39]), T = u(T, P, O, x, k, 4, o[40]), x = u(x, T, P, O, a2, 11, o[41]), O = u(O, x, T, P, m, 16, o[42]), P = u(P, O, x, T, v, 23, o[43]), T = u(T, P, O, x, b, 4, o[44]), x = u(x, T, P, O, R, 11, o[45]), O = u(O, x, T, P, C, 16, o[46]), T = p(
                    T,
                    P = u(P, O, x, T, h, 23, o[47]),
                    O,
                    x,
                    a2,
                    6,
                    o[48]
                  ), x = p(x, T, P, O, _, 10, o[49]), O = p(O, x, T, P, E, 15, o[50]), P = p(P, O, x, T, g, 21, o[51]), T = p(T, P, O, x, R, 6, o[52]), x = p(x, T, P, O, m, 10, o[53]), O = p(O, x, T, P, w, 15, o[54]), P = p(P, O, x, T, c2, 21, o[55]), T = p(T, P, O, x, y, 6, o[56]), x = p(x, T, P, O, C, 10, o[57]), O = p(O, x, T, P, v, 15, o[58]), P = p(P, O, x, T, k, 21, o[59]), T = p(T, P, O, x, f, 6, o[60]), x = p(x, T, P, O, S, 10, o[61]), O = p(O, x, T, P, h, 15, o[62]), P = p(P, O, x, T, b, 21, o[63]), i2[0] = i2[0] + T | 0, i2[1] = i2[1] + P | 0, i2[2] = i2[2] + O | 0, i2[3] = i2[3] + x | 0;
                },
                _doFinalize: function() {
                  var t4 = this._data, r4 = t4.words, n3 = 8 * this._nDataBytes, s2 = 8 * t4.sigBytes;
                  r4[s2 >>> 5] |= 128 << 24 - s2 % 32;
                  var i2 = e3.floor(n3 / 4294967296), a2 = n3;
                  r4[15 + (s2 + 64 >>> 9 << 4)] = 16711935 & (i2 << 8 | i2 >>> 24) | 4278255360 & (i2 << 24 | i2 >>> 8), r4[14 + (s2 + 64 >>> 9 << 4)] = 16711935 & (a2 << 8 | a2 >>> 24) | 4278255360 & (a2 << 24 | a2 >>> 8), t4.sigBytes = 4 * (r4.length + 1), this._process();
                  for (var o2 = this._hash, c2 = o2.words, d2 = 0; d2 < 4; d2++) {
                    var l2 = c2[d2];
                    c2[d2] = 16711935 & (l2 << 8 | l2 >>> 24) | 4278255360 & (l2 << 24 | l2 >>> 8);
                  }
                  return o2;
                },
                clone: function() {
                  var e4 = i.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                }
              });
              function d(e4, t4, r4, n3, s2, i2, a2) {
                var o2 = e4 + (t4 & r4 | ~t4 & n3) + s2 + a2;
                return (o2 << i2 | o2 >>> 32 - i2) + t4;
              }
              function l(e4, t4, r4, n3, s2, i2, a2) {
                var o2 = e4 + (t4 & n3 | r4 & ~n3) + s2 + a2;
                return (o2 << i2 | o2 >>> 32 - i2) + t4;
              }
              function u(e4, t4, r4, n3, s2, i2, a2) {
                var o2 = e4 + (t4 ^ r4 ^ n3) + s2 + a2;
                return (o2 << i2 | o2 >>> 32 - i2) + t4;
              }
              function p(e4, t4, r4, n3, s2, i2, a2) {
                var o2 = e4 + (r4 ^ (t4 | ~n3)) + s2 + a2;
                return (o2 << i2 | o2 >>> 32 - i2) + t4;
              }
              t3.MD5 = i._createHelper(c), t3.HmacMD5 = i._createHmacHelper(c);
            }(Math), n2.MD5);
          },
          4725: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), function() {
              var e3 = n2, t3 = e3.lib.WordArray;
              function r3(e4, r4, n3) {
                for (var s = [], i = 0, a = 0; a < r4; a++)
                  if (a % 4) {
                    var o = n3[e4.charCodeAt(a - 1)] << a % 4 * 2 | n3[e4.charCodeAt(a)] >>> 6 - a % 4 * 2;
                    s[i >>> 2] |= o << 24 - i % 4 * 8, i++;
                  }
                return t3.create(s, i);
              }
              e3.enc.Base64url = {
                stringify: function(e4, t4) {
                  void 0 === t4 && (t4 = true);
                  var r4 = e4.words, n3 = e4.sigBytes, s = t4 ? this._safe_map : this._map;
                  e4.clamp();
                  for (var i = [], a = 0; a < n3; a += 3)
                    for (var o = (r4[a >>> 2] >>> 24 - a % 4 * 8 & 255) << 16 | (r4[a + 1 >>> 2] >>> 24 - (a + 1) % 4 * 8 & 255) << 8 | r4[a + 2 >>> 2] >>> 24 - (a + 2) % 4 * 8 & 255, c = 0; c < 4 && a + 0.75 * c < n3; c++)
                      i.push(s.charAt(o >>> 6 * (3 - c) & 63));
                  var d = s.charAt(64);
                  if (d) for (; i.length % 4; ) i.push(d);
                  return i.join("");
                },
                parse: function(e4, t4) {
                  void 0 === t4 && (t4 = true);
                  var n3 = e4.length, s = t4 ? this._safe_map : this._map, i = this._reverseMap;
                  if (!i) {
                    i = this._reverseMap = [];
                    for (var a = 0; a < s.length; a++) i[s.charCodeAt(a)] = a;
                  }
                  var o = s.charAt(64);
                  if (o) {
                    var c = e4.indexOf(o);
                    -1 !== c && (n3 = c);
                  }
                  return r3(e4, n3, i);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
              };
            }(), n2.enc.Base64url);
          },
          4756: (e2, t2, r2) => {
            var n2 = r2(4633)();
            e2.exports = n2;
            try {
              regeneratorRuntime = n2;
            } catch (e3) {
              "object" == typeof globalThis ? globalThis.regeneratorRuntime = n2 : Function("r", "regeneratorRuntime = r")(n2);
            }
          },
          4893: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.InvalidStateError = t2.UnsupportedError = void 0;
            class r2 extends Error {
              constructor(e3) {
                super(e3), this.name = "UnsupportedError", Error.hasOwnProperty("captureStackTrace") ? Error.captureStackTrace(this, r2) : this.stack = new Error(e3).stack;
              }
            }
            t2.UnsupportedError = r2;
            class n2 extends Error {
              constructor(e3) {
                super(e3), this.name = "InvalidStateError", Error.hasOwnProperty("captureStackTrace") ? Error.captureStackTrace(this, n2) : this.stack = new Error(e3).stack;
              }
            }
            t2.InvalidStateError = n2;
          },
          4905: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(7165), n2.pad.Iso10126 = {
              pad: function(e3, t3) {
                var r3 = 4 * t3, s = r3 - e3.sigBytes % r3;
                e3.concat(n2.lib.WordArray.random(s - 1)).concat(
                  n2.lib.WordArray.create([s << 24], 1)
                );
              },
              unpad: function(e3) {
                var t3 = 255 & e3.words[e3.sigBytes - 1 >>> 2];
                e3.sigBytes -= t3;
              }
            }, n2.pad.Iso10126);
          },
          4973: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { Zu: () => o, lp: () => a });
            var n2 = r2(467), s = r2(4756), i = r2.n(s), a = (r2(9027), function() {
              var e3 = (0, n2.A)(
                i().mark(function e4(t3) {
                  return i().wrap(function(e5) {
                    for (; ; )
                      switch (e5.prev = e5.next) {
                        case 0:
                          return void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}), void 0 === navigator.mediaDevices.getUserMedia && (navigator.mediaDevices.getUserMedia = function(e6) {
                            var t4 = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                            return t4 ? new Promise(function(r3, n3) {
                              t4.call(navigator, e6, r3, n3);
                            }) : Promise.reject(
                              new Error(
                                "getUserMedia is not implemented in this browser"
                              )
                            );
                          }), e5.next = 4, navigator.mediaDevices.getUserMedia(t3);
                        case 4:
                          return e5.abrupt("return", e5.sent);
                        case 5:
                        case "end":
                          return e5.stop();
                      }
                  }, e4);
                })
              );
              return function(t3) {
                return e3.apply(this, arguments);
              };
            }()), o = function() {
              var e3 = (0, n2.A)(
                i().mark(function e4(t3) {
                  return i().wrap(function(e5) {
                    for (; ; )
                      switch (e5.prev = e5.next) {
                        case 0:
                          return void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}), void 0 === navigator.mediaDevices.getDisplayMedia && (navigator.mediaDevices.getDisplayMedia = function(e6) {
                            var t4 = navigator.webkitGetDisplayMedia || navigator.mozGetDisplayMedia;
                            return t4 ? new Promise(function(r3, n3) {
                              t4.call(navigator, e6, r3, n3);
                            }) : Promise.reject(
                              new Error(
                                "getDisplayMedia is not implemented in this browser"
                              )
                            );
                          }), e5.next = 4, navigator.mediaDevices.getDisplayMedia(t3);
                        case 4:
                          return e5.abrupt("return", e5.sent);
                        case 5:
                        case "end":
                          return e5.stop();
                      }
                  }, e4);
                })
              );
              return function(t3) {
                return e3.apply(this, arguments);
              };
            }();
          },
          5020: (e2, t2, r2) => {
            var n2 = function(e3) {
              return String(Number(e3)) === e3 ? Number(e3) : e3;
            }, s = function(e3, t3, r3) {
              var s2 = e3.name && e3.names;
              e3.push && !t3[e3.push] ? t3[e3.push] = [] : s2 && !t3[e3.name] && (t3[e3.name] = {});
              var i2 = e3.push ? {} : s2 ? t3[e3.name] : t3;
              !function(e4, t4, r4, s3) {
                if (s3 && !r4) t4[s3] = n2(e4[1]);
                else
                  for (var i3 = 0; i3 < r4.length; i3 += 1)
                    null != e4[i3 + 1] && (t4[r4[i3]] = n2(e4[i3 + 1]));
              }(r3.match(e3.reg), i2, e3.names, e3.name), e3.push && t3[e3.push].push(i2);
            }, i = r2(5602), a = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
            t2.parse = function(e3) {
              var t3 = {}, r3 = [], n3 = t3;
              return e3.split(/(\r\n|\r|\n)/).filter(a).forEach(function(e4) {
                var t4 = e4[0], a2 = e4.slice(2);
                "m" === t4 && (r3.push({ rtp: [], fmtp: [] }), n3 = r3[r3.length - 1]);
                for (var o2 = 0; o2 < (i[t4] || []).length; o2 += 1) {
                  var c = i[t4][o2];
                  if (c.reg.test(a2)) return s(c, n3, a2);
                }
              }), t3.media = r3, t3;
            };
            var o = function(e3, t3) {
              var r3 = t3.split(/=(.+)/, 2);
              return 2 === r3.length ? e3[r3[0]] = n2(r3[1]) : 1 === r3.length && t3.length > 1 && (e3[r3[0]] = void 0), e3;
            };
            t2.parseParams = function(e3) {
              return e3.split(/;\s?/).reduce(o, {});
            }, t2.parseFmtpConfig = t2.parseParams, t2.parsePayloads = function(e3) {
              return e3.toString().split(" ").map(Number);
            }, t2.parseRemoteCandidates = function(e3) {
              for (var t3 = [], r3 = e3.split(" ").map(n2), s2 = 0; s2 < r3.length; s2 += 3)
                t3.push({ component: r3[s2], ip: r3[s2 + 1], port: r3[s2 + 2] });
              return t3;
            }, t2.parseImageAttributes = function(e3) {
              return e3.split(" ").map(function(e4) {
                return e4.substring(1, e4.length - 1).split(",").reduce(o, {});
              });
            }, t2.parseSimulcastStreamList = function(e3) {
              return e3.split(";").map(function(e4) {
                return e4.split(",").map(function(e5) {
                  var t3, r3 = false;
                  return "~" !== e5[0] ? t3 = n2(e5) : (t3 = n2(e5.substring(1, e5.length)), r3 = true), { scid: t3, paused: r3 };
                });
              });
            };
          },
          5071: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { V: () => n2 });
            var n2 = {
              HLS_STARTING: "HLS_STARTING",
              HLS_STARTED: "HLS_STARTED",
              HLS_PLAYABLE: "HLS_PLAYABLE",
              HLS_STOPPING: "HLS_STOPPING",
              HLS_STOPPED: "HLS_STOPPED"
            };
          },
          5370: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
          },
          5414: (e2) => {
            self, e2.exports = (() => {
              var e3 = {
                43: function(e4, t3, r3) {
                  var n3, s;
                  !function() {
                    "use strict";
                    n3 = function() {
                      var e5 = function() {
                      }, t4 = "undefined", r4 = typeof window !== t4 && typeof window.navigator !== t4 && /Trident\/|MSIE /.test(window.navigator.userAgent), n4 = ["trace", "debug", "info", "warn", "error"];
                      function s2(e6, t5) {
                        var r5 = e6[t5];
                        if ("function" == typeof r5.bind) return r5.bind(e6);
                        try {
                          return Function.prototype.bind.call(r5, e6);
                        } catch (t6) {
                          return function() {
                            return Function.prototype.apply.apply(r5, [
                              e6,
                              arguments
                            ]);
                          };
                        }
                      }
                      function i() {
                        console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [
                          console,
                          arguments
                        ])), console.trace && console.trace();
                      }
                      function a(t5, r5) {
                        for (var s3 = 0; s3 < n4.length; s3++) {
                          var i2 = n4[s3];
                          this[i2] = s3 < t5 ? e5 : this.methodFactory(i2, t5, r5);
                        }
                        this.log = this.debug;
                      }
                      function o(e6, r5, n5) {
                        return function() {
                          typeof console !== t4 && (a.call(this, r5, n5), this[e6].apply(this, arguments));
                        };
                      }
                      function c(n5, a2, c2) {
                        return function(n6) {
                          return "debug" === n6 && (n6 = "log"), typeof console !== t4 && ("trace" === n6 && r4 ? i : void 0 !== console[n6] ? s2(console, n6) : void 0 !== console.log ? s2(console, "log") : e5);
                        }(n5) || o.apply(this, arguments);
                      }
                      function d(e6, r5, s3) {
                        var i2, o2 = this, d2 = "loglevel";
                        function l2() {
                          var e7;
                          if (typeof window !== t4 && d2) {
                            try {
                              e7 = window.localStorage[d2];
                            } catch (e8) {
                            }
                            if (typeof e7 === t4)
                              try {
                                var r6 = window.document.cookie, n5 = r6.indexOf(encodeURIComponent(d2) + "=");
                                -1 !== n5 && (e7 = /^([^;]+)/.exec(r6.slice(n5))[1]);
                              } catch (e8) {
                              }
                            return void 0 === o2.levels[e7] && (e7 = void 0), e7;
                          }
                        }
                        "string" == typeof e6 ? d2 += ":" + e6 : "symbol" == typeof e6 && (d2 = void 0), o2.name = e6, o2.levels = {
                          TRACE: 0,
                          DEBUG: 1,
                          INFO: 2,
                          WARN: 3,
                          ERROR: 4,
                          SILENT: 5
                        }, o2.methodFactory = s3 || c, o2.getLevel = function() {
                          return i2;
                        }, o2.setLevel = function(r6, s4) {
                          if ("string" == typeof r6 && void 0 !== o2.levels[r6.toUpperCase()] && (r6 = o2.levels[r6.toUpperCase()]), !("number" == typeof r6 && r6 >= 0 && r6 <= o2.levels.SILENT))
                            throw "log.setLevel() called with invalid level: " + r6;
                          if (i2 = r6, false !== s4 && function(e7) {
                            var r7 = (n4[e7] || "silent").toUpperCase();
                            if (typeof window !== t4 && d2) {
                              try {
                                return void (window.localStorage[d2] = r7);
                              } catch (e8) {
                              }
                              try {
                                window.document.cookie = encodeURIComponent(d2) + "=" + r7 + ";";
                              } catch (e8) {
                              }
                            }
                          }(r6), a.call(o2, r6, e6), typeof console === t4 && r6 < o2.levels.SILENT)
                            return "No console available for logging";
                        }, o2.setDefaultLevel = function(e7) {
                          l2() || o2.setLevel(e7, false);
                        }, o2.enableAll = function(e7) {
                          o2.setLevel(o2.levels.TRACE, e7);
                        }, o2.disableAll = function(e7) {
                          o2.setLevel(o2.levels.SILENT, e7);
                        };
                        var u2 = l2();
                        null == u2 && (u2 = null == r5 ? "WARN" : r5), o2.setLevel(u2, false);
                      }
                      var l = new d(), u = {};
                      l.getLogger = function(e6) {
                        if ("symbol" != typeof e6 && "string" != typeof e6 || "" === e6)
                          throw new TypeError(
                            "You must supply a name when creating a logger."
                          );
                        var t5 = u[e6];
                        return t5 || (t5 = u[e6] = new d(e6, l.getLevel(), l.methodFactory)), t5;
                      };
                      var p = typeof window !== t4 ? window.log : void 0;
                      return l.noConflict = function() {
                        return typeof window !== t4 && window.log === l && (window.log = p), l;
                      }, l.getLoggers = function() {
                        return u;
                      }, l.default = l, l;
                    }, void 0 === (s = n3.call(t3, r3, t3, e4)) || (e4.exports = s);
                  }();
                }
              }, t2 = {};
              function r2(n3) {
                var s = t2[n3];
                if (void 0 !== s) return s.exports;
                var i = t2[n3] = { exports: {} };
                return e3[n3].call(i.exports, i, i.exports, r2), i.exports;
              }
              r2.d = (e4, t3) => {
                for (var n3 in t3)
                  r2.o(t3, n3) && !r2.o(e4, n3) && Object.defineProperty(e4, n3, { enumerable: true, get: t3[n3] });
              }, r2.o = (e4, t3) => Object.prototype.hasOwnProperty.call(e4, t3), r2.r = (e4) => {
                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e4, Symbol.toStringTag, {
                  value: "Module"
                }), Object.defineProperty(e4, "__esModule", { value: true });
              };
              var n2 = {};
              return (() => {
                "use strict";
                r2.r(n2), r2.d(n2, { VideoSDKMetrics: () => fe });
                const e4 = "inbound", t3 = "outbound", s = {
                  codec_id_in: "",
                  codec_in: {
                    mime_type: null,
                    clock_rate: null,
                    sdp_fmtp_line: null
                  },
                  delta_jitter_ms_in: 0,
                  delta_rtt_ms_out: null,
                  percent_packets_lost_in: 0,
                  delta_packets_in: 0,
                  delta_packets_lost_in: 0,
                  total_packets_in: 0,
                  total_packets_lost_in: 0,
                  total_KBytes_in: 0,
                  delta_KBytes_in: 0,
                  delta_kbs_in: 0,
                  timestamp_in: null,
                  ssrc: "",
                  total_concealment_events: 0,
                  delta_concealment_events: 0,
                  total_inserted_samples_for_decelaration: 0,
                  delta_inserted_samples_for_decelaration: 0,
                  total_removed_samples_for_accelaration: 0,
                  delta_removed_samples_for_accelaration: 0,
                  direction: e4
                }, i = {
                  codec_id_out: "",
                  codec_out: {
                    mime_type: null,
                    clock_rate: null,
                    sdp_fmtp_line: null
                  },
                  delta_jitter_ms_out: 0,
                  delta_rtt_ms_out: null,
                  percent_packets_lost_out: 0,
                  delta_packets_out: 0,
                  delta_packets_lost_out: 0,
                  total_packets_out: 0,
                  total_packets_lost_out: 0,
                  total_KBytes_out: 0,
                  delta_KBytes_out: 0,
                  delta_kbs_out: 0,
                  timestamp_out: null,
                  ssrc: "",
                  direction: t3
                }, a = {
                  codec_id_in: "",
                  size_in: { width: null, height: null, framerate: null },
                  codec_in: { mime_type: null, clock_rate: null },
                  delta_jitter_ms_in: 0,
                  percent_packets_lost_in: 0,
                  delta_packets_in: 0,
                  delta_packets_lost_in: 0,
                  total_packets_in: 0,
                  total_packets_lost_in: 0,
                  total_KBytes_in: 0,
                  delta_KBytes_in: 0,
                  delta_kbs_in: 0,
                  ssrc: "",
                  direction: e4
                }, o = {
                  codec_id_out: "",
                  size_out: { width: null, height: null, framerate: null },
                  codec_out: { mime_type: null, clock_rate: null },
                  delta_jitter_ms_out: 0,
                  delta_rtt_ms_out: null,
                  percent_packets_lost_out: 0,
                  delta_packets_out: 0,
                  delta_packets_lost_out: 0,
                  total_packets_out: 0,
                  total_packets_lost_out: 0,
                  total_KBytes_out: 0,
                  delta_KBytes_out: 0,
                  delta_kbs_out: 0,
                  limitation_out: {
                    reason: null,
                    durations: null,
                    resolutionChanges: 0
                  },
                  timestamp_out: null,
                  ssrc: "",
                  direction: t3
                }, c = "inbound-rtp", d = "bytesReceived", l = "bytesSent", u = "clockRate", p = "codecId", h = "currentRoundTripTime", m = "roundTripTime", f = "fractionLost", g = "frameHeight", v = "frameWidth", _ = "qualityLimitationReason", y = "qualityLimitationDurations", b = "qualityLimitationResolutionChanges", w = "id", S = "jitter", R = "kind", k = "mimeType", E = "packetsLost", C = "packetsReceived", T = "packetsSent", P = "responsesReceived", O = "ssrc", x = "selected", D = "timestamp", I = "totalRoundTripTime", A = "roundTripTimeMeasurements", M = "type", L = "framesDecoded", N = "framesEncoded", j = "totalDecodeTime", B = "totalEncodeTime", F = "pliCount", U = "nackCount", W = "trackId", q = "trackIdentifier", V = "mediaSourceId", H = "audio", z = "video", G = {
                  0: "ETHERNET",
                  2: "CELLULAR_5G",
                  3: "WIFI",
                  5: "CELLULAR_4G",
                  10: "CELLULAR"
                }, K = "audio", $ = "video", J = "network", Q = "data";
                var Y = r2(43);
                const X = () => `${(/* @__PURE__ */ new Date()).toISOString()} | metrics`, Z = (e5, t4, r3) => `${e5} | ${t4} | ${r3}`;
                Y.setDefaultLevel(Y.levels.TRACE);
                const ee = (e5, t4, r3) => {
                  r3 ? Y.debug(Z(X(), e5, t4), r3) : Y.debug(Z(X(), e5, t4));
                }, te = (e5, t4) => {
                  Y.warn(Z(X(), e5, t4));
                }, re = (e5, t4) => {
                  Y.error(Z(X(), e5, t4));
                }, ne = "extractor   ", se = (t4, r3, n3) => {
                  if (!r3) return null;
                  const c2 = {};
                  let d2 = r3[H][t4];
                  d2 || (d2 = n3 === e4 ? { ...s } : { ...i }), c2[H] = d2;
                  let l2 = r3[z][t4];
                  return l2 || (l2 = n3 === e4 ? { ...a } : { ...o }), c2[z] = l2, c2;
                }, ie = (e5, t4, r3, n3) => {
                  let s2 = false;
                  const i2 = n3[t4].total_rtt_ms_out, a2 = n3[t4].total_rtt_measure_out, o2 = r3 ? r3[t4].total_rtt_ms_out : 0, c2 = r3 ? r3[t4].total_rtt_measure_out : 0, d2 = { rtt: null, totalRTT: i2, totalRTTMeasurements: a2 };
                  if (e5[D] === n3[t4].timestamp_out) return d2;
                  if (!Object.prototype.hasOwnProperty.call(e5, m)) return d2;
                  if (Object.prototype.hasOwnProperty.call(e5, A) && (s2 = true, 0 === Number(e5[A]) || Number(e5[A]) - c2 === a2))
                    return d2;
                  const l2 = Number(1e3) * Number(e5[m]);
                  let u2 = i2 + l2, p2 = a2 + 1;
                  return s2 && (u2 = Number(1e3) * Number(e5[I]) - o2, p2 = Number(e5[A]) - c2), { rtt: l2, totalRTT: u2, totalRTTMeasurements: p2 };
                }, ae = (e5, t4, r3) => e5[D] === r3[t4].timestamp_out ? null : Object.prototype.hasOwnProperty.call(e5, S) ? Number(1e3) * (Number(e5[S]) || 0) : null, oe = (e5, t4, r3, n3) => {
                  if (!Object.prototype.hasOwnProperty.call(e5, T) || !Object.prototype.hasOwnProperty.call(e5, l))
                    return {
                      packetsSent: r3[t4].total_packets_out,
                      packetsLost: r3[t4].total_packets_lost_out,
                      bytesSent: r3[t4].total_KBytes_out
                    };
                  const s2 = Number(e5[T]) || 0 - (n3 ? n3[t4].total_packets_out : 0), i2 = s2 - r3[t4].total_packets_out, a2 = Number(e5[l]) / 1024 - (n3 ? n3[t4].total_KBytes_out : 0), o2 = a2 - r3[t4].total_KBytes_out, c2 = e5[D] || Date.now(), d2 = n3 ? n3.timestamp : null;
                  let u2 = r3.timestamp;
                  !u2 && d2 && (u2 = d2);
                  const p2 = u2 ? c2 - u2 : 0;
                  return {
                    packetsSent: s2,
                    deltaPacketsSent: i2,
                    KBytesSent: a2,
                    deltaKBytesSent: o2,
                    kbsSent: p2 > 0 ? 8e-3 * o2 * 1024 / p2 * 1e3 : 0
                  };
                }, ce = (e5, t4, r3, n3) => {
                  let s2 = r3[t4].total_packets_lost_out, i2 = 0, a2 = 0;
                  return Object.prototype.hasOwnProperty.call(e5, E) && (s2 = Number(e5[E]) || 0 - (n3 ? n3[t4].total_packets_lost_out : 0), i2 = s2 - r3[t4].total_packets_lost_out), Object.prototype.hasOwnProperty.call(e5, f) && (a2 = Number(100 * e5[f])), { packetsLost: s2, deltaPacketsLost: i2, fractionLost: a2 };
                }, de = (e5, t4, r3, n3) => {
                  if (!Object.prototype.hasOwnProperty.call(e5, C) || !Object.prototype.hasOwnProperty.call(e5, E) || !Object.prototype.hasOwnProperty.call(e5, d))
                    return {
                      percent_packets_lost: r3[t4].percent_packets_lost_in,
                      packetsReceived: r3[t4].total_packets_in,
                      packetsLost: r3[t4].total_packets_lost_in,
                      bytesReceived: r3[t4].total_KBytes_in
                    };
                  const s2 = (Number(e5[C]) || 0) - (n3 ? n3[t4].total_packets_in : 0), i2 = (Number(e5[E]) || 0) - (n3 ? n3[t4].total_packets_lost_in : 0), a2 = i2 - r3[t4].total_packets_lost_in, o2 = s2 - r3[t4].total_packets_in, c2 = s2 !== r3[t4].total_packets_in ? 100 * a2 / (a2 + o2) : 0, l2 = Number(e5[d]) / 1024 - (n3 ? n3[t4].total_KBytes_in : 0), u2 = l2 - r3[t4].total_KBytes_in, p2 = e5[D] || Date.now(), h2 = n3 ? n3.timestamp : null;
                  let m2 = r3.timestamp;
                  !m2 && h2 && (m2 = h2);
                  const f2 = m2 ? p2 - m2 : 0;
                  return {
                    percentPacketsLost: c2,
                    packetsReceived: s2,
                    deltaPacketsReceived: o2,
                    packetsLost: i2,
                    deltaPacketsLost: a2,
                    KBytesReceived: l2,
                    deltaKBytesReceived: u2,
                    kbsReceived: f2 > 0 ? 8e-3 * u2 * 1024 / f2 * 1e3 : 0
                  };
                }, le = (e5) => "relay" !== e5.candidateType ? "" : e5.relayProtocol || "", ue = (e5) => Object.prototype.hasOwnProperty.call(e5, g) && Object.prototype.hasOwnProperty.call(e5, v) ? {
                  width: e5[v] || null,
                  height: e5[g] || null,
                  framerate: e5.framesPerSecond
                } : { width: null, height: null, framerate: null };
                class pe {
                  constructor(e5, t4) {
                    this._callbacks = { onStatsCollected: null }, this._id = `collector-${t4}`, this._moduleName = this._id, this._probeId = t4, this._config = e5, this._state = "idle", this._statsReports = [];
                  }
                  registerCallback(e5, t4, r3) {
                    e5 in this._callbacks ? (this._callbacks[e5] = { callback: t4, context: r3 }, ee(this._moduleName, `registered callback '${e5}'`)) : re(
                      this._moduleName,
                      `can't register callback for '${e5}' - not found`
                    );
                  }
                  unregisterCallback(e5) {
                    e5 in this._callbacks ? (this._callbacks[e5] = null, delete this._callbacks[e5], ee(this._moduleName, `unregistered callback '${e5}'`)) : re(
                      this._moduleName,
                      `can't unregister callback for '${e5}' - not found`
                    );
                  }
                  analyze(r3, n3) {
                    const m2 = ((e5) => {
                      const t4 = {
                        name: "",
                        meetingId: "",
                        peerId: "",
                        timestamp: null,
                        count: 0,
                        audio: {},
                        video: {},
                        network: { infrastructure: 3 },
                        data: {
                          delta_kbs_bandwidth_in: 0,
                          delta_kbs_bandwidth_out: 0,
                          delta_rtt_connectivity_ms: null,
                          total_rtt_connectivity_ms: 0
                        }
                      };
                      if (e5) {
                        const t5 = {
                          ...e5,
                          audio: {},
                          video: {},
                          data: { ...e5.data },
                          network: { ...e5.network }
                        };
                        return Object.keys(e5.audio).forEach((r4) => {
                          t5.audio[r4] = { ...e5.audio[r4] };
                        }), Object.keys(e5.video).forEach((r4) => {
                          t5.video[r4] = { ...e5.video[r4] };
                        }), t5;
                      }
                      return {
                        ...t4,
                        audio: {},
                        video: {},
                        data: { ...t4.data },
                        network: { ...t4.network }
                      };
                    })(n3);
                    m2.name = this._config.name, m2.meetingId = this._config.meetingId, m2.peerId = this._config.peerId, m2.count = n3 ? n3.count + 1 : 1;
                    let f2 = null;
                    return r3.forEach((r4) => {
                      !f2 && r4.timestamp && (f2 = r4.timestamp), ((r5, n4, s2, i2) => {
                        if (!r5) return [];
                        switch (r5[M]) {
                          case "candidate-pair":
                            let a2 = false;
                            if (r5.nominated && "succeeded" === r5.state && (a2 = true, ee(
                              ne,
                              `analyze() - got stats ${r5[M]} for ${s2}`,
                              r5
                            ), x in r5 && !r5[x] && (a2 = false)), a2) {
                              r5.localCandidateId, r5.remoteCandidateId;
                              const e5 = ((e6, t5, r6) => {
                                const n5 = (e6[d] || 0) / 1024 - (r6 ? r6.data.total_KBytes_in : 0), s3 = (e6[l] || 0) / 1024 - (r6 ? r6.data.total_KBytes_out : 0), i3 = e6[D] || Date.now(), a3 = n5 - t5.data.total_KBytes_in, o3 = s3 - t5.data.total_KBytes_out, c2 = r6 ? r6.timestamp : null;
                                let u2 = t5.timestamp;
                                !u2 && c2 && (u2 = c2);
                                const p2 = u2 ? i3 - u2 : 0;
                                return {
                                  total_KBytes_received: n5,
                                  total_KBytes_sent: s3,
                                  delta_KBytes_received: a3,
                                  delta_KBytes_sent: o3,
                                  kbs_speed_received: p2 > 0 ? 8e-3 * a3 * 1024 / p2 * 1e3 : 0,
                                  kbs_speed_sent: p2 > 0 ? 8e-3 * o3 * 1024 / p2 * 1e3 : 0
                                };
                              })(r5, n4, i2), t4 = (((e6) => {
                                e6.availableIncomingBitrate, e6.availableOutgoingBitrate;
                              })(r5), ((e6, t5, r6, n5) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  h
                                ))
                                  return {
                                    rtt: null,
                                    totalRTT: n5[t5].total_rtt_connectivity_ms,
                                    totalRTTMeasurements: n5[t5].total_rtt_connectivity_measure
                                  };
                                const s3 = Number(1e3) * Number(e6[h]);
                                let i3 = n5[t5].total_rtt_connectivity_ms + s3, a3 = n5[t5].total_rtt_connectivity_measure + 1;
                                return Object.prototype.hasOwnProperty.call(
                                  e6,
                                  I
                                ) && (i3 = Number(1e3) * Number(e6[I]) - (r6 ? r6[t5].total_rtt_connectivity_ms : 0)), Object.prototype.hasOwnProperty.call(
                                  e6,
                                  P
                                ) && (a3 = Number(e6[P]) - (r6 ? r6[t5].total_rtt_connectivity_measure : 0)), {
                                  rtt: s3,
                                  totalRTT: i3,
                                  totalRTTMeasurements: a3
                                };
                              })(r5, "data", i2, n4));
                              return [
                                {
                                  type: Q,
                                  value: {
                                    total_KBytes_in: e5.total_KBytes_received
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    total_KBytes_out: e5.total_KBytes_sent
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    delta_KBytes_in: e5.delta_KBytes_received
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    delta_KBytes_out: e5.delta_KBytes_sent
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    delta_kbs_in: e5.kbs_speed_received
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    delta_kbs_out: e5.kbs_speed_sent
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    delta_rtt_connectivity_ms: t4.rtt
                                  }
                                }
                              ];
                            }
                            break;
                          case "local-candidate":
                            if (r5[w] === n4.network.local_candidate_id)
                              return [
                                {
                                  type: J,
                                  value: {
                                    infrastructure: r5.networkType
                                  }
                                },
                                {
                                  type: J,
                                  value: {
                                    local_candidate_protocol: r5.protocol || ""
                                  }
                                },
                                {
                                  type: J,
                                  value: {
                                    local_candidate_relay_protocol: le(r5)
                                  }
                                }
                              ];
                            break;
                          case c: {
                            ee(
                              ne,
                              `analyze() - got stats ${r5[M]} for ${s2}`,
                              r5
                            );
                            const t4 = r5[O], a3 = se(t4, n4, e4);
                            a3 && (a3.timestamp = n4.timestamp);
                            const o3 = se(t4, i2, e4);
                            if (o3 && (o3.timestamp = i2.timestamp), r5[R] === H) {
                              const e5 = de(r5, H, a3, o3), n5 = ae(r5, H, a3), s3 = r5[p] || "", i3 = ((e6, t5, r6) => {
                                const n6 = Number(e6.concealmentEvents) || 0, s4 = n6 - (r6[t5].total_concealment_events || 0), i4 = Number(
                                  e6.insertedSamplesForDeceleration
                                ) || 0, a4 = i4 - (r6[t5].total_inserted_samples_for_decelaration || 0), o4 = Number(
                                  e6.removedSamplesForAcceleration
                                ) || 0;
                                return {
                                  totalConcealmentEvents: n6,
                                  deltaConcealmentEvents: s4,
                                  totalInsertedSamplesForDecelaration: i4,
                                  deltaInsertedSamplesForDecelaration: a4,
                                  totalRemovedSamplesForAccelaration: o4,
                                  deltaRemovedSampleForAccelaration: o4 - (r6[t5].total_removed_samples_for_accelaration || 0)
                                };
                              })(r5, H, a3);
                              return [
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { codec_id_in: s3 }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    total_packets_in: e5.packetsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    delta_packets_in: e5.deltaPacketsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    total_packets_lost_in: e5.packetsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    delta_packets_lost_in: e5.deltaPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    percent_packets_lost_in: e5.percentPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    total_KBytes_in: e5.KBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    delta_KBytes_in: e5.deltaKBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { delta_kbs_in: e5.kbsReceived }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { delta_jitter_ms_in: n5 }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    total_concealment_events: i3.totalConcealmentEvents
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    delta_concealment_events: i3.deltaConcealmentEvents
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    total_inserted_samples_for_decelaration: i3.totalInsertedSamplesForDecelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    delta_inserted_samples_for_decelaration: i3.deltaInsertedSamplesForDecelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    total_removed_samples_for_accelaration: i3.totalRemovedSamplesForAccelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    delta_removed_samples_for_accelaration: i3.deltaRemovedSampleForAccelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { track_in: r5[W] }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { track_id_in: r5[q] }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { media_source_id: r5[V] }
                                }
                              ];
                            }
                            if (r5[R] === z) {
                              ((e6, t5) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  L
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  j
                                ))
                                  return {
                                    delta_ms_decode_frame: t5[z].delta_ms_decode_frame_in,
                                    frames_decoded: t5[z].total_frames_decoded_in,
                                    total_decode_time: t5[z].total_time_decoded_in
                                  };
                                e6[L], e6[j], t5[z].total_time_decoded_in, t5[z].total_frames_decoded_in;
                              })(r5, a3);
                              const e5 = de(r5, z, a3, o3), n5 = ae(r5, z, a3), s3 = (r5.decoderImplementation, r5[p] || null), i3 = ue(r5);
                              return ((e6, t5, r6) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  F
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  U
                                ))
                                  return {
                                    pliCount: t5.total_pli_sent_in,
                                    nackCount: t5.total_nack_sent_in,
                                    deltaPliCount: 0,
                                    deltaNackCount: 0
                                  };
                                e6[F], r6 && r6[z].total_pli_sent_in, e6[U], r6 && r6[z].total_nack_sent_in, t5[z].total_pli_sent_in, t5[z].total_nack_sent_in;
                              })(r5, a3, o3), [
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { codec_id_in: s3 }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_packets_in: e5.packetsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    delta_packets_in: e5.deltaPacketsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_packets_lost_in: e5.packetsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    delta_packets_lost_in: e5.deltaPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    percent_packets_lost_in: e5.percentPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_KBytes_in: e5.KBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    delta_KBytes_in: e5.deltaKBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    delta_kbs_in: e5.kbsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { delta_jitter_ms_in: n5 }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { size_in: i3 }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { track_in: r5[W] }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { track_id_in: r5[q] }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { media_source_id: r5[V] }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { pause_count: r5.pauseCount }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_pauses_duration: r5.totalPausesDuration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    freeze_count: r5.freezeCount
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_freezes_duration: r5.totalFreezesDuration
                                  }
                                }
                              ];
                            }
                            break;
                          }
                          case "outbound-rtp": {
                            ee(
                              ne,
                              `analyze() - got stats ${r5[M]} for ${s2}`,
                              r5
                            );
                            const e5 = r5[O], a3 = se(e5, n4, t3);
                            a3 && (a3.timestamp = n4.timestamp);
                            const o3 = se(e5, i2, t3);
                            if (o3 && (o3.timestamp = i2.timestamp), r5[R] === H) {
                              const t4 = r5[p] || null, n5 = oe(r5, H, a3, o3);
                              return [
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { codec_id_out: t4 }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    total_packets_out: n5.packetsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    delta_packets_out: n5.deltaPacketsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    total_KBytes_out: n5.KBytesSent
                                  }
                                },
                                {
                                  type: K,
                                  value: {
                                    delta_KBytes_out: n5.deltaKBytesSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { delta_kbs_out: n5.kbsSent }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { track_out: r5[W] }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { track_id_out: r5[q] }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { media_source_id: r5[V] }
                                }
                              ];
                            }
                            if (r5[R] === z) {
                              r5.encoderImplementation;
                              const t4 = r5[p] || null, n5 = (((e6, t5) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  N
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  B
                                ))
                                  return {
                                    delta_ms_encode_frame: t5[z].delta_ms_encode_frame_out,
                                    frames_encoded: t5[z].total_frames_encoded_out,
                                    total_encode_time: t5[z].total_time_encoded_out
                                  };
                                e6[N], e6[B], t5[z].total_time_encoded_out, t5[z].total_frames_encoded_out;
                              })(r5, a3), ue(r5)), s3 = ((e6) => {
                                const t5 = Object.prototype.hasOwnProperty.call(
                                  e6,
                                  _
                                ) ? e6[_] : null, r6 = Object.prototype.hasOwnProperty.call(
                                  e6,
                                  b
                                ) ? e6[b] : null, n6 = Object.prototype.hasOwnProperty.call(
                                  e6,
                                  y
                                ) ? e6[y] : null;
                                return n6 && Object.keys(n6).forEach((e7) => {
                                  n6[e7] > 1e3 && (n6[e7] = Number(n6[e7] / 1e3));
                                }), {
                                  reason: t5,
                                  durations: n6,
                                  resolutionChanges: r6
                                };
                              })(r5), i3 = (((e6, t5, r6) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  F
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  U
                                ))
                                  return {
                                    pliCount: t5.total_pli_received_out,
                                    nackCount: t5.total_nack_received_out,
                                    deltaPliCount: 0,
                                    deltaNackCount: 0
                                  };
                                e6[F], r6 && r6[z].total_pli_received_out, e6[U], r6 && r6[z].total_nack_received_out, t5[z].total_pli_received_out, t5[z].total_nack_received_out;
                              })(r5, a3, o3), oe(r5, z, a3, o3));
                              return [
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { codec_id_out: t4 }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    total_packets_out: i3.packetsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    delta_packets_out: i3.deltaPacketsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    total_KBytes_out: i3.KBytesSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    delta_KBytes_out: i3.deltaKBytesSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { delta_kbs_out: i3.kbsSent }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { size_out: n5 }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { limitation_out: s3 }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { track_out: r5[W] }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { track_id_out: r5[q] }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { media_source_id: r5[V] }
                                }
                              ];
                            }
                            break;
                          }
                          case "media-source": {
                            ee(
                              ne,
                              `analyze() - got stats ${r5[M]} for ${s2}`,
                              r5
                            );
                            const e5 = [];
                            return Object.keys(n4[H]).forEach((t4) => {
                              const s3 = n4[H][t4];
                              if (s3.media_source_id === r5[w]) {
                                var i3 = r5[q];
                                e5.push({
                                  ssrc: s3.ssrc,
                                  type: K,
                                  value: { track_id_out: i3 }
                                });
                              }
                            }), Object.keys(n4[z]).forEach((t4) => {
                              const s3 = n4[z][t4];
                              if (s3.media_source_id === r5[w]) {
                                var i3 = r5[q];
                                e5.push({
                                  ssrc: s3.ssrc,
                                  type: $,
                                  value: { track_id_out: i3 }
                                });
                              }
                            }), e5;
                          }
                          case "track": {
                            ee(
                              ne,
                              `analyze() - got stats ${r5[M]} for ${s2}`,
                              r5
                            );
                            const e5 = [];
                            return Object.keys(n4[H]).forEach((t4) => {
                              const i3 = n4[H][t4];
                              if (i3.track_in === r5[w] || i3.track_out === r5[w]) {
                                ee(
                                  ne,
                                  `analyze() - got stats ${r5[M]} for ${s2}`,
                                  r5
                                );
                                var a3 = r5[q];
                                r5[w] === i3.track_in ? e5.push({
                                  ssrc: i3.ssrc,
                                  type: K,
                                  value: { track_id_in: a3 }
                                }) : e5.push({
                                  ssrc: i3.ssrc,
                                  type: K,
                                  value: { track_id_out: a3 }
                                });
                              }
                            }), Object.keys(n4[z]).forEach((t4) => {
                              const i3 = n4[z][t4];
                              if (i3.track_in === r5[w] || i3.track_out === r5[w]) {
                                ee(
                                  ne,
                                  `analyze() - got stats ${r5[M]} for ${s2}`,
                                  r5
                                );
                                var a3 = r5[q];
                                r5[w] === i3.track_in ? e5.push({
                                  ssrc: i3.ssrc,
                                  type: $,
                                  value: { track_id_in: a3 }
                                }) : e5.push({
                                  ssrc: i3.ssrc,
                                  type: $,
                                  value: { track_id_out: a3 }
                                });
                              }
                            }), e5;
                          }
                          case "codec":
                            const o2 = [];
                            return Object.keys(n4[H]).forEach((e5) => {
                              const t4 = n4[H][e5];
                              if (t4.codec_id_in === r5[w] || t4.codec_id_out === r5[w]) {
                                ee(
                                  ne,
                                  `analyze() - got stats ${r5[M]} for ${s2}`,
                                  r5
                                );
                                const e6 = ((e7) => ({
                                  channels: e7.channels || null,
                                  clock_rate: e7[u] || null,
                                  mime_type: e7[k] || null,
                                  sdp_fmtp_line: e7.sdpFmtpLine || null
                                }))(r5);
                                r5[w] === t4.codec_id_in ? o2.push({
                                  ssrc: t4.ssrc,
                                  type: K,
                                  value: { codec_in: e6 }
                                }) : o2.push({
                                  ssrc: t4.ssrc,
                                  type: K,
                                  value: { codec_out: e6 }
                                });
                              }
                            }), Object.keys(n4[z]).forEach((e5) => {
                              const t4 = n4[z][e5];
                              if (t4.codec_id_in === r5[w] || t4.codec_id_out === r5[w]) {
                                ee(
                                  ne,
                                  `analyze() - got stats ${r5[M]} for ${s2}`,
                                  r5
                                );
                                const e6 = ((e7) => ({
                                  clock_rate: e7[u] || null,
                                  mime_type: e7[k] || null
                                }))(r5);
                                r5[w] === t4.codec_id_in ? o2.push({
                                  ssrc: t4.ssrc,
                                  type: $,
                                  value: { codec_in: e6 }
                                }) : o2.push({
                                  ssrc: t4.ssrc,
                                  type: $,
                                  value: { codec_out: e6 }
                                });
                              }
                            }), o2;
                          case "remote-inbound-rtp": {
                            ee(
                              ne,
                              `analyze() - got stats ${r5[M]} for ${s2}`,
                              r5
                            );
                            const e5 = r5[O], a3 = se(e5, n4, t3), o3 = se(e5, i2, t3);
                            if (r5[R] === H) {
                              const t4 = ie(r5, H, o3, a3), n5 = ae(r5, H, a3), s3 = ce(r5, H, a3, o3);
                              return [
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { delta_rtt_ms_out: t4.rtt }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { delta_jitter_ms_out: n5 }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { timestamp_out: r5[D] }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    total_packets_lost_out: s3.packetsLost
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    delta_packets_lost_out: s3.deltaPacketsLost
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    percent_packets_lost_out: s3.fractionLost
                                  }
                                }
                              ];
                            }
                            if (r5[R] === z) {
                              const t4 = ie(r5, z, o3, a3), n5 = ae(r5, z, a3), s3 = ce(r5, z, a3, o3);
                              return [
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { delta_rtt_ms_out: t4.rtt }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { delta_jitter_ms_out: n5 }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { timestamp_out: r5[D] }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    total_packets_lost_out: s3.packetsLost
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    delta_packets_lost_out: s3.deltaPacketsLost
                                  }
                                }
                              ];
                            }
                            break;
                          }
                          case "remote-outbound-rtp": {
                            ee(
                              ne,
                              `analyze() - got stats ${r5[M]} for ${s2}`,
                              r5
                            );
                            const e5 = r5[O], a3 = se(e5, n4, t3), o3 = se(e5, i2, t3);
                            if (r5[R] === H) {
                              const t4 = ie(r5, H, o3, a3);
                              return [
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { delta_rtt_ms_in: t4.rtt }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { timestamp_in: r5[D] }
                                }
                              ];
                            }
                            break;
                          }
                        }
                        return [];
                      })(r4, m2, m2.name, null).forEach((e5) => {
                        if (e5.value && e5.type)
                          if (e5.ssrc) {
                            let d2 = m2[e5.type][e5.ssrc];
                            d2 || (t4 = e5.type, n4 = r4.type, d2 = t4 === H ? n4 === c ? { ...s } : { ...i } : n4 === c ? { ...a } : { ...o }, d2.ssrc = e5.ssrc, m2[e5.type][e5.ssrc] = d2), Object.keys(e5.value).forEach((t5) => {
                              void 0 !== e5.value[t5] && (d2[t5] = e5.value[t5]);
                            });
                          } else
                            Object.keys(e5.value).forEach((t5) => {
                              void 0 !== e5.value[t5] && (m2[e5.type][t5] = e5.value[t5]);
                            });
                        var t4, n4;
                      });
                    }), m2.timestamp = f2, m2;
                  }
                  async collectStats() {
                    try {
                      const e5 = await this._config.monitoringObject.getStats(), t4 = this.analyze(
                        e5,
                        this._statsReports.slice().pop() || null
                      );
                      return this._statsReports.push(t4), this.fireOnStatsCollected(t4), e5;
                    } catch (e5) {
                      return re(this._moduleName, `got error ${e5}`), null;
                    }
                  }
                  fireOnStatsCollected(r3) {
                    if (this._callbacks.onStatsCollected) {
                      const n3 = {};
                      n3.meetingId = r3.meetingId, n3.peerId = r3.peerId, n3.name = r3.name, n3.audio = [], n3.video = [], Object.values(r3.audio).forEach((s2) => {
                        const i2 = {};
                        if (i2.network = G[r3.network.infrastructure], i2.timestamp = r3.timestamp, s2.direction == e4) {
                          i2.codec = s2.codec_in.mime_type, i2.jitter = s2.delta_jitter_ms_in, i2.bitrate = s2.delta_kbs_in, i2.packetsLost = s2.delta_packets_lost_in, i2.rtt = r3.data.delta_rtt_connectivity_ms || 0, i2.totalPackets = s2.delta_packets_in, i2.concealmentEvents = s2.delta_concealment_events, i2.removedSampleForAccelaration = s2.delta_removed_samples_for_accelaration, i2.insertedSamplesForDecelaration = s2.delta_inserted_samples_for_decelaration;
                          const e5 = JSON.stringify(s2.track_id_in).replace(
                            /[{}"]/g,
                            ""
                          );
                          i2.trackId = e5;
                        } else
                          s2.direction == t3 && (i2.codec = s2.codec_out.mime_type, i2.jitter = s2.delta_jitter_ms_out, i2.bitrate = s2.delta_kbs_out, i2.packetsLost = s2.delta_packets_lost_out, i2.rtt = r3.data.delta_rtt_connectivity_ms || 0, i2.totalPackets = s2.delta_packets_out, i2.trackId = s2.track_id_out);
                        n3.audio.push(i2);
                      }), Object.values(r3.video).forEach((s2) => {
                        const i2 = {};
                        if (i2.network = G[r3.network.infrastructure], i2.timestamp = r3.timestamp, s2.direction == e4) {
                          i2.codec = s2.codec_in.mime_type, i2.jitter = s2.delta_jitter_ms_in, i2.bitrate = s2.delta_kbs_in, i2.packetsLost = s2.delta_packets_lost_in, i2.rtt = r3.data.delta_rtt_connectivity_ms || 0, i2.totalPackets = s2.delta_packets_in, i2.size = s2.size_in, i2.pauseCount = s2.pause_count, i2.totalPausesDuration = s2.total_pauses_duration, i2.freezeCount = s2.freeze_count, i2.totalFreezesDuration = s2.total_freezes_duration;
                          const e5 = JSON.stringify(s2.track_id_in).replace(
                            /[{}"]/g,
                            ""
                          );
                          i2.trackId = e5;
                        } else
                          s2.direction == t3 && (i2.codec = s2.codec_out.mime_type, i2.jitter = s2.delta_jitter_ms_out, i2.bitrate = s2.delta_kbs_out, i2.packetsLost = s2.delta_packets_lost_out, i2.rtt = r3.data.delta_rtt_connectivity_ms || 0, i2.totalPackets = s2.delta_packets_out, i2.limitation = s2.limitation_out, i2.size = s2.size_out, i2.trackId = s2.track_id_out);
                        n3.video.push(i2);
                      }), this._callbacks.onStatsCollected.callback(n3);
                    }
                  }
                }
                class he {
                  constructor(e5) {
                    this._id = e5.name && e5.name.substr(0, 12).padEnd(12, " "), this._moduleName = this._id, this._config = e5, this._collector = new pe(this._config, this._id);
                  }
                  get id() {
                    return this._id;
                  }
                  start() {
                    this._collectorIntervalId ? te("Probe already started.") : (ee(this._moduleName, "Probe Started"), this._collectorIntervalId = setInterval(() => {
                      ee(this._moduleName, "Collector collecting stats"), this._collector.collectStats();
                    }, this._config.refreshEvery));
                  }
                  stop() {
                    this._collectorIntervalId ? (clearInterval(this._collectorIntervalId), ee(this._moduleName, "Probe Stopped")) : te("Probe not running, Please start first.");
                  }
                  set onStatsCollected(e5) {
                    e5 ? this._collector.registerCallback(
                      "onStatsCollected",
                      e5
                    ) : this._collector.unregisterCallback(
                      "onStatsCollected"
                    );
                  }
                }
                const me = {
                  refreshEvery: 2e3,
                  startAfter: 0,
                  stopAfter: -1,
                  verbose: false,
                  peerId: "peerId",
                  meetingId: "meetingId",
                  name: "name"
                };
                class fe {
                  constructor(e5) {
                    var t4;
                    this._config = { defaultConfig: me, ...e5 }, this._probes = [], t4 = this._config.verbose || false, Y.setLevel(t4 ? Y.levels.TRACE : Y.levels.INFO), ee("VideoSDKMetrics", "VideoSDKMetrics initialized");
                  }
                  get probes() {
                    return this._probes;
                  }
                  addNewProbe(e5, t4) {
                    if (!e5) throw new Error("undefined monitoring object");
                    const r3 = { monitoringObject: e5, ...t4, ...this._config }, n3 = new he(r3);
                    return this._probes.push(n3), n3;
                  }
                  removeExistingProbe(e5) {
                    if (!e5) throw new Error("undefined probe");
                    e5.stop(), this._probes = this._probes.filter(
                      (t4) => e5.id !== t4.id
                    );
                  }
                  getProbe(e5) {
                    for (let t4 of this.probes) if (t4.id == e5) return t4;
                  }
                  startAllProbes() {
                    this._probes.forEach((e5, t4) => {
                      e5.start();
                    });
                  }
                  stopAllProbes() {
                    this._probes.forEach((e5) => e5.stop());
                  }
                }
              })(), n2;
            })();
          },
          5458: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => i });
            var n2 = r2(3145);
            var s = r2(7800);
            function i(e3) {
              return function(e4) {
                if (Array.isArray(e4)) return (0, n2.A)(e4);
              }(e3) || function(e4) {
                if ("undefined" != typeof Symbol && null != e4[Symbol.iterator] || null != e4["@@iterator"])
                  return Array.from(e4);
              }(e3) || (0, s.A)(e3) || function() {
                throw new TypeError(
                  "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }();
            }
          },
          5471: function(e2, t2, r2) {
            var n2, s, i, a, o, c, d, l;
            e2.exports = (l = r2(9021), s = (n2 = l).lib, i = s.WordArray, a = s.Hasher, o = n2.algo, c = [], d = o.SHA1 = a.extend({
              _doReset: function() {
                this._hash = new i.init([
                  1732584193,
                  4023233417,
                  2562383102,
                  271733878,
                  3285377520
                ]);
              },
              _doProcessBlock: function(e3, t3) {
                for (var r3 = this._hash.words, n3 = r3[0], s2 = r3[1], i2 = r3[2], a2 = r3[3], o2 = r3[4], d2 = 0; d2 < 80; d2++) {
                  if (d2 < 16) c[d2] = 0 | e3[t3 + d2];
                  else {
                    var l2 = c[d2 - 3] ^ c[d2 - 8] ^ c[d2 - 14] ^ c[d2 - 16];
                    c[d2] = l2 << 1 | l2 >>> 31;
                  }
                  var u = (n3 << 5 | n3 >>> 27) + o2 + c[d2];
                  u += d2 < 20 ? 1518500249 + (s2 & i2 | ~s2 & a2) : d2 < 40 ? 1859775393 + (s2 ^ i2 ^ a2) : d2 < 60 ? (s2 & i2 | s2 & a2 | i2 & a2) - 1894007588 : (s2 ^ i2 ^ a2) - 899497514, o2 = a2, a2 = i2, i2 = s2 << 30 | s2 >>> 2, s2 = n3, n3 = u;
                }
                r3[0] = r3[0] + n3 | 0, r3[1] = r3[1] + s2 | 0, r3[2] = r3[2] + i2 | 0, r3[3] = r3[3] + a2 | 0, r3[4] = r3[4] + o2 | 0;
              },
              _doFinalize: function() {
                var e3 = this._data, t3 = e3.words, r3 = 8 * this._nDataBytes, n3 = 8 * e3.sigBytes;
                return t3[n3 >>> 5] |= 128 << 24 - n3 % 32, t3[14 + (n3 + 64 >>> 9 << 4)] = Math.floor(
                  r3 / 4294967296
                ), t3[15 + (n3 + 64 >>> 9 << 4)] = r3, e3.sigBytes = 4 * t3.length, this._process(), this._hash;
              },
              clone: function() {
                var e3 = a.clone.call(this);
                return e3._hash = this._hash.clone(), e3;
              }
            }), n2.SHA1 = a._createHelper(d), n2.HmacSHA1 = a._createHmacHelper(d), l.SHA1);
          },
          5501: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => s });
            var n2 = r2(3662);
            function s(e3, t3) {
              if ("function" != typeof t3 && null !== t3)
                throw new TypeError(
                  "Super expression must either be null or a function"
                );
              e3.prototype = Object.create(t3 && t3.prototype, {
                constructor: { value: e3, writable: true, configurable: true }
              }), Object.defineProperty(e3, "prototype", { writable: false }), t3 && (0, n2.A)(e3, t3);
            }
          },
          5503: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), function() {
              var e3 = n2, t3 = e3.lib.WordArray, r3 = e3.enc;
              function s(e4) {
                return e4 << 8 & 4278255360 | e4 >>> 8 & 16711935;
              }
              r3.Utf16 = r3.Utf16BE = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r4 = e4.sigBytes, n3 = [], s2 = 0; s2 < r4; s2 += 2) {
                    var i = t4[s2 >>> 2] >>> 16 - s2 % 4 * 8 & 65535;
                    n3.push(String.fromCharCode(i));
                  }
                  return n3.join("");
                },
                parse: function(e4) {
                  for (var r4 = e4.length, n3 = [], s2 = 0; s2 < r4; s2++)
                    n3[s2 >>> 1] |= e4.charCodeAt(s2) << 16 - s2 % 2 * 16;
                  return t3.create(n3, 2 * r4);
                }
              }, r3.Utf16LE = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r4 = e4.sigBytes, n3 = [], i = 0; i < r4; i += 2) {
                    var a = s(t4[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
                    n3.push(String.fromCharCode(a));
                  }
                  return n3.join("");
                },
                parse: function(e4) {
                  for (var r4 = e4.length, n3 = [], i = 0; i < r4; i++)
                    n3[i >>> 1] |= s(e4.charCodeAt(i) << 16 - i % 2 * 16);
                  return t3.create(n3, 2 * r4);
                }
              };
            }(), n2.enc.Utf16);
          },
          5535: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome70 = void 0;
            const a = i(r2(7363)), o = r2(2994), c = i(r2(1765)), d = i(r2(8046)), l = i(r2(5544)), u = i(r2(5938)), p = r2(521), h = r2(1305), m = r2(3303), f = new o.Logger("Chrome70"), g = { OS: 1024, MIS: 1024 };
            class v extends p.HandlerInterface {
              static createFactory() {
                return () => new v();
              }
              constructor() {
                super(), this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome70";
              }
              close() {
                if (f.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                f.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = a.parse(t3.sdp);
                  return l.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                f.debug("run()"), this._direction = e3, this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, n3.role && "auto" !== n3.role && (this._forcedLocalDtlsRole = "server" === n3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (f.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                f.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (f.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                this.assertSendDirection(), f.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id);
                const s2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, n3);
                const i2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                i2.codecs = d.reduceCodecs(i2.codecs, n3);
                const o2 = this._remoteSdp.getNextMediaSectionIdx(), p2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream]
                });
                let h2, g2 = await this._pc.createOffer(), v2 = a.parse(g2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: v2
                }), t3 && t3.length > 1 && (f.debug("send() | enabling legacy simulcast"), v2 = a.parse(g2.sdp), h2 = v2.media[o2.idx], u.addLegacySimulcast({
                  offerMediaObject: h2,
                  numStreams: t3.length
                }), g2 = { type: "offer", sdp: a.write(v2) });
                let _ = false;
                const y = (0, m.parse)((t3 || [{}])[0].scalabilityMode);
                if (t3 && 1 === t3.length && y.spatialLayers > 1 && "video/vp9" === s2.codecs[0].mimeType.toLowerCase() && (f.debug("send() | enabling legacy simulcast for VP9 SVC"), _ = true, v2 = a.parse(g2.sdp), h2 = v2.media[o2.idx], u.addLegacySimulcast({
                  offerMediaObject: h2,
                  numStreams: y.spatialLayers
                }), g2 = { type: "offer", sdp: a.write(v2) }), f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  g2
                ), await this._pc.setLocalDescription(g2), t3) {
                  f.debug("send() | applying given encodings");
                  const e4 = p2.sender.getParameters();
                  for (let r4 = 0; r4 < (e4.encodings || []).length; ++r4) {
                    const n4 = e4.encodings[r4], s3 = t3[r4];
                    if (!s3) break;
                    e4.encodings[r4] = Object.assign(n4, s3);
                  }
                  await p2.sender.setParameters(e4);
                }
                const b = p2.mid;
                if (s2.mid = b, v2 = a.parse(this._pc.localDescription.sdp), h2 = v2.media[o2.idx], s2.rtcp.cname = l.getCname({ offerMediaObject: h2 }), s2.encodings = u.getRtpEncodings({ offerMediaObject: h2 }), t3)
                  for (let e4 = 0; e4 < s2.encodings.length; ++e4)
                    t3[e4] && Object.assign(s2.encodings[e4], t3[e4]);
                if (_ && (s2.encodings = [s2.encodings[0]]), s2.encodings.length > 1 && ("video/vp8" === s2.codecs[0].mimeType.toLowerCase() || "video/h264" === s2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of s2.encodings) e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: h2,
                  reuseMid: o2.reuseMid,
                  offerRtpParameters: s2,
                  answerRtpParameters: i2,
                  codecOptions: r3
                });
                const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ), await this._pc.setRemoteDescription(w), this._mapMidTransceiver.set(b, p2), { localId: b, rtpParameters: s2, rtpSender: p2.sender };
              }
              async stopSending(e3) {
                this.assertSendDirection(), f.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                f.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : f.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                f.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  n3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                f.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                f.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: n4,
                    rtpParameters: s3,
                    streamId: i3
                  } = t4;
                  f.debug("receive() [trackId:%s, kind:%s]", e4, n4);
                  const a2 = s3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, a2), this._remoteSdp.receive({
                    mid: a2,
                    kind: n4,
                    offerRtpParameters: s3,
                    streamId: i3 || s3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
                let s2 = await this._pc.createAnswer();
                const i2 = a.parse(s2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: n4 } = t4, s3 = r3.get(e4), a2 = i2.media.find((e5) => String(e5.mid) === s3);
                  l.applyCodecParameters({
                    offerRtpParameters: n4,
                    answerMediaObject: a2
                  });
                }
                s2 = { type: "answer", sdp: a.write(i2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: i2
                }), f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                for (const n4 of e3) {
                  const { trackId: e4 } = n4, s3 = r3.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === s3);
                  if (!i3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(s3, i3), t3.push({
                    localId: s3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  f.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                f.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmitTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                f.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome70 = v;
          },
          5544: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.applyCodecParameters = t2.getCname = t2.extractDtlsParameters = t2.extractRtpCapabilities = void 0;
            const a = i(r2(7363));
            t2.extractRtpCapabilities = function({ sdpObject: e3 }) {
              const t3 = /* @__PURE__ */ new Map(), r3 = [];
              let n3 = false, s2 = false;
              for (const i2 of e3.media) {
                const e4 = i2.type;
                switch (e4) {
                  case "audio":
                    if (n3) continue;
                    n3 = true;
                    break;
                  case "video":
                    if (s2) continue;
                    s2 = true;
                    break;
                  default:
                    continue;
                }
                for (const r4 of i2.rtp) {
                  const n4 = {
                    kind: e4,
                    mimeType: `${e4}/${r4.codec}`,
                    preferredPayloadType: r4.payload,
                    clockRate: r4.rate,
                    channels: r4.encoding,
                    parameters: {},
                    rtcpFeedback: []
                  };
                  t3.set(n4.preferredPayloadType, n4);
                }
                for (const e5 of i2.fmtp || []) {
                  const r4 = a.parseParams(e5.config), n4 = t3.get(e5.payload);
                  n4 && (r4 && r4.hasOwnProperty("profile-level-id") && (r4["profile-level-id"] = String(r4["profile-level-id"])), n4.parameters = r4);
                }
                for (const r4 of i2.rtcpFb || []) {
                  const n4 = { type: r4.type, parameter: r4.subtype };
                  if (n4.parameter || delete n4.parameter, "*" !== r4.payload) {
                    const e5 = t3.get(r4.payload);
                    if (!e5) continue;
                    e5.rtcpFeedback.push(n4);
                  } else
                    for (const r5 of t3.values())
                      r5.kind !== e4 || /.+\/rtx$/i.test(r5.mimeType) || r5.rtcpFeedback.push(n4);
                }
                for (const t4 of i2.ext || []) {
                  if (t4["encrypt-uri"]) continue;
                  const n4 = { kind: e4, uri: t4.uri, preferredId: t4.value };
                  r3.push(n4);
                }
              }
              return { codecs: Array.from(t3.values()), headerExtensions: r3 };
            }, t2.extractDtlsParameters = function({ sdpObject: e3 }) {
              let t3, r3 = e3.setup, n3 = e3.fingerprint;
              if (!r3 || !n3) {
                const t4 = (e3.media || []).find((e4) => 0 !== e4.port);
                t4 && (r3 ?? (r3 = t4.setup), n3 ?? (n3 = t4.fingerprint));
              }
              if (!r3)
                throw new Error(
                  "no a=setup found at SDP session or media level"
                );
              if (!n3)
                throw new Error(
                  "no a=fingerprint found at SDP session or media level"
                );
              switch (r3) {
                case "active":
                  t3 = "client";
                  break;
                case "passive":
                  t3 = "server";
                  break;
                case "actpass":
                  t3 = "auto";
              }
              return {
                role: t3,
                fingerprints: [{ algorithm: n3.type, value: n3.hash }]
              };
            }, t2.getCname = function({ offerMediaObject: e3 }) {
              const t3 = (e3.ssrcs || []).find((e4) => "cname" === e4.attribute);
              return t3 ? t3.value : "";
            }, t2.applyCodecParameters = function({
              offerRtpParameters: e3,
              answerMediaObject: t3
            }) {
              for (const r3 of e3.codecs) {
                const e4 = r3.mimeType.toLowerCase();
                if ("audio/opus" !== e4) continue;
                if (!(t3.rtp || []).find((e5) => e5.payload === r3.payloadType))
                  continue;
                t3.fmtp = t3.fmtp || [];
                let n3 = t3.fmtp.find((e5) => e5.payload === r3.payloadType);
                n3 || (n3 = { payload: r3.payloadType, config: "" }, t3.fmtp.push(n3));
                const s2 = a.parseParams(n3.config);
                switch (e4) {
                  case "audio/opus": {
                    const e5 = r3.parameters["sprop-stereo"];
                    void 0 !== e5 && (s2.stereo = e5 ? 1 : 0);
                    break;
                  }
                }
                n3.config = "";
                for (const e5 of Object.keys(s2))
                  n3.config && (n3.config += ";"), n3.config += `${e5}=${s2[e5]}`;
              }
            };
          },
          5601: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            }, a = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Transport = void 0;
            const o = r2(8876), c = a(r2(9596)), d = r2(2994), l = r2(2010), u = r2(4893), p = i(r2(1765)), h = i(r2(8046)), m = r2(9792), f = r2(3518), g = r2(7504), v = r2(9166), _ = new d.Logger("Transport");
            class y {
              constructor(e3) {
                this.consumerOptions = e3, this.promise = new Promise((e4, t3) => {
                  this.resolve = e4, this.reject = t3;
                });
              }
            }
            class b extends l.EnhancedEventEmitter {
              constructor({
                direction: e3,
                id: t3,
                iceParameters: r3,
                iceCandidates: n3,
                dtlsParameters: s2,
                sctpParameters: i2,
                iceServers: a2,
                iceTransportPolicy: c2,
                additionalSettings: d2,
                proprietaryConstraints: u2,
                appData: h2,
                handlerFactory: m2,
                extendedRtpCapabilities: f2,
                canProduceByKind: g2
              }) {
                super(), this._closed = false, this._iceGatheringState = "new", this._connectionState = "new", this._producers = /* @__PURE__ */ new Map(), this._consumers = /* @__PURE__ */ new Map(), this._dataProducers = /* @__PURE__ */ new Map(), this._dataConsumers = /* @__PURE__ */ new Map(), this._probatorConsumerCreated = false, this._awaitQueue = new o.AwaitQueue(), this._pendingConsumerTasks = [], this._consumerCreationInProgress = false, this._pendingPauseConsumers = /* @__PURE__ */ new Map(), this._consumerPauseInProgress = false, this._pendingResumeConsumers = /* @__PURE__ */ new Map(), this._consumerResumeInProgress = false, this._pendingCloseConsumers = /* @__PURE__ */ new Map(), this._consumerCloseInProgress = false, this._observer = new l.EnhancedEventEmitter(), _.debug("constructor() [id:%s, direction:%s]", t3, e3), this._id = t3, this._direction = e3, this._extendedRtpCapabilities = f2, this._canProduceByKind = g2, this._maxSctpMessageSize = i2 ? i2.maxMessageSize : null;
                const v2 = p.clone(d2) || {};
                delete v2.iceServers, delete v2.iceTransportPolicy, delete v2.bundlePolicy, delete v2.rtcpMuxPolicy, delete v2.sdpSemantics, this._handler = m2(), this._handler.run({
                  direction: e3,
                  iceParameters: r3,
                  iceCandidates: n3,
                  dtlsParameters: s2,
                  sctpParameters: i2,
                  iceServers: a2,
                  iceTransportPolicy: c2,
                  additionalSettings: v2,
                  proprietaryConstraints: u2,
                  extendedRtpCapabilities: f2
                }), this._appData = h2 || {}, this.handleHandler();
              }
              get id() {
                return this._id;
              }
              get closed() {
                return this._closed;
              }
              get direction() {
                return this._direction;
              }
              get handler() {
                return this._handler;
              }
              get iceGatheringState() {
                return this._iceGatheringState;
              }
              get connectionState() {
                return this._connectionState;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                if (!this._closed) {
                  _.debug("close()"), this._closed = true, this._awaitQueue.stop(), this._handler.close(), this._connectionState = "closed";
                  for (const e3 of this._producers.values()) e3.transportClosed();
                  this._producers.clear();
                  for (const e3 of this._consumers.values()) e3.transportClosed();
                  this._consumers.clear();
                  for (const e3 of this._dataProducers.values())
                    e3.transportClosed();
                  this._dataProducers.clear();
                  for (const e3 of this._dataConsumers.values())
                    e3.transportClosed();
                  this._dataConsumers.clear(), this._observer.safeEmit("close");
                }
              }
              async getStats() {
                if (this._closed) throw new u.InvalidStateError("closed");
                return this._handler.getTransportStats();
              }
              async restartIce({ iceParameters: e3 }) {
                if (_.debug("restartIce()"), this._closed)
                  throw new u.InvalidStateError("closed");
                if (!e3) throw new TypeError("missing iceParameters");
                return this._awaitQueue.push(
                  async () => await this._handler.restartIce(e3),
                  "transport.restartIce()"
                );
              }
              async updateIceServers({ iceServers: e3 } = {}) {
                if (_.debug("updateIceServers()"), this._closed)
                  throw new u.InvalidStateError("closed");
                if (!Array.isArray(e3)) throw new TypeError("missing iceServers");
                return this._awaitQueue.push(
                  async () => this._handler.updateIceServers(e3),
                  "transport.updateIceServers()"
                );
              }
              async produce({
                track: e3,
                encodings: t3,
                codecOptions: r3,
                codec: n3,
                stopTracks: s2 = true,
                disableTrackOnPause: i2 = true,
                zeroRtpOnPause: a2 = false,
                appData: o2 = {}
              } = {}) {
                if (_.debug("produce() [track:%o]", e3), this._closed)
                  throw new u.InvalidStateError("closed");
                if (!e3) throw new TypeError("missing track");
                if ("send" !== this._direction)
                  throw new u.UnsupportedError("not a sending Transport");
                if (!this._canProduceByKind[e3.kind])
                  throw new u.UnsupportedError(`cannot produce ${e3.kind}`);
                if ("ended" === e3.readyState)
                  throw new u.InvalidStateError("track ended");
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (0 === this.listenerCount("produce"))
                  throw new TypeError(
                    'no "produce" listener set into this transport'
                  );
                if (o2 && "object" != typeof o2)
                  throw new TypeError("if given, appData must be an object");
                return this._awaitQueue.push(async () => {
                  let c2;
                  if (t3 && !Array.isArray(t3))
                    throw TypeError("encodings must be an array");
                  t3 && 0 === t3.length ? c2 = void 0 : t3 && (c2 = t3.map((e4) => {
                    const t4 = { active: true };
                    return false === e4.active && (t4.active = false), "boolean" == typeof e4.dtx && (t4.dtx = e4.dtx), "string" == typeof e4.scalabilityMode && (t4.scalabilityMode = e4.scalabilityMode), "number" == typeof e4.scaleResolutionDownBy && (t4.scaleResolutionDownBy = e4.scaleResolutionDownBy), "number" == typeof e4.maxBitrate && (t4.maxBitrate = e4.maxBitrate), "number" == typeof e4.maxFramerate && (t4.maxFramerate = e4.maxFramerate), "boolean" == typeof e4.adaptivePtime && (t4.adaptivePtime = e4.adaptivePtime), "string" == typeof e4.priority && (t4.priority = e4.priority), "string" == typeof e4.networkPriority && (t4.networkPriority = e4.networkPriority), t4;
                  }));
                  const {
                    localId: d2,
                    rtpParameters: l2,
                    rtpSender: u2
                  } = await this._handler.send({
                    track: e3,
                    encodings: c2,
                    codecOptions: r3,
                    codec: n3
                  });
                  try {
                    h.validateRtpParameters(l2);
                    const { id: t4 } = await new Promise((t5, r5) => {
                      this.safeEmit(
                        "produce",
                        { kind: e3.kind, rtpParameters: l2, appData: o2 },
                        t5,
                        r5
                      );
                    }), r4 = new m.Producer({
                      id: t4,
                      localId: d2,
                      rtpSender: u2,
                      track: e3,
                      rtpParameters: l2,
                      stopTracks: s2,
                      disableTrackOnPause: i2,
                      zeroRtpOnPause: a2,
                      appData: o2
                    });
                    return this._producers.set(r4.id, r4), this.handleProducer(r4), this._observer.safeEmit("newproducer", r4), r4;
                  } catch (e4) {
                    throw this._handler.stopSending(d2).catch(() => {
                    }), e4;
                  }
                }, "transport.produce()").catch((t4) => {
                  if (s2)
                    try {
                      e3.stop();
                    } catch (e4) {
                    }
                  throw t4;
                });
              }
              async consume({
                id: e3,
                producerId: t3,
                kind: r3,
                rtpParameters: n3,
                streamId: s2,
                appData: i2 = {}
              }) {
                if (_.debug("consume()"), this._closed)
                  throw new u.InvalidStateError("closed");
                if ("recv" !== this._direction)
                  throw new u.UnsupportedError("not a receiving Transport");
                if ("string" != typeof e3) throw new TypeError("missing id");
                if ("string" != typeof t3)
                  throw new TypeError("missing producerId");
                if ("audio" !== r3 && "video" !== r3)
                  throw new TypeError(`invalid kind '${r3}'`);
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (i2 && "object" != typeof i2)
                  throw new TypeError("if given, appData must be an object");
                const a2 = p.clone(n3);
                if (!h.canReceive(a2, this._extendedRtpCapabilities))
                  throw new u.UnsupportedError("cannot consume this Producer");
                const o2 = new y({
                  id: e3,
                  producerId: t3,
                  kind: r3,
                  rtpParameters: a2,
                  streamId: s2,
                  appData: i2
                });
                return this._pendingConsumerTasks.push(o2), (0, c.default)(() => {
                  this._closed || false === this._consumerCreationInProgress && this.createPendingConsumers();
                }), o2.promise;
              }
              async produceData({
                ordered: e3 = true,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3 = "",
                protocol: s2 = "",
                appData: i2 = {}
              } = {}) {
                if (_.debug("produceData()"), this._closed)
                  throw new u.InvalidStateError("closed");
                if ("send" !== this._direction)
                  throw new u.UnsupportedError("not a sending Transport");
                if (!this._maxSctpMessageSize)
                  throw new u.UnsupportedError(
                    "SCTP not enabled by remote Transport"
                  );
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (0 === this.listenerCount("producedata"))
                  throw new TypeError(
                    'no "producedata" listener set into this transport'
                  );
                if (i2 && "object" != typeof i2)
                  throw new TypeError("if given, appData must be an object");
                return (t3 || r3) && (e3 = false), this._awaitQueue.push(async () => {
                  const { dataChannel: a2, sctpStreamParameters: o2 } = await this._handler.sendDataChannel({
                    ordered: e3,
                    maxPacketLifeTime: t3,
                    maxRetransmits: r3,
                    label: n3,
                    protocol: s2
                  });
                  h.validateSctpStreamParameters(o2);
                  const { id: c2 } = await new Promise((e4, t4) => {
                    this.safeEmit(
                      "producedata",
                      {
                        sctpStreamParameters: o2,
                        label: n3,
                        protocol: s2,
                        appData: i2
                      },
                      e4,
                      t4
                    );
                  }), d2 = new g.DataProducer({
                    id: c2,
                    dataChannel: a2,
                    sctpStreamParameters: o2,
                    appData: i2
                  });
                  return this._dataProducers.set(d2.id, d2), this.handleDataProducer(d2), this._observer.safeEmit("newdataproducer", d2), d2;
                }, "transport.produceData()");
              }
              async consumeData({
                id: e3,
                dataProducerId: t3,
                sctpStreamParameters: r3,
                label: n3 = "",
                protocol: s2 = "",
                appData: i2 = {}
              }) {
                if (_.debug("consumeData()"), this._closed)
                  throw new u.InvalidStateError("closed");
                if ("recv" !== this._direction)
                  throw new u.UnsupportedError("not a receiving Transport");
                if (!this._maxSctpMessageSize)
                  throw new u.UnsupportedError(
                    "SCTP not enabled by remote Transport"
                  );
                if ("string" != typeof e3) throw new TypeError("missing id");
                if ("string" != typeof t3)
                  throw new TypeError("missing dataProducerId");
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (i2 && "object" != typeof i2)
                  throw new TypeError("if given, appData must be an object");
                const a2 = p.clone(r3);
                return h.validateSctpStreamParameters(a2), this._awaitQueue.push(async () => {
                  const { dataChannel: r4 } = await this._handler.receiveDataChannel({
                    sctpStreamParameters: a2,
                    label: n3,
                    protocol: s2
                  }), o2 = new v.DataConsumer({
                    id: e3,
                    dataProducerId: t3,
                    dataChannel: r4,
                    sctpStreamParameters: a2,
                    appData: i2
                  });
                  return this._dataConsumers.set(o2.id, o2), this.handleDataConsumer(o2), this._observer.safeEmit("newdataconsumer", o2), o2;
                }, "transport.consumeData()");
              }
              async createPendingConsumers() {
                this._consumerCreationInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingConsumerTasks.length)
                    return void _.debug(
                      "createPendingConsumers() | there is no Consumer to be created"
                    );
                  const e3 = [...this._pendingConsumerTasks];
                  let t3;
                  this._pendingConsumerTasks = [];
                  const r3 = [];
                  for (const t4 of e3) {
                    const {
                      id: e4,
                      kind: n3,
                      rtpParameters: s2,
                      streamId: i2
                    } = t4.consumerOptions;
                    r3.push({
                      trackId: e4,
                      kind: n3,
                      rtpParameters: s2,
                      streamId: i2
                    });
                  }
                  try {
                    const n3 = await this._handler.receive(r3);
                    for (let r4 = 0; r4 < n3.length; ++r4) {
                      const s2 = e3[r4], i2 = n3[r4], {
                        id: a2,
                        producerId: o2,
                        kind: c2,
                        rtpParameters: d2,
                        appData: l2
                      } = s2.consumerOptions, { localId: u2, rtpReceiver: p2, track: h2 } = i2, m2 = new f.Consumer({
                        id: a2,
                        localId: u2,
                        producerId: o2,
                        rtpReceiver: p2,
                        track: h2,
                        rtpParameters: d2,
                        appData: l2
                      });
                      this._consumers.set(m2.id, m2), this.handleConsumer(m2), this._probatorConsumerCreated || t3 || "video" !== c2 || (t3 = m2), this._observer.safeEmit("newconsumer", m2), s2.resolve(m2);
                    }
                  } catch (t4) {
                    for (const r4 of e3) r4.reject(t4);
                  }
                  if (t3)
                    try {
                      const e4 = h.generateProbatorRtpParameters(
                        t3.rtpParameters
                      );
                      await this._handler.receive([
                        {
                          trackId: "probator",
                          kind: "video",
                          rtpParameters: e4
                        }
                      ]), _.debug(
                        "createPendingConsumers() | Consumer for RTP probation created"
                      ), this._probatorConsumerCreated = true;
                    } catch (e4) {
                      _.error(
                        "createPendingConsumers() | failed to create Consumer for RTP probation:%o",
                        e4
                      );
                    }
                }, "transport.createPendingConsumers()").then(() => {
                  this._consumerCreationInProgress = false, this._pendingConsumerTasks.length > 0 && this.createPendingConsumers();
                }).catch(() => {
                });
              }
              pausePendingConsumers() {
                this._consumerPauseInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingPauseConsumers.size)
                    return void _.debug(
                      "pausePendingConsumers() | there is no Consumer to be paused"
                    );
                  const e3 = Array.from(this._pendingPauseConsumers.values());
                  this._pendingPauseConsumers.clear();
                  try {
                    const t3 = e3.map((e4) => e4.localId);
                    await this._handler.pauseReceiving(t3);
                  } catch (e4) {
                    _.error(
                      "pausePendingConsumers() | failed to pause Consumers:",
                      e4
                    );
                  }
                }, "transport.pausePendingConsumers").then(() => {
                  this._consumerPauseInProgress = false, this._pendingPauseConsumers.size > 0 && this.pausePendingConsumers();
                }).catch(() => {
                });
              }
              resumePendingConsumers() {
                this._consumerResumeInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingResumeConsumers.size)
                    return void _.debug(
                      "resumePendingConsumers() | there is no Consumer to be resumed"
                    );
                  const e3 = Array.from(this._pendingResumeConsumers.values());
                  this._pendingResumeConsumers.clear();
                  try {
                    const t3 = e3.map((e4) => e4.localId);
                    await this._handler.resumeReceiving(t3);
                  } catch (e4) {
                    _.error(
                      "resumePendingConsumers() | failed to resume Consumers:",
                      e4
                    );
                  }
                }, "transport.resumePendingConsumers").then(() => {
                  this._consumerResumeInProgress = false, this._pendingResumeConsumers.size > 0 && this.resumePendingConsumers();
                }).catch(() => {
                });
              }
              closePendingConsumers() {
                this._consumerCloseInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingCloseConsumers.size)
                    return void _.debug(
                      "closePendingConsumers() | there is no Consumer to be closed"
                    );
                  const e3 = Array.from(this._pendingCloseConsumers.values());
                  this._pendingCloseConsumers.clear();
                  try {
                    await this._handler.stopReceiving(
                      e3.map((e4) => e4.localId)
                    );
                  } catch (e4) {
                    _.error(
                      "closePendingConsumers() | failed to close Consumers:",
                      e4
                    );
                  }
                }, "transport.closePendingConsumers").then(() => {
                  this._consumerCloseInProgress = false, this._pendingCloseConsumers.size > 0 && this.closePendingConsumers();
                }).catch(() => {
                });
              }
              handleHandler() {
                const e3 = this._handler;
                e3.on("@connect", ({ dtlsParameters: e4 }, t3, r3) => {
                  this._closed ? r3(new u.InvalidStateError("closed")) : this.safeEmit("connect", { dtlsParameters: e4 }, t3, r3);
                }), e3.on("@icegatheringstatechange", (e4) => {
                  e4 !== this._iceGatheringState && (_.debug("ICE gathering state changed to %s", e4), this._iceGatheringState = e4, this._closed || this.safeEmit("icegatheringstatechange", e4));
                }), e3.on("@connectionstatechange", (e4) => {
                  e4 !== this._connectionState && (_.debug("connection state changed to %s", e4), this._connectionState = e4, this._closed || this.safeEmit("connectionstatechange", e4));
                });
              }
              handleProducer(e3) {
                e3.on("@close", () => {
                  this._producers.delete(e3.id), this._closed || this._awaitQueue.push(
                    async () => await this._handler.stopSending(e3.localId),
                    "producer @close event"
                  ).catch((e4) => _.warn("producer.close() failed:%o", e4));
                }), e3.on("@pause", (t3, r3) => {
                  this._awaitQueue.push(
                    async () => await this._handler.pauseSending(e3.localId),
                    "producer @pause event"
                  ).then(t3).catch(r3);
                }), e3.on("@resume", (t3, r3) => {
                  this._awaitQueue.push(
                    async () => await this._handler.resumeSending(e3.localId),
                    "producer @resume event"
                  ).then(t3).catch(r3);
                }), e3.on("@replacetrack", (t3, r3, n3) => {
                  this._awaitQueue.push(
                    async () => await this._handler.replaceTrack(e3.localId, t3),
                    "producer @replacetrack event"
                  ).then(r3).catch(n3);
                }), e3.on("@setmaxspatiallayer", (t3, r3, n3) => {
                  this._awaitQueue.push(
                    async () => await this._handler.setMaxSpatialLayer(e3.localId, t3),
                    "producer @setmaxspatiallayer event"
                  ).then(r3).catch(n3);
                }), e3.on("@setrtpencodingparameters", (t3, r3, n3) => {
                  this._awaitQueue.push(
                    async () => await this._handler.setRtpEncodingParameters(
                      e3.localId,
                      t3
                    ),
                    "producer @setrtpencodingparameters event"
                  ).then(r3).catch(n3);
                }), e3.on("@getstats", (t3, r3) => {
                  if (this._closed) return r3(new u.InvalidStateError("closed"));
                  this._handler.getSenderStats(e3.localId).then(t3).catch(r3);
                });
              }
              handleConsumer(e3) {
                e3.on("@close", () => {
                  this._consumers.delete(e3.id), this._pendingPauseConsumers.delete(e3.id), this._pendingResumeConsumers.delete(e3.id), this._closed || (this._pendingCloseConsumers.set(e3.id, e3), false === this._consumerCloseInProgress && this.closePendingConsumers());
                }), e3.on("@pause", () => {
                  this._pendingResumeConsumers.has(e3.id) && this._pendingResumeConsumers.delete(e3.id), this._pendingPauseConsumers.set(e3.id, e3), (0, c.default)(() => {
                    this._closed || false === this._consumerPauseInProgress && this.pausePendingConsumers();
                  });
                }), e3.on("@resume", () => {
                  this._pendingPauseConsumers.has(e3.id) && this._pendingPauseConsumers.delete(e3.id), this._pendingResumeConsumers.set(e3.id, e3), (0, c.default)(() => {
                    this._closed || false === this._consumerResumeInProgress && this.resumePendingConsumers();
                  });
                }), e3.on("@getstats", (t3, r3) => {
                  if (this._closed) return r3(new u.InvalidStateError("closed"));
                  this._handler.getReceiverStats(e3.localId).then(t3).catch(r3);
                });
              }
              handleDataProducer(e3) {
                e3.on("@close", () => {
                  this._dataProducers.delete(e3.id);
                });
              }
              handleDataConsumer(e3) {
                e3.on("@close", () => {
                  this._dataConsumers.delete(e3.id);
                });
              }
            }
            t2.Transport = b;
          },
          5602: (e2) => {
            var t2 = e2.exports = {
              v: [{ name: "version", reg: /^(\d*)$/ }],
              o: [
                {
                  name: "origin",
                  reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
                  names: [
                    "username",
                    "sessionId",
                    "sessionVersion",
                    "netType",
                    "ipVer",
                    "address"
                  ],
                  format: "%s %s %d %s IP%d %s"
                }
              ],
              s: [{ name: "name" }],
              i: [{ name: "description" }],
              u: [{ name: "uri" }],
              e: [{ name: "email" }],
              p: [{ name: "phone" }],
              z: [{ name: "timezones" }],
              r: [{ name: "repeats" }],
              t: [
                {
                  name: "timing",
                  reg: /^(\d*) (\d*)/,
                  names: ["start", "stop"],
                  format: "%d %d"
                }
              ],
              c: [
                {
                  name: "connection",
                  reg: /^IN IP(\d) (\S*)/,
                  names: ["version", "ip"],
                  format: "IN IP%d %s"
                }
              ],
              b: [
                {
                  push: "bandwidth",
                  reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
                  names: ["type", "limit"],
                  format: "%s:%s"
                }
              ],
              m: [
                {
                  reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
                  names: ["type", "port", "protocol", "payloads"],
                  format: "%s %d %s %s"
                }
              ],
              a: [
                {
                  push: "rtp",
                  reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
                  names: ["payload", "codec", "rate", "encoding"],
                  format: function(e3) {
                    return e3.encoding ? "rtpmap:%d %s/%s/%s" : e3.rate ? "rtpmap:%d %s/%s" : "rtpmap:%d %s";
                  }
                },
                {
                  push: "fmtp",
                  reg: /^fmtp:(\d*) ([\S| ]*)/,
                  names: ["payload", "config"],
                  format: "fmtp:%d %s"
                },
                { name: "control", reg: /^control:(.*)/, format: "control:%s" },
                {
                  name: "rtcp",
                  reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
                  names: ["port", "netType", "ipVer", "address"],
                  format: function(e3) {
                    return null != e3.address ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
                  }
                },
                {
                  push: "rtcpFbTrrInt",
                  reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
                  names: ["payload", "value"],
                  format: "rtcp-fb:%s trr-int %d"
                },
                {
                  push: "rtcpFb",
                  reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
                  names: ["payload", "type", "subtype"],
                  format: function(e3) {
                    return null != e3.subtype ? "rtcp-fb:%s %s %s" : "rtcp-fb:%s %s";
                  }
                },
                {
                  push: "ext",
                  reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
                  names: ["value", "direction", "encrypt-uri", "uri", "config"],
                  format: function(e3) {
                    return "extmap:%d" + (e3.direction ? "/%s" : "%v") + (e3["encrypt-uri"] ? " %s" : "%v") + " %s" + (e3.config ? " %s" : "");
                  }
                },
                { name: "extmapAllowMixed", reg: /^(extmap-allow-mixed)/ },
                {
                  push: "crypto",
                  reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
                  names: ["id", "suite", "config", "sessionConfig"],
                  format: function(e3) {
                    return null != e3.sessionConfig ? "crypto:%d %s %s %s" : "crypto:%d %s %s";
                  }
                },
                { name: "setup", reg: /^setup:(\w*)/, format: "setup:%s" },
                {
                  name: "connectionType",
                  reg: /^connection:(new|existing)/,
                  format: "connection:%s"
                },
                { name: "mid", reg: /^mid:([^\s]*)/, format: "mid:%s" },
                { name: "msid", reg: /^msid:(.*)/, format: "msid:%s" },
                {
                  name: "ptime",
                  reg: /^ptime:(\d*(?:\.\d*)*)/,
                  format: "ptime:%d"
                },
                {
                  name: "maxptime",
                  reg: /^maxptime:(\d*(?:\.\d*)*)/,
                  format: "maxptime:%d"
                },
                {
                  name: "direction",
                  reg: /^(sendrecv|recvonly|sendonly|inactive)/
                },
                { name: "icelite", reg: /^(ice-lite)/ },
                {
                  name: "iceUfrag",
                  reg: /^ice-ufrag:(\S*)/,
                  format: "ice-ufrag:%s"
                },
                { name: "icePwd", reg: /^ice-pwd:(\S*)/, format: "ice-pwd:%s" },
                {
                  name: "fingerprint",
                  reg: /^fingerprint:(\S*) (\S*)/,
                  names: ["type", "hash"],
                  format: "fingerprint:%s %s"
                },
                {
                  push: "candidates",
                  reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
                  names: [
                    "foundation",
                    "component",
                    "transport",
                    "priority",
                    "ip",
                    "port",
                    "type",
                    "raddr",
                    "rport",
                    "tcptype",
                    "generation",
                    "network-id",
                    "network-cost"
                  ],
                  format: function(e3) {
                    var t3 = "candidate:%s %d %s %d %s %d typ %s";
                    return t3 += null != e3.raddr ? " raddr %s rport %d" : "%v%v", t3 += null != e3.tcptype ? " tcptype %s" : "%v", null != e3.generation && (t3 += " generation %d"), t3 += null != e3["network-id"] ? " network-id %d" : "%v", t3 += null != e3["network-cost"] ? " network-cost %d" : "%v";
                  }
                },
                { name: "endOfCandidates", reg: /^(end-of-candidates)/ },
                {
                  name: "remoteCandidates",
                  reg: /^remote-candidates:(.*)/,
                  format: "remote-candidates:%s"
                },
                {
                  name: "iceOptions",
                  reg: /^ice-options:(\S*)/,
                  format: "ice-options:%s"
                },
                {
                  push: "ssrcs",
                  reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
                  names: ["id", "attribute", "value"],
                  format: function(e3) {
                    var t3 = "ssrc:%d";
                    return null != e3.attribute && (t3 += " %s", null != e3.value && (t3 += ":%s")), t3;
                  }
                },
                {
                  push: "ssrcGroups",
                  reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
                  names: ["semantics", "ssrcs"],
                  format: "ssrc-group:%s %s"
                },
                {
                  name: "msidSemantic",
                  reg: /^msid-semantic:\s?(\w*) (\S*)/,
                  names: ["semantic", "token"],
                  format: "msid-semantic: %s %s"
                },
                {
                  push: "groups",
                  reg: /^group:(\w*) (.*)/,
                  names: ["type", "mids"],
                  format: "group:%s %s"
                },
                { name: "rtcpMux", reg: /^(rtcp-mux)/ },
                { name: "rtcpRsize", reg: /^(rtcp-rsize)/ },
                {
                  name: "sctpmap",
                  reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
                  names: ["sctpmapNumber", "app", "maxMessageSize"],
                  format: function(e3) {
                    return null != e3.maxMessageSize ? "sctpmap:%s %s %s" : "sctpmap:%s %s";
                  }
                },
                {
                  name: "xGoogleFlag",
                  reg: /^x-google-flag:([^\s]*)/,
                  format: "x-google-flag:%s"
                },
                {
                  push: "rids",
                  reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
                  names: ["id", "direction", "params"],
                  format: function(e3) {
                    return e3.params ? "rid:%s %s %s" : "rid:%s %s";
                  }
                },
                {
                  push: "imageattrs",
                  reg: new RegExp(
                    "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
                  ),
                  names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
                  format: function(e3) {
                    return "imageattr:%s %s %s" + (e3.dir2 ? " %s %s" : "");
                  }
                },
                {
                  name: "simulcast",
                  reg: new RegExp(
                    "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
                  ),
                  names: ["dir1", "list1", "dir2", "list2"],
                  format: function(e3) {
                    return "simulcast:%s %s" + (e3.dir2 ? " %s %s" : "");
                  }
                },
                {
                  name: "simulcast_03",
                  reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
                  names: ["value"],
                  format: "simulcast: %s"
                },
                {
                  name: "framerate",
                  reg: /^framerate:(\d+(?:$|\.\d+))/,
                  format: "framerate:%s"
                },
                {
                  name: "sourceFilter",
                  reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
                  names: [
                    "filterMode",
                    "netType",
                    "addressTypes",
                    "destAddress",
                    "srcList"
                  ],
                  format: "source-filter: %s %s %s %s %s"
                },
                { name: "bundleOnly", reg: /^(bundle-only)/ },
                { name: "label", reg: /^label:(.+)/, format: "label:%s" },
                {
                  name: "sctpPort",
                  reg: /^sctp-port:(\d+)$/,
                  format: "sctp-port:%s"
                },
                {
                  name: "maxMessageSize",
                  reg: /^max-message-size:(\d+)$/,
                  format: "max-message-size:%s"
                },
                {
                  push: "tsRefClocks",
                  reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
                  names: ["clksrc", "clksrcExt"],
                  format: function(e3) {
                    return "ts-refclk:%s" + (null != e3.clksrcExt ? "=%s" : "");
                  }
                },
                {
                  name: "mediaClk",
                  reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
                  names: [
                    "id",
                    "mediaClockName",
                    "mediaClockValue",
                    "rateNumerator",
                    "rateDenominator"
                  ],
                  format: function(e3) {
                    var t3 = "mediaclk:";
                    return t3 += null != e3.id ? "id=%s %s" : "%v%s", t3 += null != e3.mediaClockValue ? "=%s" : "", t3 += null != e3.rateNumerator ? " rate=%s" : "", t3 += null != e3.rateDenominator ? "/%s" : "";
                  }
                },
                { name: "keywords", reg: /^keywds:(.+)$/, format: "keywds:%s" },
                { name: "content", reg: /^content:(.+)/, format: "content:%s" },
                {
                  name: "bfcpFloorCtrl",
                  reg: /^floorctrl:(c-only|s-only|c-s)/,
                  format: "floorctrl:%s"
                },
                { name: "bfcpConfId", reg: /^confid:(\d+)/, format: "confid:%s" },
                { name: "bfcpUserId", reg: /^userid:(\d+)/, format: "userid:%s" },
                {
                  name: "bfcpFloorId",
                  reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
                  names: ["id", "mStream"],
                  format: "floorid:%s mstrm:%s"
                },
                { push: "invalid", names: ["value"] }
              ]
            };
            Object.keys(t2).forEach(function(e3) {
              t2[e3].forEach(function(e4) {
                e4.reg || (e4.reg = /(.*)/), e4.format || (e4.format = "%s");
              });
            });
          },
          5765: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Safari12 = void 0;
            const a = i(r2(7363)), o = r2(2994), c = i(r2(1765)), d = i(r2(8046)), l = i(r2(5544)), u = i(r2(5938)), p = i(r2(4256)), h = r2(4893), m = r2(521), f = r2(1305), g = r2(3303), v = new o.Logger("Safari12"), _ = { OS: 1024, MIS: 1024 };
            class y extends m.HandlerInterface {
              static createFactory() {
                return () => new y();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Safari12";
              }
              close() {
                if (v.debug("close()"), !this._closed) {
                  if (this._closed = true, this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                v.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = a.parse(t3.sdp), n3 = l.extractRtpCapabilities({ sdpObject: r3 });
                  return p.addNackSuppportForOpus(n3), n3;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return v.debug("getNativeSctpCapabilities()"), { numStreams: _ };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                this.assertNotClosed(), v.debug("run()"), this._direction = e3, this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, n3.role && "auto" !== n3.role && (this._forcedLocalDtlsRole = "server" === n3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (v.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                this.assertNotClosed(), v.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), v.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    v.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    v.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    v.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    v.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id);
                const s2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, n3);
                const i2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                i2.codecs = d.reduceCodecs(i2.codecs, n3);
                const o2 = this._remoteSdp.getNextMediaSectionIdx(), p2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream]
                });
                let h2, m2 = await this._pc.createOffer(), f2 = a.parse(m2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f2
                });
                const _2 = (0, g.parse)((t3 || [{}])[0].scalabilityMode);
                t3 && t3.length > 1 && (v.debug("send() | enabling legacy simulcast"), f2 = a.parse(m2.sdp), h2 = f2.media[o2.idx], u.addLegacySimulcast({
                  offerMediaObject: h2,
                  numStreams: t3.length
                }), m2 = { type: "offer", sdp: a.write(f2) }), v.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m2
                ), await this._pc.setLocalDescription(m2);
                const y2 = p2.mid;
                if (s2.mid = y2, f2 = a.parse(this._pc.localDescription.sdp), h2 = f2.media[o2.idx], s2.rtcp.cname = l.getCname({ offerMediaObject: h2 }), s2.encodings = u.getRtpEncodings({ offerMediaObject: h2 }), t3)
                  for (let e4 = 0; e4 < s2.encodings.length; ++e4)
                    t3[e4] && Object.assign(s2.encodings[e4], t3[e4]);
                if (s2.encodings.length > 1 && ("video/vp8" === s2.codecs[0].mimeType.toLowerCase() || "video/h264" === s2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of s2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${_2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: h2,
                  reuseMid: o2.reuseMid,
                  offerRtpParameters: s2,
                  answerRtpParameters: i2,
                  codecOptions: r3
                });
                const b = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return v.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  b
                ), await this._pc.setRemoteDescription(b), this._mapMidTransceiver.set(y2, p2), { localId: y2, rtpParameters: s2, rtpSender: p2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), this._closed) return;
                v.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                v.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                v.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly", this._remoteSdp.resumeSendingMediaSection(e3);
                const r3 = await this._pc.createOffer();
                v.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? v.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : v.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                v.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), v.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const n3 = r3.sender.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  n3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n3), this._remoteSdp.muxMediaSectionSimulcast(e3, n3.encodings);
                const s2 = await this._pc.createOffer();
                v.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                v.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % _.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), v.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: n4,
                    rtpParameters: s3,
                    streamId: i3
                  } = t4;
                  v.debug("receive() [trackId:%s, kind:%s]", e4, n4);
                  const a2 = s3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, a2), this._remoteSdp.receive({
                    mid: a2,
                    kind: n4,
                    offerRtpParameters: s3,
                    streamId: i3 || s3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
                let s2 = await this._pc.createAnswer();
                const i2 = a.parse(s2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: n4 } = t4, s3 = r3.get(e4), a2 = i2.media.find((e5) => String(e5.mid) === s3);
                  l.applyCodecParameters({
                    offerRtpParameters: n4,
                    answerMediaObject: a2
                  });
                }
                s2 = { type: "answer", sdp: a.write(i2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: i2
                }), v.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                for (const n4 of e3) {
                  const { trackId: e4 } = n4, s3 = r3.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === s3);
                  if (!i3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(s3, i3), t3.push({
                    localId: s3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  v.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  v.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  v.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                v.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                v.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                v.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  v.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  v.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new h.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Safari12 = y;
          },
          5938: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.addLegacySimulcast = t2.getRtpEncodings = void 0, t2.getRtpEncodings = function({ offerMediaObject: e3 }) {
              const t3 = /* @__PURE__ */ new Set();
              for (const r3 of e3.ssrcs || []) {
                const e4 = r3.id;
                t3.add(e4);
              }
              if (0 === t3.size) throw new Error("no a=ssrc lines found");
              const r2 = /* @__PURE__ */ new Map();
              for (const n3 of e3.ssrcGroups || []) {
                if ("FID" !== n3.semantics) continue;
                let [e4, s] = n3.ssrcs.split(/\s+/);
                e4 = Number(e4), s = Number(s), t3.has(e4) && (t3.delete(e4), t3.delete(s), r2.set(e4, s));
              }
              for (const e4 of t3) r2.set(e4, null);
              const n2 = [];
              for (const [e4, t4] of r2) {
                const r3 = { ssrc: e4 };
                t4 && (r3.rtx = { ssrc: t4 }), n2.push(r3);
              }
              return n2;
            }, t2.addLegacySimulcast = function({
              offerMediaObject: e3,
              numStreams: t3
            }) {
              if (t3 <= 1)
                throw new TypeError("numStreams must be greater than 1");
              const r2 = (e3.ssrcs || []).find((e4) => "msid" === e4.attribute);
              if (!r2)
                throw new Error("a=ssrc line with msid information not found");
              const [n2, s] = r2.value.split(" "), i = r2.id;
              let a;
              (e3.ssrcGroups || []).some((e4) => {
                if ("FID" !== e4.semantics) return false;
                const t4 = e4.ssrcs.split(/\s+/);
                return Number(t4[0]) === i && (a = Number(t4[1]), true);
              });
              const o = e3.ssrcs.find((e4) => "cname" === e4.attribute);
              if (!o)
                throw new Error("a=ssrc line with cname information not found");
              const c = o.value, d = [], l = [];
              for (let e4 = 0; e4 < t3; ++e4) d.push(i + e4), a && l.push(a + e4);
              e3.ssrcGroups = [], e3.ssrcs = [], e3.ssrcGroups.push({ semantics: "SIM", ssrcs: d.join(" ") });
              for (let t4 = 0; t4 < d.length; ++t4) {
                const r3 = d[t4];
                e3.ssrcs.push({ id: r3, attribute: "cname", value: c }), e3.ssrcs.push({
                  id: r3,
                  attribute: "msid",
                  value: `${n2} ${s}`
                });
              }
              for (let t4 = 0; t4 < l.length; ++t4) {
                const r3 = d[t4], i2 = l[t4];
                e3.ssrcs.push({ id: i2, attribute: "cname", value: c }), e3.ssrcs.push({
                  id: i2,
                  attribute: "msid",
                  value: `${n2} ${s}`
                }), e3.ssrcGroups.push({ semantics: "FID", ssrcs: `${r3} ${i2}` });
              }
            };
          },
          5953: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(3240), function(e3) {
              var t3 = n2, r3 = t3.lib, s = r3.WordArray, i = r3.Hasher, a = t3.x64.Word, o = t3.algo, c = [], d = [], l = [];
              !function() {
                for (var e4 = 1, t4 = 0, r4 = 0; r4 < 24; r4++) {
                  c[e4 + 5 * t4] = (r4 + 1) * (r4 + 2) / 2 % 64;
                  var n3 = (2 * e4 + 3 * t4) % 5;
                  e4 = t4 % 5, t4 = n3;
                }
                for (e4 = 0; e4 < 5; e4++)
                  for (t4 = 0; t4 < 5; t4++)
                    d[e4 + 5 * t4] = t4 + (2 * e4 + 3 * t4) % 5 * 5;
                for (var s2 = 1, i2 = 0; i2 < 24; i2++) {
                  for (var o2 = 0, u2 = 0, p2 = 0; p2 < 7; p2++) {
                    if (1 & s2) {
                      var h = (1 << p2) - 1;
                      h < 32 ? u2 ^= 1 << h : o2 ^= 1 << h - 32;
                    }
                    128 & s2 ? s2 = s2 << 1 ^ 113 : s2 <<= 1;
                  }
                  l[i2] = a.create(o2, u2);
                }
              }();
              var u = [];
              !function() {
                for (var e4 = 0; e4 < 25; e4++) u[e4] = a.create();
              }();
              var p = o.SHA3 = i.extend({
                cfg: i.cfg.extend({ outputLength: 512 }),
                _doReset: function() {
                  for (var e4 = this._state = [], t4 = 0; t4 < 25; t4++)
                    e4[t4] = new a.init();
                  this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = this._state, n3 = this.blockSize / 2, s2 = 0; s2 < n3; s2++) {
                    var i2 = e4[t4 + 2 * s2], a2 = e4[t4 + 2 * s2 + 1];
                    i2 = 16711935 & (i2 << 8 | i2 >>> 24) | 4278255360 & (i2 << 24 | i2 >>> 8), a2 = 16711935 & (a2 << 8 | a2 >>> 24) | 4278255360 & (a2 << 24 | a2 >>> 8), (P = r4[s2]).high ^= a2, P.low ^= i2;
                  }
                  for (var o2 = 0; o2 < 24; o2++) {
                    for (var p2 = 0; p2 < 5; p2++) {
                      for (var h = 0, m = 0, f = 0; f < 5; f++)
                        h ^= (P = r4[p2 + 5 * f]).high, m ^= P.low;
                      var g = u[p2];
                      g.high = h, g.low = m;
                    }
                    for (p2 = 0; p2 < 5; p2++) {
                      var v = u[(p2 + 4) % 5], _ = u[(p2 + 1) % 5], y = _.high, b = _.low;
                      for (h = v.high ^ (y << 1 | b >>> 31), m = v.low ^ (b << 1 | y >>> 31), f = 0; f < 5; f++)
                        (P = r4[p2 + 5 * f]).high ^= h, P.low ^= m;
                    }
                    for (var w = 1; w < 25; w++) {
                      var S = (P = r4[w]).high, R = P.low, k = c[w];
                      k < 32 ? (h = S << k | R >>> 32 - k, m = R << k | S >>> 32 - k) : (h = R << k - 32 | S >>> 64 - k, m = S << k - 32 | R >>> 64 - k);
                      var E = u[d[w]];
                      E.high = h, E.low = m;
                    }
                    var C = u[0], T = r4[0];
                    for (C.high = T.high, C.low = T.low, p2 = 0; p2 < 5; p2++)
                      for (f = 0; f < 5; f++) {
                        var P = r4[w = p2 + 5 * f], O = u[w], x = u[(p2 + 1) % 5 + 5 * f], D = u[(p2 + 2) % 5 + 5 * f];
                        P.high = O.high ^ ~x.high & D.high, P.low = O.low ^ ~x.low & D.low;
                      }
                    P = r4[0];
                    var I = l[o2];
                    P.high ^= I.high, P.low ^= I.low;
                  }
                },
                _doFinalize: function() {
                  var t4 = this._data, r4 = t4.words, n3 = (this._nDataBytes, 8 * t4.sigBytes), i2 = 32 * this.blockSize;
                  r4[n3 >>> 5] |= 1 << 24 - n3 % 32, r4[(e3.ceil((n3 + 1) / i2) * i2 >>> 5) - 1] |= 128, t4.sigBytes = 4 * r4.length, this._process();
                  for (var a2 = this._state, o2 = this.cfg.outputLength / 8, c2 = o2 / 8, d2 = [], l2 = 0; l2 < c2; l2++) {
                    var u2 = a2[l2], p2 = u2.high, h = u2.low;
                    p2 = 16711935 & (p2 << 8 | p2 >>> 24) | 4278255360 & (p2 << 24 | p2 >>> 8), h = 16711935 & (h << 8 | h >>> 24) | 4278255360 & (h << 24 | h >>> 8), d2.push(h), d2.push(p2);
                  }
                  return new s.init(d2, o2);
                },
                clone: function() {
                  for (var e4 = i.clone.call(this), t4 = e4._state = this._state.slice(0), r4 = 0; r4 < 25; r4++)
                    t4[r4] = t4[r4].clone();
                  return e4;
                }
              });
              t3.SHA3 = i._createHelper(p), t3.HmacSHA3 = i._createHmacHelper(p);
            }(Math), n2.SHA3);
          },
          6004: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Device = t2.detectDevice = void 0;
            const a = r2(7232), o = r2(2994), c = r2(2010), d = r2(4893), l = i(r2(1765)), u = i(r2(8046)), p = r2(5601), h = r2(2183), m = r2(11), f = r2(5535), g = r2(8155), v = r2(7402), _ = r2(2292), y = r2(1767), b = r2(5765), w = r2(9676), S = r2(8633), R = r2(4039), k = r2(9352), E = new o.Logger("Device");
            function C() {
              var _a, _b, _c, _d;
              if ("object" == typeof navigator && "ReactNative" === navigator.product)
                return E.debug("detectDevice() | React-Native detected"), "undefined" == typeof RTCPeerConnection ? void E.warn(
                  "detectDevice() | unsupported react-native-webrtc without RTCPeerConnection, forgot to call registerGlobals()?"
                ) : "undefined" != typeof RTCRtpTransceiver ? (E.debug(
                  "detectDevice() | ReactNative UnifiedPlan handler chosen"
                ), "ReactNativeUnifiedPlan") : (E.debug(
                  "detectDevice() | ReactNative PlanB handler chosen"
                ), "ReactNative");
              if ("object" != typeof navigator || "string" != typeof navigator.userAgent)
                E.warn("detectDevice() | unknown device");
              else {
                const e3 = navigator.userAgent, t3 = new a.UAParser(e3);
                E.debug(
                  "detectDevice() | browser detected [ua:%s, parsed:%o]",
                  e3,
                  t3.getResult()
                );
                const r3 = t3.getBrowser(), n3 = (_a = r3.name) == null ? void 0 : _a.toLowerCase(), s2 = parseInt(r3.major ?? "0"), i2 = t3.getEngine(), o2 = (_b = i2.name) == null ? void 0 : _b.toLowerCase(), c2 = t3.getOS(), d2 = (_c = c2.name) == null ? void 0 : _c.toLowerCase(), l2 = parseFloat(c2.version ?? "0"), u2 = t3.getDevice(), p2 = (_d = u2.model) == null ? void 0 : _d.toLowerCase(), h2 = "ios" === d2 || "ipad" === p2, m2 = n3 && [
                  "chrome",
                  "chromium",
                  "mobile chrome",
                  "chrome webview",
                  "chrome headless"
                ].includes(n3), f2 = n3 && ["firefox", "mobile firefox", "mobile focus"].includes(n3), g2 = n3 && ["safari", "mobile safari"].includes(n3), v2 = n3 && ["edge"].includes(n3);
                if ((m2 || v2) && !h2 && s2 >= 111) return "Chrome111";
                if (m2 && !h2 && s2 >= 74 || v2 && !h2 && s2 >= 88)
                  return "Chrome74";
                if (m2 && !h2 && s2 >= 70) return "Chrome70";
                if (m2 && !h2 && s2 >= 67) return "Chrome67";
                if (m2 && !h2 && s2 >= 55) return "Chrome55";
                if (f2 && !h2 && s2 >= 120) return "Firefox120";
                if (f2 && !h2 && s2 >= 60) return "Firefox60";
                if (f2 && h2 && l2 >= 14.3) return "Safari12";
                if (g2 && s2 >= 12 && "undefined" != typeof RTCRtpTransceiver && RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection"))
                  return "Safari12";
                if (g2 && s2 >= 11) return "Safari11";
                if (v2 && !h2 && s2 >= 11 && s2 <= 18) return "Edge11";
                if ("webkit" === o2 && h2 && "undefined" != typeof RTCRtpTransceiver && RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection"))
                  return "Safari12";
                if ("blink" === o2) {
                  const t4 = e3.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
                  if (t4) {
                    const e4 = Number(t4[1]);
                    return e4 >= 111 ? "Chrome111" : e4 >= 74 ? "Chrome74" : e4 >= 70 ? "Chrome70" : e4 >= 67 ? "Chrome67" : "Chrome55";
                  }
                  return "Chrome111";
                }
                E.warn(
                  "detectDevice() | browser not supported [name:%s, version:%s]",
                  n3,
                  s2
                );
              }
            }
            t2.detectDevice = C;
            t2.Device = class {
              constructor({
                handlerName: e3,
                handlerFactory: t3,
                Handler: r3
              } = {}) {
                if (this._loaded = false, this._observer = new c.EnhancedEventEmitter(), E.debug("constructor()"), r3) {
                  if (E.warn(
                    "constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead"
                  ), "string" != typeof r3)
                    throw new TypeError(
                      "non string Handler option no longer supported, use handlerFactory instead"
                    );
                  e3 = r3;
                }
                if (e3 && t3)
                  throw new TypeError(
                    "just one of handlerName or handlerInterface can be given"
                  );
                if (t3) this._handlerFactory = t3;
                else {
                  if (e3) E.debug("constructor() | handler given: %s", e3);
                  else {
                    if (!(e3 = C()))
                      throw new d.UnsupportedError("device not supported");
                    E.debug("constructor() | detected handler: %s", e3);
                  }
                  switch (e3) {
                    case "Chrome111":
                      this._handlerFactory = h.Chrome111.createFactory();
                      break;
                    case "Chrome74":
                      this._handlerFactory = m.Chrome74.createFactory();
                      break;
                    case "Chrome70":
                      this._handlerFactory = f.Chrome70.createFactory();
                      break;
                    case "Chrome67":
                      this._handlerFactory = g.Chrome67.createFactory();
                      break;
                    case "Chrome55":
                      this._handlerFactory = v.Chrome55.createFactory();
                      break;
                    case "Firefox120":
                      this._handlerFactory = _.Firefox120.createFactory();
                      break;
                    case "Firefox60":
                      this._handlerFactory = y.Firefox60.createFactory();
                      break;
                    case "Safari12":
                      this._handlerFactory = b.Safari12.createFactory();
                      break;
                    case "Safari11":
                      this._handlerFactory = w.Safari11.createFactory();
                      break;
                    case "Edge11":
                      this._handlerFactory = S.Edge11.createFactory();
                      break;
                    case "ReactNativeUnifiedPlan":
                      this._handlerFactory = R.ReactNativeUnifiedPlan.createFactory();
                      break;
                    case "ReactNative":
                      this._handlerFactory = k.ReactNative.createFactory();
                      break;
                    default:
                      throw new TypeError(`unknown handlerName "${e3}"`);
                  }
                }
                const n3 = this._handlerFactory();
                this._handlerName = n3.name, n3.close(), this._extendedRtpCapabilities = void 0, this._recvRtpCapabilities = void 0, this._canProduceByKind = { audio: false, video: false }, this._sctpCapabilities = void 0;
              }
              get handlerName() {
                return this._handlerName;
              }
              get loaded() {
                return this._loaded;
              }
              get rtpCapabilities() {
                if (!this._loaded) throw new d.InvalidStateError("not loaded");
                return this._recvRtpCapabilities;
              }
              get sctpCapabilities() {
                if (!this._loaded) throw new d.InvalidStateError("not loaded");
                return this._sctpCapabilities;
              }
              get observer() {
                return this._observer;
              }
              async load({ routerRtpCapabilities: e3 }) {
                let t3;
                E.debug("load() [routerRtpCapabilities:%o]", e3);
                try {
                  if (this._loaded)
                    throw new d.InvalidStateError("already loaded");
                  const r3 = l.clone(e3);
                  u.validateRtpCapabilities(r3), t3 = this._handlerFactory();
                  const n3 = await t3.getNativeRtpCapabilities();
                  E.debug("load() | got native RTP capabilities:%o", n3);
                  const s2 = l.clone(n3);
                  u.validateRtpCapabilities(s2), this._extendedRtpCapabilities = u.getExtendedRtpCapabilities(
                    s2,
                    r3
                  ), E.debug(
                    "load() | got extended RTP capabilities:%o",
                    this._extendedRtpCapabilities
                  ), this._canProduceByKind.audio = u.canSend(
                    "audio",
                    this._extendedRtpCapabilities
                  ), this._canProduceByKind.video = u.canSend(
                    "video",
                    this._extendedRtpCapabilities
                  ), this._recvRtpCapabilities = u.getRecvRtpCapabilities(
                    this._extendedRtpCapabilities
                  ), u.validateRtpCapabilities(this._recvRtpCapabilities), E.debug(
                    "load() | got receiving RTP capabilities:%o",
                    this._recvRtpCapabilities
                  ), this._sctpCapabilities = await t3.getNativeSctpCapabilities(), E.debug(
                    "load() | got native SCTP capabilities:%o",
                    this._sctpCapabilities
                  ), u.validateSctpCapabilities(this._sctpCapabilities), E.debug("load() succeeded"), this._loaded = true, t3.close();
                } catch (e4) {
                  throw t3 && t3.close(), e4;
                }
              }
              canProduce(e3) {
                if (!this._loaded) throw new d.InvalidStateError("not loaded");
                if ("audio" !== e3 && "video" !== e3)
                  throw new TypeError(`invalid kind "${e3}"`);
                return this._canProduceByKind[e3];
              }
              createSendTransport({
                id: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                appData: d2
              }) {
                return E.debug("createSendTransport()"), this.createTransport({
                  direction: "send",
                  id: e3,
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2,
                  iceServers: i2,
                  iceTransportPolicy: a2,
                  additionalSettings: o2,
                  proprietaryConstraints: c2,
                  appData: d2
                });
              }
              createRecvTransport({
                id: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                appData: d2
              }) {
                return E.debug("createRecvTransport()"), this.createTransport({
                  direction: "recv",
                  id: e3,
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2,
                  iceServers: i2,
                  iceTransportPolicy: a2,
                  additionalSettings: o2,
                  proprietaryConstraints: c2,
                  appData: d2
                });
              }
              createTransport({
                direction: e3,
                id: t3,
                iceParameters: r3,
                iceCandidates: n3,
                dtlsParameters: s2,
                sctpParameters: i2,
                iceServers: a2,
                iceTransportPolicy: o2,
                additionalSettings: c2,
                proprietaryConstraints: l2,
                appData: u2
              }) {
                if (!this._loaded) throw new d.InvalidStateError("not loaded");
                if ("string" != typeof t3) throw new TypeError("missing id");
                if ("object" != typeof r3)
                  throw new TypeError("missing iceParameters");
                if (!Array.isArray(n3))
                  throw new TypeError("missing iceCandidates");
                if ("object" != typeof s2)
                  throw new TypeError("missing dtlsParameters");
                if (i2 && "object" != typeof i2)
                  throw new TypeError("wrong sctpParameters");
                if (u2 && "object" != typeof u2)
                  throw new TypeError("if given, appData must be an object");
                const h2 = new p.Transport({
                  direction: e3,
                  id: t3,
                  iceParameters: r3,
                  iceCandidates: n3,
                  dtlsParameters: s2,
                  sctpParameters: i2,
                  iceServers: a2,
                  iceTransportPolicy: o2,
                  additionalSettings: c2,
                  proprietaryConstraints: l2,
                  appData: u2,
                  handlerFactory: this._handlerFactory,
                  extendedRtpCapabilities: this._extendedRtpCapabilities,
                  canProduceByKind: this._canProduceByKind
                });
                return this._observer.safeEmit("newtransport", h2), h2;
              }
            };
          },
          6298: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = n2, t3 = e3.lib.StreamCipher, r3 = e3.algo, s = [], i = [], a = [], o = r3.Rabbit = t3.extend({
                _doReset: function() {
                  for (var e4 = this._key.words, t4 = this.cfg.iv, r4 = 0; r4 < 4; r4++)
                    e4[r4] = 16711935 & (e4[r4] << 8 | e4[r4] >>> 24) | 4278255360 & (e4[r4] << 24 | e4[r4] >>> 8);
                  var n3 = this._X = [
                    e4[0],
                    e4[3] << 16 | e4[2] >>> 16,
                    e4[1],
                    e4[0] << 16 | e4[3] >>> 16,
                    e4[2],
                    e4[1] << 16 | e4[0] >>> 16,
                    e4[3],
                    e4[2] << 16 | e4[1] >>> 16
                  ], s2 = this._C = [
                    e4[2] << 16 | e4[2] >>> 16,
                    4294901760 & e4[0] | 65535 & e4[1],
                    e4[3] << 16 | e4[3] >>> 16,
                    4294901760 & e4[1] | 65535 & e4[2],
                    e4[0] << 16 | e4[0] >>> 16,
                    4294901760 & e4[2] | 65535 & e4[3],
                    e4[1] << 16 | e4[1] >>> 16,
                    4294901760 & e4[3] | 65535 & e4[0]
                  ];
                  for (this._b = 0, r4 = 0; r4 < 4; r4++) c.call(this);
                  for (r4 = 0; r4 < 8; r4++) s2[r4] ^= n3[r4 + 4 & 7];
                  if (t4) {
                    var i2 = t4.words, a2 = i2[0], o2 = i2[1], d = 16711935 & (a2 << 8 | a2 >>> 24) | 4278255360 & (a2 << 24 | a2 >>> 8), l = 16711935 & (o2 << 8 | o2 >>> 24) | 4278255360 & (o2 << 24 | o2 >>> 8), u = d >>> 16 | 4294901760 & l, p = l << 16 | 65535 & d;
                    for (s2[0] ^= d, s2[1] ^= u, s2[2] ^= l, s2[3] ^= p, s2[4] ^= d, s2[5] ^= u, s2[6] ^= l, s2[7] ^= p, r4 = 0; r4 < 4; r4++)
                      c.call(this);
                  }
                },
                _doProcessBlock: function(e4, t4) {
                  var r4 = this._X;
                  c.call(this), s[0] = r4[0] ^ r4[5] >>> 16 ^ r4[3] << 16, s[1] = r4[2] ^ r4[7] >>> 16 ^ r4[5] << 16, s[2] = r4[4] ^ r4[1] >>> 16 ^ r4[7] << 16, s[3] = r4[6] ^ r4[3] >>> 16 ^ r4[1] << 16;
                  for (var n3 = 0; n3 < 4; n3++)
                    s[n3] = 16711935 & (s[n3] << 8 | s[n3] >>> 24) | 4278255360 & (s[n3] << 24 | s[n3] >>> 8), e4[t4 + n3] ^= s[n3];
                },
                blockSize: 4,
                ivSize: 2
              });
              function c() {
                for (var e4 = this._X, t4 = this._C, r4 = 0; r4 < 8; r4++)
                  i[r4] = t4[r4];
                for (t4[0] = t4[0] + 1295307597 + this._b | 0, t4[1] = t4[1] + 3545052371 + (t4[0] >>> 0 < i[0] >>> 0 ? 1 : 0) | 0, t4[2] = t4[2] + 886263092 + (t4[1] >>> 0 < i[1] >>> 0 ? 1 : 0) | 0, t4[3] = t4[3] + 1295307597 + (t4[2] >>> 0 < i[2] >>> 0 ? 1 : 0) | 0, t4[4] = t4[4] + 3545052371 + (t4[3] >>> 0 < i[3] >>> 0 ? 1 : 0) | 0, t4[5] = t4[5] + 886263092 + (t4[4] >>> 0 < i[4] >>> 0 ? 1 : 0) | 0, t4[6] = t4[6] + 1295307597 + (t4[5] >>> 0 < i[5] >>> 0 ? 1 : 0) | 0, t4[7] = t4[7] + 3545052371 + (t4[6] >>> 0 < i[6] >>> 0 ? 1 : 0) | 0, this._b = t4[7] >>> 0 < i[7] >>> 0 ? 1 : 0, r4 = 0; r4 < 8; r4++) {
                  var n3 = e4[r4] + t4[r4], s2 = 65535 & n3, o2 = n3 >>> 16, c2 = ((s2 * s2 >>> 17) + s2 * o2 >>> 15) + o2 * o2, d = ((4294901760 & n3) * n3 | 0) + ((65535 & n3) * n3 | 0);
                  a[r4] = c2 ^ d;
                }
                e4[0] = a[0] + (a[7] << 16 | a[7] >>> 16) + (a[6] << 16 | a[6] >>> 16) | 0, e4[1] = a[1] + (a[0] << 8 | a[0] >>> 24) + a[7] | 0, e4[2] = a[2] + (a[1] << 16 | a[1] >>> 16) + (a[0] << 16 | a[0] >>> 16) | 0, e4[3] = a[3] + (a[2] << 8 | a[2] >>> 24) + a[1] | 0, e4[4] = a[4] + (a[3] << 16 | a[3] >>> 16) + (a[2] << 16 | a[2] >>> 16) | 0, e4[5] = a[5] + (a[4] << 8 | a[4] >>> 24) + a[3] | 0, e4[6] = a[6] + (a[5] << 16 | a[5] >>> 16) + (a[4] << 16 | a[4] >>> 16) | 0, e4[7] = a[7] + (a[6] << 8 | a[6] >>> 24) + a[5] | 0;
              }
              e3.Rabbit = t3._createHelper(o);
            }(), n2.Rabbit);
          },
          6308: function(e2, t2, r2) {
            var n2, s, i, a, o, c;
            e2.exports = (c = r2(9021), r2(3009), s = (n2 = c).lib.WordArray, i = n2.algo, a = i.SHA256, o = i.SHA224 = a.extend({
              _doReset: function() {
                this._hash = new s.init([
                  3238371032,
                  914150663,
                  812702999,
                  4144912697,
                  4290775857,
                  1750603025,
                  1694076839,
                  3204075428
                ]);
              },
              _doFinalize: function() {
                var e3 = a._doFinalize.call(this);
                return e3.sigBytes -= 4, e3;
              }
            }), n2.SHA224 = a._createHelper(o), n2.HmacSHA224 = a._createHmacHelper(o), c.SHA224);
          },
          6372: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(7165), n2.mode.CTRGladman = function() {
              var e3 = n2.lib.BlockCipherMode.extend();
              function t3(e4) {
                if (255 & ~(e4 >> 24)) e4 += 1 << 24;
                else {
                  var t4 = e4 >> 16 & 255, r4 = e4 >> 8 & 255, n3 = 255 & e4;
                  255 === t4 ? (t4 = 0, 255 === r4 ? (r4 = 0, 255 === n3 ? n3 = 0 : ++n3) : ++r4) : ++t4, e4 = 0, e4 += t4 << 16, e4 += r4 << 8, e4 += n3;
                }
                return e4;
              }
              function r3(e4) {
                return 0 === (e4[0] = t3(e4[0])) && (e4[1] = t3(e4[1])), e4;
              }
              var s = e3.Encryptor = e3.extend({
                processBlock: function(e4, t4) {
                  var n3 = this._cipher, s2 = n3.blockSize, i = this._iv, a = this._counter;
                  i && (a = this._counter = i.slice(0), this._iv = void 0), r3(a);
                  var o = a.slice(0);
                  n3.encryptBlock(o, 0);
                  for (var c = 0; c < s2; c++) e4[t4 + c] ^= o[c];
                }
              });
              return e3.Decryptor = s, e3;
            }(), n2.mode.CTRGladman);
          },
          6440: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), function() {
              if ("function" == typeof ArrayBuffer) {
                var e3 = n2.lib.WordArray, t3 = e3.init, r3 = e3.init = function(e4) {
                  if (e4 instanceof ArrayBuffer && (e4 = new Uint8Array(e4)), (e4 instanceof Int8Array || "undefined" != typeof Uint8ClampedArray && e4 instanceof Uint8ClampedArray || e4 instanceof Int16Array || e4 instanceof Uint16Array || e4 instanceof Int32Array || e4 instanceof Uint32Array || e4 instanceof Float32Array || e4 instanceof Float64Array) && (e4 = new Uint8Array(
                    e4.buffer,
                    e4.byteOffset,
                    e4.byteLength
                  )), e4 instanceof Uint8Array) {
                    for (var r4 = e4.byteLength, n3 = [], s = 0; s < r4; s++)
                      n3[s >>> 2] |= e4[s] << 24 - s % 4 * 8;
                    t3.call(this, n3, r4);
                  } else t3.apply(this, arguments);
                };
                r3.prototype = e3;
              }
            }(), n2.lib.WordArray);
          },
          6585: (e2) => {
            var t2 = 1e3, r2 = 60 * t2, n2 = 60 * r2, s = 24 * n2, i = 7 * s, a = 365.25 * s;
            function o(e3, t3, r3, n3) {
              var s2 = t3 >= 1.5 * r3;
              return Math.round(e3 / r3) + " " + n3 + (s2 ? "s" : "");
            }
            e2.exports = function(e3, c) {
              c = c || {};
              var d = typeof e3;
              if ("string" === d && e3.length > 0)
                return function(e4) {
                  if ((e4 = String(e4)).length > 100) return;
                  var o2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                    e4
                  );
                  if (!o2) return;
                  var c2 = parseFloat(o2[1]);
                  switch ((o2[2] || "ms").toLowerCase()) {
                    case "years":
                    case "year":
                    case "yrs":
                    case "yr":
                    case "y":
                      return c2 * a;
                    case "weeks":
                    case "week":
                    case "w":
                      return c2 * i;
                    case "days":
                    case "day":
                    case "d":
                      return c2 * s;
                    case "hours":
                    case "hour":
                    case "hrs":
                    case "hr":
                    case "h":
                      return c2 * n2;
                    case "minutes":
                    case "minute":
                    case "mins":
                    case "min":
                    case "m":
                      return c2 * r2;
                    case "seconds":
                    case "second":
                    case "secs":
                    case "sec":
                    case "s":
                      return c2 * t2;
                    case "milliseconds":
                    case "millisecond":
                    case "msecs":
                    case "msec":
                    case "ms":
                      return c2;
                    default:
                      return;
                  }
                }(e3);
              if ("number" === d && isFinite(e3))
                return c.long ? function(e4) {
                  var i2 = Math.abs(e4);
                  if (i2 >= s) return o(e4, i2, s, "day");
                  if (i2 >= n2) return o(e4, i2, n2, "hour");
                  if (i2 >= r2) return o(e4, i2, r2, "minute");
                  if (i2 >= t2) return o(e4, i2, t2, "second");
                  return e4 + " ms";
                }(e3) : function(e4) {
                  var i2 = Math.abs(e4);
                  if (i2 >= s) return Math.round(e4 / s) + "d";
                  if (i2 >= n2) return Math.round(e4 / n2) + "h";
                  if (i2 >= r2) return Math.round(e4 / r2) + "m";
                  if (i2 >= t2) return Math.round(e4 / t2) + "s";
                  return e4 + "ms";
                }(e3);
              throw new Error(
                "val is not a non-empty string or a valid number. val=" + JSON.stringify(e3)
              );
            };
          },
          6746: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { KS: () => s, fo: () => n2 });
            var n2 = Object.freeze({
              SetKey: "setKey",
              RatchetRequest: "ratchetRequest",
              KeyRatcheted: "keyRatcheted"
            }), s = (Object.freeze({ KeyRatcheted: "keyRatcheted" }), Object.freeze({
              ParticipantEncryptionStatusChanged: "participantEncryptionStatusChanged",
              EncryptionError: "encryptionError",
              E2EEStateChange: "e2eeStateChange"
            }));
            Object.freeze({ Error: "cryptorError", Message: "cryptorMessage" }), Object.freeze({
              EncryptionSuccess: "encryptionSuccess",
              EncryptionFailed: "encryptionFailed",
              DecryptionSuccess: "decryptionSuccess",
              DecryptionFailed: "decryptionFailed",
              MissingKey: "missingKey",
              InternalError: "internalError",
              InvalidKey: "invalidKey"
            });
          },
          6880: function(e2) {
            e2.exports = function(e3) {
              var t2 = {};
              function r2(n2) {
                if (t2[n2]) return t2[n2].exports;
                var s = t2[n2] = { i: n2, l: false, exports: {} };
                return e3[n2].call(s.exports, s, s.exports, r2), s.l = true, s.exports;
              }
              return r2.m = e3, r2.c = t2, r2.d = function(e4, t3, n2) {
                r2.o(e4, t3) || Object.defineProperty(e4, t3, { enumerable: true, get: n2 });
              }, r2.r = function(e4) {
                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e4, Symbol.toStringTag, {
                  value: "Module"
                }), Object.defineProperty(e4, "__esModule", { value: true });
              }, r2.t = function(e4, t3) {
                if (1 & t3 && (e4 = r2(e4)), 8 & t3) return e4;
                if (4 & t3 && "object" == typeof e4 && e4 && e4.__esModule)
                  return e4;
                var n2 = /* @__PURE__ */ Object.create(null);
                if (r2.r(n2), Object.defineProperty(n2, "default", {
                  enumerable: true,
                  value: e4
                }), 2 & t3 && "string" != typeof e4)
                  for (var s in e4)
                    r2.d(
                      n2,
                      s,
                      (function(t4) {
                        return e4[t4];
                      }).bind(null, s)
                    );
                return n2;
              }, r2.n = function(e4) {
                var t3 = e4 && e4.__esModule ? function() {
                  return e4.default;
                } : function() {
                  return e4;
                };
                return r2.d(t3, "a", t3), t3;
              }, r2.o = function(e4, t3) {
                return Object.prototype.hasOwnProperty.call(e4, t3);
              }, r2.p = "", r2(r2.s = 90);
            }({
              17: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n2 = r2(18), s = function() {
                  function e4() {
                  }
                  return e4.getFirstMatch = function(e5, t3) {
                    var r3 = t3.match(e5);
                    return r3 && r3.length > 0 && r3[1] || "";
                  }, e4.getSecondMatch = function(e5, t3) {
                    var r3 = t3.match(e5);
                    return r3 && r3.length > 1 && r3[2] || "";
                  }, e4.matchAndReturnConst = function(e5, t3, r3) {
                    if (e5.test(t3)) return r3;
                  }, e4.getWindowsVersionName = function(e5) {
                    switch (e5) {
                      case "NT":
                        return "NT";
                      case "XP":
                      case "NT 5.1":
                        return "XP";
                      case "NT 5.0":
                        return "2000";
                      case "NT 5.2":
                        return "2003";
                      case "NT 6.0":
                        return "Vista";
                      case "NT 6.1":
                        return "7";
                      case "NT 6.2":
                        return "8";
                      case "NT 6.3":
                        return "8.1";
                      case "NT 10.0":
                        return "10";
                      default:
                        return;
                    }
                  }, e4.getMacOSVersionName = function(e5) {
                    var t3 = e5.split(".").splice(0, 2).map(function(e6) {
                      return parseInt(e6, 10) || 0;
                    });
                    if (t3.push(0), 10 === t3[0])
                      switch (t3[1]) {
                        case 5:
                          return "Leopard";
                        case 6:
                          return "Snow Leopard";
                        case 7:
                          return "Lion";
                        case 8:
                          return "Mountain Lion";
                        case 9:
                          return "Mavericks";
                        case 10:
                          return "Yosemite";
                        case 11:
                          return "El Capitan";
                        case 12:
                          return "Sierra";
                        case 13:
                          return "High Sierra";
                        case 14:
                          return "Mojave";
                        case 15:
                          return "Catalina";
                        default:
                          return;
                      }
                  }, e4.getAndroidVersionName = function(e5) {
                    var t3 = e5.split(".").splice(0, 2).map(function(e6) {
                      return parseInt(e6, 10) || 0;
                    });
                    if (t3.push(0), !(1 === t3[0] && t3[1] < 5))
                      return 1 === t3[0] && t3[1] < 6 ? "Cupcake" : 1 === t3[0] && t3[1] >= 6 ? "Donut" : 2 === t3[0] && t3[1] < 2 ? "Eclair" : 2 === t3[0] && 2 === t3[1] ? "Froyo" : 2 === t3[0] && t3[1] > 2 ? "Gingerbread" : 3 === t3[0] ? "Honeycomb" : 4 === t3[0] && t3[1] < 1 ? "Ice Cream Sandwich" : 4 === t3[0] && t3[1] < 4 ? "Jelly Bean" : 4 === t3[0] && t3[1] >= 4 ? "KitKat" : 5 === t3[0] ? "Lollipop" : 6 === t3[0] ? "Marshmallow" : 7 === t3[0] ? "Nougat" : 8 === t3[0] ? "Oreo" : 9 === t3[0] ? "Pie" : void 0;
                  }, e4.getVersionPrecision = function(e5) {
                    return e5.split(".").length;
                  }, e4.compareVersions = function(t3, r3, n3) {
                    void 0 === n3 && (n3 = false);
                    var s2 = e4.getVersionPrecision(t3), i = e4.getVersionPrecision(r3), a = Math.max(s2, i), o = 0, c = e4.map([t3, r3], function(t4) {
                      var r4 = a - e4.getVersionPrecision(t4), n4 = t4 + new Array(r4 + 1).join(".0");
                      return e4.map(n4.split("."), function(e5) {
                        return new Array(20 - e5.length).join("0") + e5;
                      }).reverse();
                    });
                    for (n3 && (o = a - Math.min(s2, i)), a -= 1; a >= o; ) {
                      if (c[0][a] > c[1][a]) return 1;
                      if (c[0][a] === c[1][a]) {
                        if (a === o) return 0;
                        a -= 1;
                      } else if (c[0][a] < c[1][a]) return -1;
                    }
                  }, e4.map = function(e5, t3) {
                    var r3, n3 = [];
                    if (Array.prototype.map)
                      return Array.prototype.map.call(e5, t3);
                    for (r3 = 0; r3 < e5.length; r3 += 1) n3.push(t3(e5[r3]));
                    return n3;
                  }, e4.find = function(e5, t3) {
                    var r3, n3;
                    if (Array.prototype.find)
                      return Array.prototype.find.call(e5, t3);
                    for (r3 = 0, n3 = e5.length; r3 < n3; r3 += 1) {
                      var s2 = e5[r3];
                      if (t3(s2, r3)) return s2;
                    }
                  }, e4.assign = function(e5) {
                    for (var t3, r3, n3 = e5, s2 = arguments.length, i = new Array(s2 > 1 ? s2 - 1 : 0), a = 1; a < s2; a++)
                      i[a - 1] = arguments[a];
                    if (Object.assign)
                      return Object.assign.apply(Object, [e5].concat(i));
                    var o = function() {
                      var e6 = i[t3];
                      "object" == typeof e6 && null !== e6 && Object.keys(e6).forEach(function(t4) {
                        n3[t4] = e6[t4];
                      });
                    };
                    for (t3 = 0, r3 = i.length; t3 < r3; t3 += 1) o();
                    return e5;
                  }, e4.getBrowserAlias = function(e5) {
                    return n2.BROWSER_ALIASES_MAP[e5];
                  }, e4.getBrowserTypeByAlias = function(e5) {
                    return n2.BROWSER_MAP[e5] || "";
                  }, e4;
                }();
                t2.default = s, e3.exports = t2.default;
              },
              18: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.ENGINE_MAP = t2.OS_MAP = t2.PLATFORMS_MAP = t2.BROWSER_MAP = t2.BROWSER_ALIASES_MAP = void 0, t2.BROWSER_ALIASES_MAP = {
                  "Amazon Silk": "amazon_silk",
                  "Android Browser": "android",
                  Bada: "bada",
                  BlackBerry: "blackberry",
                  Chrome: "chrome",
                  Chromium: "chromium",
                  Electron: "electron",
                  Epiphany: "epiphany",
                  Firefox: "firefox",
                  Focus: "focus",
                  Generic: "generic",
                  "Google Search": "google_search",
                  Googlebot: "googlebot",
                  "Internet Explorer": "ie",
                  "K-Meleon": "k_meleon",
                  Maxthon: "maxthon",
                  "Microsoft Edge": "edge",
                  "MZ Browser": "mz",
                  "NAVER Whale Browser": "naver",
                  Opera: "opera",
                  "Opera Coast": "opera_coast",
                  PhantomJS: "phantomjs",
                  Puffin: "puffin",
                  QupZilla: "qupzilla",
                  QQ: "qq",
                  QQLite: "qqlite",
                  Safari: "safari",
                  Sailfish: "sailfish",
                  "Samsung Internet for Android": "samsung_internet",
                  SeaMonkey: "seamonkey",
                  Sleipnir: "sleipnir",
                  Swing: "swing",
                  Tizen: "tizen",
                  "UC Browser": "uc",
                  Vivaldi: "vivaldi",
                  "WebOS Browser": "webos",
                  WeChat: "wechat",
                  "Yandex Browser": "yandex",
                  Roku: "roku"
                }, t2.BROWSER_MAP = {
                  amazon_silk: "Amazon Silk",
                  android: "Android Browser",
                  bada: "Bada",
                  blackberry: "BlackBerry",
                  chrome: "Chrome",
                  chromium: "Chromium",
                  electron: "Electron",
                  epiphany: "Epiphany",
                  firefox: "Firefox",
                  focus: "Focus",
                  generic: "Generic",
                  googlebot: "Googlebot",
                  google_search: "Google Search",
                  ie: "Internet Explorer",
                  k_meleon: "K-Meleon",
                  maxthon: "Maxthon",
                  edge: "Microsoft Edge",
                  mz: "MZ Browser",
                  naver: "NAVER Whale Browser",
                  opera: "Opera",
                  opera_coast: "Opera Coast",
                  phantomjs: "PhantomJS",
                  puffin: "Puffin",
                  qupzilla: "QupZilla",
                  qq: "QQ Browser",
                  qqlite: "QQ Browser Lite",
                  safari: "Safari",
                  sailfish: "Sailfish",
                  samsung_internet: "Samsung Internet for Android",
                  seamonkey: "SeaMonkey",
                  sleipnir: "Sleipnir",
                  swing: "Swing",
                  tizen: "Tizen",
                  uc: "UC Browser",
                  vivaldi: "Vivaldi",
                  webos: "WebOS Browser",
                  wechat: "WeChat",
                  yandex: "Yandex Browser"
                }, t2.PLATFORMS_MAP = {
                  tablet: "tablet",
                  mobile: "mobile",
                  desktop: "desktop",
                  tv: "tv"
                }, t2.OS_MAP = {
                  WindowsPhone: "Windows Phone",
                  Windows: "Windows",
                  MacOS: "macOS",
                  iOS: "iOS",
                  Android: "Android",
                  WebOS: "WebOS",
                  BlackBerry: "BlackBerry",
                  Bada: "Bada",
                  Tizen: "Tizen",
                  Linux: "Linux",
                  ChromeOS: "Chrome OS",
                  PlayStation4: "PlayStation 4",
                  Roku: "Roku"
                }, t2.ENGINE_MAP = {
                  EdgeHTML: "EdgeHTML",
                  Blink: "Blink",
                  Trident: "Trident",
                  Presto: "Presto",
                  Gecko: "Gecko",
                  WebKit: "WebKit"
                };
              },
              90: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n2, s = (n2 = r2(91)) && n2.__esModule ? n2 : { default: n2 }, i = r2(18);
                function a(e4, t3) {
                  for (var r3 = 0; r3 < t3.length; r3++) {
                    var n3 = t3[r3];
                    n3.enumerable = n3.enumerable || false, n3.configurable = true, "value" in n3 && (n3.writable = true), Object.defineProperty(e4, n3.key, n3);
                  }
                }
                var o = function() {
                  function e4() {
                  }
                  var t3, r3, n3;
                  return e4.getParser = function(e5, t4) {
                    if (void 0 === t4 && (t4 = false), "string" != typeof e5)
                      throw new Error("UserAgent should be a string");
                    return new s.default(e5, t4);
                  }, e4.parse = function(e5) {
                    return new s.default(e5).getResult();
                  }, t3 = e4, n3 = [
                    {
                      key: "BROWSER_MAP",
                      get: function() {
                        return i.BROWSER_MAP;
                      }
                    },
                    {
                      key: "ENGINE_MAP",
                      get: function() {
                        return i.ENGINE_MAP;
                      }
                    },
                    {
                      key: "OS_MAP",
                      get: function() {
                        return i.OS_MAP;
                      }
                    },
                    {
                      key: "PLATFORMS_MAP",
                      get: function() {
                        return i.PLATFORMS_MAP;
                      }
                    }
                  ], (r3 = null) && a(t3.prototype, r3), n3 && a(t3, n3), e4;
                }();
                t2.default = o, e3.exports = t2.default;
              },
              91: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n2 = c(r2(92)), s = c(r2(93)), i = c(r2(94)), a = c(r2(95)), o = c(r2(17));
                function c(e4) {
                  return e4 && e4.__esModule ? e4 : { default: e4 };
                }
                var d = function() {
                  function e4(e5, t4) {
                    if (void 0 === t4 && (t4 = false), null == e5 || "" === e5)
                      throw new Error("UserAgent parameter can't be empty");
                    this._ua = e5, this.parsedResult = {}, true !== t4 && this.parse();
                  }
                  var t3 = e4.prototype;
                  return t3.getUA = function() {
                    return this._ua;
                  }, t3.test = function(e5) {
                    return e5.test(this._ua);
                  }, t3.parseBrowser = function() {
                    var e5 = this;
                    this.parsedResult.browser = {};
                    var t4 = o.default.find(n2.default, function(t5) {
                      if ("function" == typeof t5.test) return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.browser = t4.describe(this.getUA())), this.parsedResult.browser;
                  }, t3.getBrowser = function() {
                    return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
                  }, t3.getBrowserName = function(e5) {
                    return e5 ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
                  }, t3.getBrowserVersion = function() {
                    return this.getBrowser().version;
                  }, t3.getOS = function() {
                    return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
                  }, t3.parseOS = function() {
                    var e5 = this;
                    this.parsedResult.os = {};
                    var t4 = o.default.find(s.default, function(t5) {
                      if ("function" == typeof t5.test) return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.os = t4.describe(this.getUA())), this.parsedResult.os;
                  }, t3.getOSName = function(e5) {
                    var t4 = this.getOS().name;
                    return e5 ? String(t4).toLowerCase() || "" : t4 || "";
                  }, t3.getOSVersion = function() {
                    return this.getOS().version;
                  }, t3.getPlatform = function() {
                    return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
                  }, t3.getPlatformType = function(e5) {
                    void 0 === e5 && (e5 = false);
                    var t4 = this.getPlatform().type;
                    return e5 ? String(t4).toLowerCase() || "" : t4 || "";
                  }, t3.parsePlatform = function() {
                    var e5 = this;
                    this.parsedResult.platform = {};
                    var t4 = o.default.find(i.default, function(t5) {
                      if ("function" == typeof t5.test) return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.platform = t4.describe(this.getUA())), this.parsedResult.platform;
                  }, t3.getEngine = function() {
                    return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
                  }, t3.getEngineName = function(e5) {
                    return e5 ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
                  }, t3.parseEngine = function() {
                    var e5 = this;
                    this.parsedResult.engine = {};
                    var t4 = o.default.find(a.default, function(t5) {
                      if ("function" == typeof t5.test) return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.engine = t4.describe(this.getUA())), this.parsedResult.engine;
                  }, t3.parse = function() {
                    return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
                  }, t3.getResult = function() {
                    return o.default.assign({}, this.parsedResult);
                  }, t3.satisfies = function(e5) {
                    var t4 = this, r3 = {}, n3 = 0, s2 = {}, i2 = 0;
                    if (Object.keys(e5).forEach(function(t5) {
                      var a3 = e5[t5];
                      "string" == typeof a3 ? (s2[t5] = a3, i2 += 1) : "object" == typeof a3 && (r3[t5] = a3, n3 += 1);
                    }), n3 > 0) {
                      var a2 = Object.keys(r3), c2 = o.default.find(a2, function(e6) {
                        return t4.isOS(e6);
                      });
                      if (c2) {
                        var d2 = this.satisfies(r3[c2]);
                        if (void 0 !== d2) return d2;
                      }
                      var l = o.default.find(a2, function(e6) {
                        return t4.isPlatform(e6);
                      });
                      if (l) {
                        var u = this.satisfies(r3[l]);
                        if (void 0 !== u) return u;
                      }
                    }
                    if (i2 > 0) {
                      var p = Object.keys(s2), h = o.default.find(p, function(e6) {
                        return t4.isBrowser(e6, true);
                      });
                      if (void 0 !== h) return this.compareVersion(s2[h]);
                    }
                  }, t3.isBrowser = function(e5, t4) {
                    void 0 === t4 && (t4 = false);
                    var r3 = this.getBrowserName().toLowerCase(), n3 = e5.toLowerCase(), s2 = o.default.getBrowserTypeByAlias(n3);
                    return t4 && s2 && (n3 = s2.toLowerCase()), n3 === r3;
                  }, t3.compareVersion = function(e5) {
                    var t4 = [0], r3 = e5, n3 = false, s2 = this.getBrowserVersion();
                    if ("string" == typeof s2)
                      return ">" === e5[0] || "<" === e5[0] ? (r3 = e5.substr(1), "=" === e5[1] ? (n3 = true, r3 = e5.substr(2)) : t4 = [], ">" === e5[0] ? t4.push(1) : t4.push(-1)) : "=" === e5[0] ? r3 = e5.substr(1) : "~" === e5[0] && (n3 = true, r3 = e5.substr(1)), t4.indexOf(o.default.compareVersions(s2, r3, n3)) > -1;
                  }, t3.isOS = function(e5) {
                    return this.getOSName(true) === String(e5).toLowerCase();
                  }, t3.isPlatform = function(e5) {
                    return this.getPlatformType(true) === String(e5).toLowerCase();
                  }, t3.isEngine = function(e5) {
                    return this.getEngineName(true) === String(e5).toLowerCase();
                  }, t3.is = function(e5, t4) {
                    return void 0 === t4 && (t4 = false), this.isBrowser(e5, t4) || this.isOS(e5) || this.isPlatform(e5);
                  }, t3.some = function(e5) {
                    var t4 = this;
                    return void 0 === e5 && (e5 = []), e5.some(function(e6) {
                      return t4.is(e6);
                    });
                  }, e4;
                }();
                t2.default = d, e3.exports = t2.default;
              },
              92: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n2, s = (n2 = r2(17)) && n2.__esModule ? n2 : { default: n2 }, i = /version\/(\d+(\.?_?\d+)+)/i, a = [
                  {
                    test: [/googlebot/i],
                    describe: function(e4) {
                      var t3 = { name: "Googlebot" }, r3 = s.default.getFirstMatch(
                        /googlebot\/(\d+(\.\d+))/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/opera/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /(?:opera)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/opr\/|opios/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera" }, r3 = s.default.getFirstMatch(
                        /(?:opr|opios)[\s/](\S+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/SamsungBrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "Samsung Internet for Android" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/Whale/i],
                    describe: function(e4) {
                      var t3 = { name: "NAVER Whale Browser" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /(?:whale)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/MZBrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "MZ Browser" }, r3 = s.default.getFirstMatch(
                        /(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/focus/i],
                    describe: function(e4) {
                      var t3 = { name: "Focus" }, r3 = s.default.getFirstMatch(
                        /(?:focus)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/swing/i],
                    describe: function(e4) {
                      var t3 = { name: "Swing" }, r3 = s.default.getFirstMatch(
                        /(?:swing)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/coast/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera Coast" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /(?:coast)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/opt\/\d+(?:.?_?\d+)+/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera Touch" }, r3 = s.default.getFirstMatch(
                        /(?:opt)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/yabrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "Yandex Browser" }, r3 = s.default.getFirstMatch(
                        /(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/ucbrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "UC Browser" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/Maxthon|mxios/i],
                    describe: function(e4) {
                      var t3 = { name: "Maxthon" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/epiphany/i],
                    describe: function(e4) {
                      var t3 = { name: "Epiphany" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/puffin/i],
                    describe: function(e4) {
                      var t3 = { name: "Puffin" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/sleipnir/i],
                    describe: function(e4) {
                      var t3 = { name: "Sleipnir" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/k-meleon/i],
                    describe: function(e4) {
                      var t3 = { name: "K-Meleon" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/micromessenger/i],
                    describe: function(e4) {
                      var t3 = { name: "WeChat" }, r3 = s.default.getFirstMatch(
                        /(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/qqbrowser/i],
                    describe: function(e4) {
                      var t3 = {
                        name: /qqbrowserlite/i.test(e4) ? "QQ Browser Lite" : "QQ Browser"
                      }, r3 = s.default.getFirstMatch(
                        /(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/msie|trident/i],
                    describe: function(e4) {
                      var t3 = { name: "Internet Explorer" }, r3 = s.default.getFirstMatch(
                        /(?:msie |rv:)(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/\sedg\//i],
                    describe: function(e4) {
                      var t3 = { name: "Microsoft Edge" }, r3 = s.default.getFirstMatch(
                        /\sedg\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/edg([ea]|ios)/i],
                    describe: function(e4) {
                      var t3 = { name: "Microsoft Edge" }, r3 = s.default.getSecondMatch(
                        /edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/vivaldi/i],
                    describe: function(e4) {
                      var t3 = { name: "Vivaldi" }, r3 = s.default.getFirstMatch(
                        /vivaldi\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/seamonkey/i],
                    describe: function(e4) {
                      var t3 = { name: "SeaMonkey" }, r3 = s.default.getFirstMatch(
                        /seamonkey\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/sailfish/i],
                    describe: function(e4) {
                      var t3 = { name: "Sailfish" }, r3 = s.default.getFirstMatch(
                        /sailfish\s?browser\/(\d+(\.\d+)?)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/silk/i],
                    describe: function(e4) {
                      var t3 = { name: "Amazon Silk" }, r3 = s.default.getFirstMatch(
                        /silk\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/phantom/i],
                    describe: function(e4) {
                      var t3 = { name: "PhantomJS" }, r3 = s.default.getFirstMatch(
                        /phantomjs\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/slimerjs/i],
                    describe: function(e4) {
                      var t3 = { name: "SlimerJS" }, r3 = s.default.getFirstMatch(
                        /slimerjs\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function(e4) {
                      var t3 = { name: "BlackBerry" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function(e4) {
                      var t3 = { name: "WebOS Browser" }, r3 = s.default.getFirstMatch(i, e4) || s.default.getFirstMatch(
                        /w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/bada/i],
                    describe: function(e4) {
                      var t3 = { name: "Bada" }, r3 = s.default.getFirstMatch(
                        /dolfin\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/tizen/i],
                    describe: function(e4) {
                      var t3 = { name: "Tizen" }, r3 = s.default.getFirstMatch(
                        /(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/qupzilla/i],
                    describe: function(e4) {
                      var t3 = { name: "QupZilla" }, r3 = s.default.getFirstMatch(
                        /(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/firefox|iceweasel|fxios/i],
                    describe: function(e4) {
                      var t3 = { name: "Firefox" }, r3 = s.default.getFirstMatch(
                        /(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/electron/i],
                    describe: function(e4) {
                      var t3 = { name: "Electron" }, r3 = s.default.getFirstMatch(
                        /(?:electron)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/MiuiBrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "Miui" }, r3 = s.default.getFirstMatch(
                        /(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/chromium/i],
                    describe: function(e4) {
                      var t3 = { name: "Chromium" }, r3 = s.default.getFirstMatch(
                        /(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/chrome|crios|crmo/i],
                    describe: function(e4) {
                      var t3 = { name: "Chrome" }, r3 = s.default.getFirstMatch(
                        /(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/GSA/i],
                    describe: function(e4) {
                      var t3 = { name: "Google Search" }, r3 = s.default.getFirstMatch(
                        /(?:GSA)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = !e4.test(/like android/i), r3 = e4.test(/android/i);
                      return t3 && r3;
                    },
                    describe: function(e4) {
                      var t3 = { name: "Android Browser" }, r3 = s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/playstation 4/i],
                    describe: function(e4) {
                      var t3 = { name: "PlayStation 4" }, r3 = s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/safari|applewebkit/i],
                    describe: function(e4) {
                      var t3 = { name: "Safari" }, r3 = s.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/.*/i],
                    describe: function(e4) {
                      var t3 = -1 !== e4.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
                      return {
                        name: s.default.getFirstMatch(t3, e4),
                        version: s.default.getSecondMatch(t3, e4)
                      };
                    }
                  }
                ];
                t2.default = a, e3.exports = t2.default;
              },
              93: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n2, s = (n2 = r2(17)) && n2.__esModule ? n2 : { default: n2 }, i = r2(18), a = [
                  {
                    test: [/Roku\/DVP/],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(
                        /Roku\/DVP-(\d+\.\d+)/i,
                        e4
                      );
                      return { name: i.OS_MAP.Roku, version: t3 };
                    }
                  },
                  {
                    test: [/windows phone/i],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(
                        /windows phone (?:os)?\s?(\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: i.OS_MAP.WindowsPhone, version: t3 };
                    }
                  },
                  {
                    test: [/windows /i],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(
                        /Windows ((NT|XP)( \d\d?.\d)?)/i,
                        e4
                      ), r3 = s.default.getWindowsVersionName(t3);
                      return {
                        name: i.OS_MAP.Windows,
                        version: t3,
                        versionName: r3
                      };
                    }
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function(e4) {
                      var t3 = { name: i.OS_MAP.iOS }, r3 = s.default.getSecondMatch(
                        /(Version\/)(\d[\d.]+)/,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/macintosh/i],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e4).replace(/[_\s]/g, "."), r3 = s.default.getMacOSVersionName(t3), n3 = { name: i.OS_MAP.MacOS, version: t3 };
                      return r3 && (n3.versionName = r3), n3;
                    }
                  },
                  {
                    test: [/(ipod|iphone|ipad)/i],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e4).replace(/[_\s]/g, ".");
                      return { name: i.OS_MAP.iOS, version: t3 };
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = !e4.test(/like android/i), r3 = e4.test(/android/i);
                      return t3 && r3;
                    },
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(
                        /android[\s/-](\d+(\.\d+)*)/i,
                        e4
                      ), r3 = s.default.getAndroidVersionName(t3), n3 = { name: i.OS_MAP.Android, version: t3 };
                      return r3 && (n3.versionName = r3), n3;
                    }
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(
                        /(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,
                        e4
                      ), r3 = { name: i.OS_MAP.WebOS };
                      return t3 && t3.length && (r3.version = t3), r3;
                    }
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(
                        /rim\stablet\sos\s(\d+(\.\d+)*)/i,
                        e4
                      ) || s.default.getFirstMatch(
                        /blackberry\d+\/(\d+([_\s]\d+)*)/i,
                        e4
                      ) || s.default.getFirstMatch(/\bbb(\d+)/i, e4);
                      return { name: i.OS_MAP.BlackBerry, version: t3 };
                    }
                  },
                  {
                    test: [/bada/i],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(
                        /bada\/(\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: i.OS_MAP.Bada, version: t3 };
                    }
                  },
                  {
                    test: [/tizen/i],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(
                        /tizen[/\s](\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: i.OS_MAP.Tizen, version: t3 };
                    }
                  },
                  {
                    test: [/linux/i],
                    describe: function() {
                      return { name: i.OS_MAP.Linux };
                    }
                  },
                  {
                    test: [/CrOS/],
                    describe: function() {
                      return { name: i.OS_MAP.ChromeOS };
                    }
                  },
                  {
                    test: [/PlayStation 4/],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(
                        /PlayStation 4[/\s](\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: i.OS_MAP.PlayStation4, version: t3 };
                    }
                  }
                ];
                t2.default = a, e3.exports = t2.default;
              },
              94: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n2, s = (n2 = r2(17)) && n2.__esModule ? n2 : { default: n2 }, i = r2(18), a = [
                  {
                    test: [/googlebot/i],
                    describe: function() {
                      return { type: "bot", vendor: "Google" };
                    }
                  },
                  {
                    test: [/huawei/i],
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(/(can-l01)/i, e4) && "Nova", r3 = { type: i.PLATFORMS_MAP.mobile, vendor: "Huawei" };
                      return t3 && (r3.model = t3), r3;
                    }
                  },
                  {
                    test: [/nexus\s*(?:7|8|9|10).*/i],
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tablet, vendor: "Nexus" };
                    }
                  },
                  {
                    test: [/ipad/i],
                    describe: function() {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad"
                      };
                    }
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function() {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad"
                      };
                    }
                  },
                  {
                    test: [/kftt build/i],
                    describe: function() {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Amazon",
                        model: "Kindle Fire HD 7"
                      };
                    }
                  },
                  {
                    test: [/silk/i],
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tablet, vendor: "Amazon" };
                    }
                  },
                  {
                    test: [/tablet(?! pc)/i],
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tablet };
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = e4.test(/ipod|iphone/i), r3 = e4.test(/like (ipod|iphone)/i);
                      return t3 && !r3;
                    },
                    describe: function(e4) {
                      var t3 = s.default.getFirstMatch(/(ipod|iphone)/i, e4);
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "Apple",
                        model: t3
                      };
                    }
                  },
                  {
                    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.mobile, vendor: "Nexus" };
                    }
                  },
                  {
                    test: [/[^-]mobi/i],
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.mobile };
                    }
                  },
                  {
                    test: function(e4) {
                      return "blackberry" === e4.getBrowserName(true);
                    },
                    describe: function() {
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "BlackBerry"
                      };
                    }
                  },
                  {
                    test: function(e4) {
                      return "bada" === e4.getBrowserName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.mobile };
                    }
                  },
                  {
                    test: function(e4) {
                      return "windows phone" === e4.getBrowserName();
                    },
                    describe: function() {
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "Microsoft"
                      };
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = Number(String(e4.getOSVersion()).split(".")[0]);
                      return "android" === e4.getOSName(true) && t3 >= 3;
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tablet };
                    }
                  },
                  {
                    test: function(e4) {
                      return "android" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.mobile };
                    }
                  },
                  {
                    test: function(e4) {
                      return "macos" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.desktop, vendor: "Apple" };
                    }
                  },
                  {
                    test: function(e4) {
                      return "windows" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.desktop };
                    }
                  },
                  {
                    test: function(e4) {
                      return "linux" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.desktop };
                    }
                  },
                  {
                    test: function(e4) {
                      return "playstation 4" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tv };
                    }
                  },
                  {
                    test: function(e4) {
                      return "roku" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tv };
                    }
                  }
                ];
                t2.default = a, e3.exports = t2.default;
              },
              95: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n2, s = (n2 = r2(17)) && n2.__esModule ? n2 : { default: n2 }, i = r2(18), a = [
                  {
                    test: function(e4) {
                      return "microsoft edge" === e4.getBrowserName(true);
                    },
                    describe: function(e4) {
                      if (/\sedg\//i.test(e4))
                        return { name: i.ENGINE_MAP.Blink };
                      var t3 = s.default.getFirstMatch(
                        /edge\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return { name: i.ENGINE_MAP.EdgeHTML, version: t3 };
                    }
                  },
                  {
                    test: [/trident/i],
                    describe: function(e4) {
                      var t3 = { name: i.ENGINE_MAP.Trident }, r3 = s.default.getFirstMatch(
                        /trident\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: function(e4) {
                      return e4.test(/presto/i);
                    },
                    describe: function(e4) {
                      var t3 = { name: i.ENGINE_MAP.Presto }, r3 = s.default.getFirstMatch(
                        /presto\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = e4.test(/gecko/i), r3 = e4.test(/like gecko/i);
                      return t3 && !r3;
                    },
                    describe: function(e4) {
                      var t3 = { name: i.ENGINE_MAP.Gecko }, r3 = s.default.getFirstMatch(
                        /gecko\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/(apple)?webkit\/537\.36/i],
                    describe: function() {
                      return { name: i.ENGINE_MAP.Blink };
                    }
                  },
                  {
                    test: [/(apple)?webkit/i],
                    describe: function(e4) {
                      var t3 = { name: i.ENGINE_MAP.WebKit }, r3 = s.default.getFirstMatch(
                        /webkit\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  }
                ];
                t2.default = a, e3.exports = t2.default;
              }
            });
          },
          6939: function(e2, t2, r2) {
            var n2, s, i;
            e2.exports = (i = r2(9021), r2(7165), i.mode.CTR = (n2 = i.lib.BlockCipherMode.extend(), s = n2.Encryptor = n2.extend({
              processBlock: function(e3, t3) {
                var r3 = this._cipher, n3 = r3.blockSize, s2 = this._iv, i2 = this._counter;
                s2 && (i2 = this._counter = s2.slice(0), this._iv = void 0);
                var a = i2.slice(0);
                r3.encryptBlock(a, 0), i2[n3 - 1] = i2[n3 - 1] + 1 | 0;
                for (var o = 0; o < n3; o++) e3[t3 + o] ^= a[o];
              }
            }), n2.Decryptor = s, n2), i.mode.CTR);
          },
          7007: (e2) => {
            "use strict";
            var t2, r2 = "object" == typeof Reflect ? Reflect : null, n2 = r2 && "function" == typeof r2.apply ? r2.apply : function(e3, t3, r3) {
              return Function.prototype.apply.call(e3, t3, r3);
            };
            t2 = r2 && "function" == typeof r2.ownKeys ? r2.ownKeys : Object.getOwnPropertySymbols ? function(e3) {
              return Object.getOwnPropertyNames(e3).concat(
                Object.getOwnPropertySymbols(e3)
              );
            } : function(e3) {
              return Object.getOwnPropertyNames(e3);
            };
            var s = Number.isNaN || function(e3) {
              return e3 != e3;
            };
            function i() {
              i.init.call(this);
            }
            e2.exports = i, e2.exports.once = function(e3, t3) {
              return new Promise(function(r3, n3) {
                function s2(r4) {
                  e3.removeListener(t3, i2), n3(r4);
                }
                function i2() {
                  "function" == typeof e3.removeListener && e3.removeListener("error", s2), r3([].slice.call(arguments));
                }
                f(e3, t3, i2, { once: true }), "error" !== t3 && function(e4, t4, r4) {
                  "function" == typeof e4.on && f(e4, "error", t4, r4);
                }(e3, s2, { once: true });
              });
            }, i.EventEmitter = i, i.prototype._events = void 0, i.prototype._eventsCount = 0, i.prototype._maxListeners = void 0;
            var a = 10;
            function o(e3) {
              if ("function" != typeof e3)
                throw new TypeError(
                  'The "listener" argument must be of type Function. Received type ' + typeof e3
                );
            }
            function c(e3) {
              return void 0 === e3._maxListeners ? i.defaultMaxListeners : e3._maxListeners;
            }
            function d(e3, t3, r3, n3) {
              var s2, i2, a2, d2;
              if (o(r3), void 0 === (i2 = e3._events) ? (i2 = e3._events = /* @__PURE__ */ Object.create(null), e3._eventsCount = 0) : (void 0 !== i2.newListener && (e3.emit("newListener", t3, r3.listener ? r3.listener : r3), i2 = e3._events), a2 = i2[t3]), void 0 === a2)
                a2 = i2[t3] = r3, ++e3._eventsCount;
              else if ("function" == typeof a2 ? a2 = i2[t3] = n3 ? [r3, a2] : [a2, r3] : n3 ? a2.unshift(r3) : a2.push(r3), (s2 = c(e3)) > 0 && a2.length > s2 && !a2.warned) {
                a2.warned = true;
                var l2 = new Error(
                  "Possible EventEmitter memory leak detected. " + a2.length + " " + String(t3) + " listeners added. Use emitter.setMaxListeners() to increase limit"
                );
                l2.name = "MaxListenersExceededWarning", l2.emitter = e3, l2.type = t3, l2.count = a2.length, d2 = l2, console && console.warn && console.warn(d2);
              }
              return e3;
            }
            function l() {
              if (!this.fired)
                return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
            }
            function u(e3, t3, r3) {
              var n3 = {
                fired: false,
                wrapFn: void 0,
                target: e3,
                type: t3,
                listener: r3
              }, s2 = l.bind(n3);
              return s2.listener = r3, n3.wrapFn = s2, s2;
            }
            function p(e3, t3, r3) {
              var n3 = e3._events;
              if (void 0 === n3) return [];
              var s2 = n3[t3];
              return void 0 === s2 ? [] : "function" == typeof s2 ? r3 ? [s2.listener || s2] : [s2] : r3 ? function(e4) {
                for (var t4 = new Array(e4.length), r4 = 0; r4 < t4.length; ++r4)
                  t4[r4] = e4[r4].listener || e4[r4];
                return t4;
              }(s2) : m(s2, s2.length);
            }
            function h(e3) {
              var t3 = this._events;
              if (void 0 !== t3) {
                var r3 = t3[e3];
                if ("function" == typeof r3) return 1;
                if (void 0 !== r3) return r3.length;
              }
              return 0;
            }
            function m(e3, t3) {
              for (var r3 = new Array(t3), n3 = 0; n3 < t3; ++n3) r3[n3] = e3[n3];
              return r3;
            }
            function f(e3, t3, r3, n3) {
              if ("function" == typeof e3.on) n3.once ? e3.once(t3, r3) : e3.on(t3, r3);
              else {
                if ("function" != typeof e3.addEventListener)
                  throw new TypeError(
                    'The "emitter" argument must be of type EventEmitter. Received type ' + typeof e3
                  );
                e3.addEventListener(t3, function s2(i2) {
                  n3.once && e3.removeEventListener(t3, s2), r3(i2);
                });
              }
            }
            Object.defineProperty(i, "defaultMaxListeners", {
              enumerable: true,
              get: function() {
                return a;
              },
              set: function(e3) {
                if ("number" != typeof e3 || e3 < 0 || s(e3))
                  throw new RangeError(
                    'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e3 + "."
                  );
                a = e3;
              }
            }), i.init = function() {
              void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
            }, i.prototype.setMaxListeners = function(e3) {
              if ("number" != typeof e3 || e3 < 0 || s(e3))
                throw new RangeError(
                  'The value of "n" is out of range. It must be a non-negative number. Received ' + e3 + "."
                );
              return this._maxListeners = e3, this;
            }, i.prototype.getMaxListeners = function() {
              return c(this);
            }, i.prototype.emit = function(e3) {
              for (var t3 = [], r3 = 1; r3 < arguments.length; r3++)
                t3.push(arguments[r3]);
              var s2 = "error" === e3, i2 = this._events;
              if (void 0 !== i2) s2 = s2 && void 0 === i2.error;
              else if (!s2) return false;
              if (s2) {
                var a2;
                if (t3.length > 0 && (a2 = t3[0]), a2 instanceof Error) throw a2;
                var o2 = new Error(
                  "Unhandled error." + (a2 ? " (" + a2.message + ")" : "")
                );
                throw o2.context = a2, o2;
              }
              var c2 = i2[e3];
              if (void 0 === c2) return false;
              if ("function" == typeof c2) n2(c2, this, t3);
              else {
                var d2 = c2.length, l2 = m(c2, d2);
                for (r3 = 0; r3 < d2; ++r3) n2(l2[r3], this, t3);
              }
              return true;
            }, i.prototype.addListener = function(e3, t3) {
              return d(this, e3, t3, false);
            }, i.prototype.on = i.prototype.addListener, i.prototype.prependListener = function(e3, t3) {
              return d(this, e3, t3, true);
            }, i.prototype.once = function(e3, t3) {
              return o(t3), this.on(e3, u(this, e3, t3)), this;
            }, i.prototype.prependOnceListener = function(e3, t3) {
              return o(t3), this.prependListener(e3, u(this, e3, t3)), this;
            }, i.prototype.removeListener = function(e3, t3) {
              var r3, n3, s2, i2, a2;
              if (o(t3), void 0 === (n3 = this._events)) return this;
              if (void 0 === (r3 = n3[e3])) return this;
              if (r3 === t3 || r3.listener === t3)
                0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete n3[e3], n3.removeListener && this.emit("removeListener", e3, r3.listener || t3));
              else if ("function" != typeof r3) {
                for (s2 = -1, i2 = r3.length - 1; i2 >= 0; i2--)
                  if (r3[i2] === t3 || r3[i2].listener === t3) {
                    a2 = r3[i2].listener, s2 = i2;
                    break;
                  }
                if (s2 < 0) return this;
                0 === s2 ? r3.shift() : function(e4, t4) {
                  for (; t4 + 1 < e4.length; t4++) e4[t4] = e4[t4 + 1];
                  e4.pop();
                }(r3, s2), 1 === r3.length && (n3[e3] = r3[0]), void 0 !== n3.removeListener && this.emit("removeListener", e3, a2 || t3);
              }
              return this;
            }, i.prototype.off = i.prototype.removeListener, i.prototype.removeAllListeners = function(e3) {
              var t3, r3, n3;
              if (void 0 === (r3 = this._events)) return this;
              if (void 0 === r3.removeListener)
                return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== r3[e3] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete r3[e3]), this;
              if (0 === arguments.length) {
                var s2, i2 = Object.keys(r3);
                for (n3 = 0; n3 < i2.length; ++n3)
                  "removeListener" !== (s2 = i2[n3]) && this.removeAllListeners(s2);
                return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
              }
              if ("function" == typeof (t3 = r3[e3])) this.removeListener(e3, t3);
              else if (void 0 !== t3)
                for (n3 = t3.length - 1; n3 >= 0; n3--)
                  this.removeListener(e3, t3[n3]);
              return this;
            }, i.prototype.listeners = function(e3) {
              return p(this, e3, true);
            }, i.prototype.rawListeners = function(e3) {
              return p(this, e3, false);
            }, i.listenerCount = function(e3, t3) {
              return "function" == typeof e3.listenerCount ? e3.listenerCount(t3) : h.call(e3, t3);
            }, i.prototype.listenerCount = h, i.prototype.eventNames = function() {
              return this._eventsCount > 0 ? t2(this._events) : [];
            };
          },
          7080: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { q: () => s, s: () => n2 });
            var n2 = {
              INVALID_API_KEY: 4001,
              INVALID_TOKEN: 4002,
              INVALID_MEETING_ID: 4003,
              INVALID_PARTICIPANT_ID: 4004,
              DUPLICATE_PARTICIPANT: 4005,
              ACCOUNT_DEACTIVATED: 4006,
              ACCOUNT_DISCONTINUED: 4007,
              INVALID_PERMISSIONS: 4008,
              MAX_PARTCIPANT_REACHED: 4009,
              MAX_SPEAKER_REACHED: 4010,
              START_RECORDING_FAILED: 4011,
              STOP_RECORDING_FAILED: 4012,
              START_LIVESTREAM_FAILED: 4013,
              STOP_LIVESTREAM_FAILED: 4014,
              INVALID_LIVESTREAM_CONFIG: 4015,
              START_HLS_FAILED: 4016,
              STOP_HLS_FAILED: 4017,
              START_TRANSCRIPTION_FAILED: 4031,
              STOP_TRANSCRIPTION_FAILED: 4032,
              RECORDING_FAILED: 5001,
              LIVESTREAM_FAILED: 5002,
              HLS_FAILED: 5003,
              TRANSCRIPTION_FAILED: 5007,
              ERROR_GET_VIDEO_MEDIA: 3011,
              ERROR_GET_AUDIO_MEDIA: 3012,
              ERROR_GET_DISPLAY_MEDIA: 3013,
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: 3014,
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: 3015,
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: 3016,
              ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED: 3017,
              ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED: 3018,
              ERROR_CAMERA_PERMISSION_DENIED_BY_OS: 3019,
              ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS: 3020,
              ERROR_CAMERA_NOT_FOUND: 3021,
              ERROR_MICROPHONE_NOT_FOUND: 3022,
              ERROR_CAMERA_IN_USE: 3023,
              ERROR_MICROPHONE_IN_USE: 3024,
              ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE: 3025,
              ERROR_VIDEO_SOURCE_INITIATION_FAILED: 3026,
              ERROR_WEBCAM_TRACK_ENDED: 3027,
              ERROR_MICROPHONE_TRACK_ENDED: 3028,
              ERROR_INVALID_CUSTOM_VIDEO_TRACK: 3029,
              ERROR_INVALID_CUSTOM_AUDIO_TRACK: 3030,
              ERROR_CUSTOM_VIDEO_TRACK_ENDED: 3031,
              ERROR_CUSTOM_AUDIO_TRACK_ENDED: 3032,
              ERROR_CAMERA_ACCESS_UNAVAILABLE: 3033,
              ERROR_MICROPHONE_ACCESS_UNAVAILABLE: 3034,
              ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED: 3035,
              ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED: 3036,
              ERROR_RN_CAMERA_NOT_FOUND: 3037,
              ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED: 3038,
              ERROR_RN_MIC_NOT_FOUND: 3039,
              ERROR_RN_CAMERA_ACCESS_UNAVAILABLE: 3040,
              ERROR_RN_MIC_ACCESS_UNAVAILABLE: 3041,
              ERROR_RN_CAMERA_TRACK_ENDED: 3042,
              ERROR_RN_MIC_TRACK_ENDED: 3043
            }, s = {
              ERROR_GET_VIDEO_MEDIA: {
                code: 3011,
                message: "Your browser/Device does not support Video."
              },
              ERROR_GET_AUDIO_MEDIA: {
                code: 3012,
                message: "Your browser/Device does not support Audio."
              },
              ERROR_GET_DISPLAY_MEDIA: {
                code: 3013,
                message: "Your browser/Device does not support Screen Sharing."
              },
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: {
                code: 3014,
                message: "Video capture permission denied."
              },
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: {
                code: 3015,
                message: "Audio capture permission denied."
              },
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: {
                code: 3016,
                message: "Screen sharing permission denied."
              },
              ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED: {
                code: 3017,
                message: "Oops! It seems like camera access was denied or dismissed. To proceed, kindly grant access through your browser settings."
              },
              ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED: {
                code: 3018,
                message: "Oops! It seems like microphone access was denied or dismissed. To proceed, kindly grant access through your browser settings."
              },
              ERROR_CAMERA_PERMISSION_DENIED_BY_OS: {
                code: 3019,
                message: "Camera permission denied by OS system settings. Please check the system settings and grant permission for this browser."
              },
              ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS: {
                code: 3020,
                message: "Microphone permission denied by OS system settings. Please check the system settings and grant permission for this browser."
              },
              ERROR_CAMERA_NOT_FOUND: {
                code: 3021,
                message: "Please ensure your camera is connected and turned on, and that the camera driver is installed and up-to-date."
              },
              ERROR_MICROPHONE_NOT_FOUND: {
                code: 3022,
                message: "Please ensure your microphone is connected and turned on."
              },
              ERROR_CAMERA_IN_USE: {
                code: 3023,
                message: "The camera is being used by another application. Please close any programs utilizing the camera, such as video conferencing tools, screen recording software, or other browsers. Restart your browser and attempt again."
              },
              ERROR_MICROPHONE_IN_USE: {
                code: 3024,
                message: "The microphone is being used by another application. Please close any programs utilizing the microphone, such as video conferencing tools, screen recording software, or other browsers. Restart your browser and attempt again."
              },
              ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE: {
                code: 3025,
                message: "It seems like there's an issue with camera permission or video autoplay, you can check out this link for details: http://tinyurl.com/autoplay-issue"
              },
              ERROR_VIDEO_SOURCE_INITIATION_FAILED: {
                code: 3026,
                message: "Unable to initiate video source. Please verify browser settings for video permissions."
              },
              ERROR_WEBCAM_TRACK_ENDED: {
                code: 3027,
                message: "Webcam track has ended or the webcam is disconnected. Please ensure your webcam is properly connected and try restarting it."
              },
              ERROR_MICROPHONE_TRACK_ENDED: {
                code: 3028,
                message: "Microphone track has ended or the microphone is disconnected. Please check your microphone connection and try again."
              },
              ERROR_INVALID_CUSTOM_VIDEO_TRACK: {
                code: 3029,
                message: "The provided custom video track is invalid; reverting to the default video track. Please ensure that the video track meets the required specifications."
              },
              ERROR_INVALID_CUSTOM_AUDIO_TRACK: {
                code: 3030,
                message: "The provided custom audio track is invalid; reverting to the default audio track. Please ensure that the audio track meets the required specifications."
              },
              ERROR_CUSTOM_VIDEO_TRACK_ENDED: {
                code: 3031,
                message: "The provided custom video track is in an ended state. Please verify the video track's status, and try again."
              },
              ERROR_CUSTOM_AUDIO_TRACK_ENDED: {
                code: 3032,
                message: "The provided custom audio track is in an ended state. Please verify the audio track's status, and try again."
              },
              ERROR_CAMERA_ACCESS_UNAVAILABLE: {
                code: 3033,
                message: "Camera access unavailable: Please ensure your device is compatible and that you're on a secure website (https://)."
              },
              ERROR_MICROPHONE_ACCESS_UNAVAILABLE: {
                code: 3034,
                message: "Microphone access unavailable: Please ensure your device is compatible and that you're on a secure website (https://)."
              },
              ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED: {
                code: 3035,
                message: "Oops! Something went wrong. The room was in a connecting state, and during that time, an action encountered an issue. Please try again after joining a meeting."
              },
              ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED: {
                code: 3036,
                message: "Oops! It seems like camera access was denied or dismissed. To proceed, kindly grant access through your App settings."
              },
              ERROR_RN_CAMERA_NOT_FOUND: {
                code: 3037,
                message: "Please ensure your camera is connected and turned on"
              },
              ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED: {
                code: 3038,
                message: "Oops! It seems like mic access was denied or dismissed. To proceed, kindly grant access through your App settings."
              },
              ERROR_RN_MIC_NOT_FOUND: {
                code: 3039,
                message: "Please ensure your mic is connected and turned on"
              },
              ERROR_RN_CAMERA_ACCESS_UNAVAILABLE: {
                code: 3040,
                message: "Camera access unavailable: Please ensure your device is compatible."
              },
              ERROR_RN_MIC_ACCESS_UNAVAILABLE: {
                code: 3041,
                message: "Microphone access unavailable: Please ensure your device is compatible."
              },
              ERROR_RN_CAMERA_TRACK_ENDED: {
                code: 3042,
                message: "Camera track has ended. Please make sure your camera is turned on or try restarting it."
              },
              ERROR_RN_MIC_TRACK_ENDED: {
                code: 3043,
                message: "Microphone track has ended or the microphone is disconnected. Please check your microphone connection and try again."
              }
            };
          },
          7165: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(9506), void (n2.lib.Cipher || function(e3) {
              var t3 = n2, r3 = t3.lib, s = r3.Base, i = r3.WordArray, a = r3.BufferedBlockAlgorithm, o = t3.enc, c = (o.Utf8, o.Base64), d = t3.algo.EvpKDF, l = r3.Cipher = a.extend({
                cfg: s.extend(),
                createEncryptor: function(e4, t4) {
                  return this.create(this._ENC_XFORM_MODE, e4, t4);
                },
                createDecryptor: function(e4, t4) {
                  return this.create(this._DEC_XFORM_MODE, e4, t4);
                },
                init: function(e4, t4, r4) {
                  this.cfg = this.cfg.extend(r4), this._xformMode = e4, this._key = t4, this.reset();
                },
                reset: function() {
                  a.reset.call(this), this._doReset();
                },
                process: function(e4) {
                  return this._append(e4), this._process();
                },
                finalize: function(e4) {
                  return e4 && this._append(e4), this._doFinalize();
                },
                keySize: 4,
                ivSize: 4,
                _ENC_XFORM_MODE: 1,
                _DEC_XFORM_MODE: 2,
                _createHelper: /* @__PURE__ */ function() {
                  function e4(e5) {
                    return "string" == typeof e5 ? y : v;
                  }
                  return function(t4) {
                    return {
                      encrypt: function(r4, n3, s2) {
                        return e4(n3).encrypt(t4, r4, n3, s2);
                      },
                      decrypt: function(r4, n3, s2) {
                        return e4(n3).decrypt(t4, r4, n3, s2);
                      }
                    };
                  };
                }()
              }), u = (r3.StreamCipher = l.extend({
                _doFinalize: function() {
                  return this._process(true);
                },
                blockSize: 1
              }), t3.mode = {}), p = r3.BlockCipherMode = s.extend({
                createEncryptor: function(e4, t4) {
                  return this.Encryptor.create(e4, t4);
                },
                createDecryptor: function(e4, t4) {
                  return this.Decryptor.create(e4, t4);
                },
                init: function(e4, t4) {
                  this._cipher = e4, this._iv = t4;
                }
              }), h = u.CBC = function() {
                var t4 = p.extend();
                function r4(t5, r5, n3) {
                  var s2, i2 = this._iv;
                  i2 ? (s2 = i2, this._iv = e3) : s2 = this._prevBlock;
                  for (var a2 = 0; a2 < n3; a2++) t5[r5 + a2] ^= s2[a2];
                }
                return t4.Encryptor = t4.extend({
                  processBlock: function(e4, t5) {
                    var n3 = this._cipher, s2 = n3.blockSize;
                    r4.call(this, e4, t5, s2), n3.encryptBlock(e4, t5), this._prevBlock = e4.slice(t5, t5 + s2);
                  }
                }), t4.Decryptor = t4.extend({
                  processBlock: function(e4, t5) {
                    var n3 = this._cipher, s2 = n3.blockSize, i2 = e4.slice(t5, t5 + s2);
                    n3.decryptBlock(e4, t5), r4.call(this, e4, t5, s2), this._prevBlock = i2;
                  }
                }), t4;
              }(), m = (t3.pad = {}).Pkcs7 = {
                pad: function(e4, t4) {
                  for (var r4 = 4 * t4, n3 = r4 - e4.sigBytes % r4, s2 = n3 << 24 | n3 << 16 | n3 << 8 | n3, a2 = [], o2 = 0; o2 < n3; o2 += 4)
                    a2.push(s2);
                  var c2 = i.create(a2, n3);
                  e4.concat(c2);
                },
                unpad: function(e4) {
                  var t4 = 255 & e4.words[e4.sigBytes - 1 >>> 2];
                  e4.sigBytes -= t4;
                }
              }, f = (r3.BlockCipher = l.extend({
                cfg: l.cfg.extend({ mode: h, padding: m }),
                reset: function() {
                  var e4;
                  l.reset.call(this);
                  var t4 = this.cfg, r4 = t4.iv, n3 = t4.mode;
                  this._xformMode == this._ENC_XFORM_MODE ? e4 = n3.createEncryptor : (e4 = n3.createDecryptor, this._minBufferSize = 1), this._mode && this._mode.__creator == e4 ? this._mode.init(this, r4 && r4.words) : (this._mode = e4.call(n3, this, r4 && r4.words), this._mode.__creator = e4);
                },
                _doProcessBlock: function(e4, t4) {
                  this._mode.processBlock(e4, t4);
                },
                _doFinalize: function() {
                  var e4, t4 = this.cfg.padding;
                  return this._xformMode == this._ENC_XFORM_MODE ? (t4.pad(this._data, this.blockSize), e4 = this._process(true)) : (e4 = this._process(true), t4.unpad(e4)), e4;
                },
                blockSize: 4
              }), r3.CipherParams = s.extend({
                init: function(e4) {
                  this.mixIn(e4);
                },
                toString: function(e4) {
                  return (e4 || this.formatter).stringify(this);
                }
              })), g = (t3.format = {}).OpenSSL = {
                stringify: function(e4) {
                  var t4 = e4.ciphertext, r4 = e4.salt;
                  return (r4 ? i.create([1398893684, 1701076831]).concat(r4).concat(t4) : t4).toString(c);
                },
                parse: function(e4) {
                  var t4, r4 = c.parse(e4), n3 = r4.words;
                  return 1398893684 == n3[0] && 1701076831 == n3[1] && (t4 = i.create(n3.slice(2, 4)), n3.splice(0, 4), r4.sigBytes -= 16), f.create({ ciphertext: r4, salt: t4 });
                }
              }, v = r3.SerializableCipher = s.extend({
                cfg: s.extend({ format: g }),
                encrypt: function(e4, t4, r4, n3) {
                  n3 = this.cfg.extend(n3);
                  var s2 = e4.createEncryptor(r4, n3), i2 = s2.finalize(t4), a2 = s2.cfg;
                  return f.create({
                    ciphertext: i2,
                    key: r4,
                    iv: a2.iv,
                    algorithm: e4,
                    mode: a2.mode,
                    padding: a2.padding,
                    blockSize: e4.blockSize,
                    formatter: n3.format
                  });
                },
                decrypt: function(e4, t4, r4, n3) {
                  return n3 = this.cfg.extend(n3), t4 = this._parse(t4, n3.format), e4.createDecryptor(r4, n3).finalize(t4.ciphertext);
                },
                _parse: function(e4, t4) {
                  return "string" == typeof e4 ? t4.parse(e4, this) : e4;
                }
              }), _ = (t3.kdf = {}).OpenSSL = {
                execute: function(e4, t4, r4, n3, s2) {
                  if (n3 || (n3 = i.random(8)), s2)
                    a2 = d.create({ keySize: t4 + r4, hasher: s2 }).compute(e4, n3);
                  else var a2 = d.create({ keySize: t4 + r4 }).compute(e4, n3);
                  var o2 = i.create(a2.words.slice(t4), 4 * r4);
                  return a2.sigBytes = 4 * t4, f.create({ key: a2, iv: o2, salt: n3 });
                }
              }, y = r3.PasswordBasedCipher = v.extend({
                cfg: v.cfg.extend({ kdf: _ }),
                encrypt: function(e4, t4, r4, n3) {
                  var s2 = (n3 = this.cfg.extend(n3)).kdf.execute(
                    r4,
                    e4.keySize,
                    e4.ivSize,
                    n3.salt,
                    n3.hasher
                  );
                  n3.iv = s2.iv;
                  var i2 = v.encrypt.call(this, e4, t4, s2.key, n3);
                  return i2.mixIn(s2), i2;
                },
                decrypt: function(e4, t4, r4, n3) {
                  n3 = this.cfg.extend(n3), t4 = this._parse(t4, n3.format);
                  var s2 = n3.kdf.execute(
                    r4,
                    e4.keySize,
                    e4.ivSize,
                    t4.salt,
                    n3.hasher
                  );
                  return n3.iv = s2.iv, v.decrypt.call(this, e4, t4, s2.key, n3);
                }
              });
            }()));
          },
          7193: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = n2, t3 = e3.lib.StreamCipher, r3 = e3.algo, s = r3.RC4 = t3.extend({
                _doReset: function() {
                  for (var e4 = this._key, t4 = e4.words, r4 = e4.sigBytes, n3 = this._S = [], s2 = 0; s2 < 256; s2++)
                    n3[s2] = s2;
                  s2 = 0;
                  for (var i2 = 0; s2 < 256; s2++) {
                    var a2 = s2 % r4, o = t4[a2 >>> 2] >>> 24 - a2 % 4 * 8 & 255;
                    i2 = (i2 + n3[s2] + o) % 256;
                    var c = n3[s2];
                    n3[s2] = n3[i2], n3[i2] = c;
                  }
                  this._i = this._j = 0;
                },
                _doProcessBlock: function(e4, t4) {
                  e4[t4] ^= i.call(this);
                },
                keySize: 8,
                ivSize: 0
              });
              function i() {
                for (var e4 = this._S, t4 = this._i, r4 = this._j, n3 = 0, s2 = 0; s2 < 4; s2++) {
                  r4 = (r4 + e4[t4 = (t4 + 1) % 256]) % 256;
                  var i2 = e4[t4];
                  e4[t4] = e4[r4], e4[r4] = i2, n3 |= e4[(e4[t4] + e4[r4]) % 256] << 24 - 8 * s2;
                }
                return this._i = t4, this._j = r4, n3;
              }
              e3.RC4 = t3._createHelper(s);
              var a = r3.RC4Drop = s.extend({
                cfg: s.cfg.extend({ drop: 192 }),
                _doReset: function() {
                  s._doReset.call(this);
                  for (var e4 = this.cfg.drop; e4 > 0; e4--) i.call(this);
                }
              });
              e3.RC4Drop = t3._createHelper(a);
            }(), n2.RC4);
          },
          7232: function(e2, t2, r2) {
            var n2;
            !function(s, i) {
              "use strict";
              var a = "function", o = "undefined", c = "object", d = "string", l = "major", u = "model", p = "name", h = "type", m = "vendor", f = "version", g = "architecture", v = "console", _ = "mobile", y = "tablet", b = "smarttv", w = "wearable", S = "embedded", R = "Amazon", k = "Apple", E = "ASUS", C = "BlackBerry", T = "Browser", P = "Chrome", O = "Firefox", x = "Google", D = "Huawei", I = "LG", A = "Microsoft", M = "Motorola", L = "Opera", N = "Samsung", j = "Sharp", B = "Sony", F = "Xiaomi", U = "Zebra", W = "Facebook", q = "Chromium OS", V = "Mac OS", H = " Browser", z = function(e3) {
                for (var t3 = {}, r3 = 0; r3 < e3.length; r3++)
                  t3[e3[r3].toUpperCase()] = e3[r3];
                return t3;
              }, G = function(e3, t3) {
                return typeof e3 === d && -1 !== K(t3).indexOf(K(e3));
              }, K = function(e3) {
                return e3.toLowerCase();
              }, $ = function(e3, t3) {
                if (typeof e3 === d)
                  return e3 = e3.replace(/^\s\s*/, ""), typeof t3 === o ? e3 : e3.substring(0, 500);
              }, J = function(e3, t3) {
                for (var r3, n3, s2, o2, d2, l2, u2 = 0; u2 < t3.length && !d2; ) {
                  var p2 = t3[u2], h2 = t3[u2 + 1];
                  for (r3 = n3 = 0; r3 < p2.length && !d2 && p2[r3]; )
                    if (d2 = p2[r3++].exec(e3))
                      for (s2 = 0; s2 < h2.length; s2++)
                        l2 = d2[++n3], typeof (o2 = h2[s2]) === c && o2.length > 0 ? 2 === o2.length ? typeof o2[1] == a ? this[o2[0]] = o2[1].call(this, l2) : this[o2[0]] = o2[1] : 3 === o2.length ? typeof o2[1] !== a || o2[1].exec && o2[1].test ? this[o2[0]] = l2 ? l2.replace(o2[1], o2[2]) : i : this[o2[0]] = l2 ? o2[1].call(this, l2, o2[2]) : i : 4 === o2.length && (this[o2[0]] = l2 ? o2[3].call(this, l2.replace(o2[1], o2[2])) : i) : this[o2] = l2 || i;
                  u2 += 2;
                }
              }, Q = function(e3, t3) {
                for (var r3 in t3)
                  if (typeof t3[r3] === c && t3[r3].length > 0) {
                    for (var n3 = 0; n3 < t3[r3].length; n3++)
                      if (G(t3[r3][n3], e3)) return "?" === r3 ? i : r3;
                  } else if (G(t3[r3], e3)) return "?" === r3 ? i : r3;
                return t3.hasOwnProperty("*") ? t3["*"] : e3;
              }, Y = {
                ME: "4.90",
                "NT 3.11": "NT3.51",
                "NT 4.0": "NT4.0",
                2e3: "NT 5.0",
                XP: ["NT 5.1", "NT 5.2"],
                Vista: "NT 6.0",
                7: "NT 6.1",
                8: "NT 6.2",
                8.1: "NT 6.3",
                10: ["NT 6.4", "NT 10.0"],
                RT: "ARM"
              }, X = {
                browser: [
                  [/\b(?:crmo|crios)\/([\w\.]+)/i],
                  [f, [p, "Chrome"]],
                  [/edg(?:e|ios|a)?\/([\w\.]+)/i],
                  [f, [p, "Edge"]],
                  [
                    /(opera mini)\/([-\w\.]+)/i,
                    /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
                    /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
                  ],
                  [p, f],
                  [/opios[\/ ]+([\w\.]+)/i],
                  [f, [p, L + " Mini"]],
                  [/\bop(?:rg)?x\/([\w\.]+)/i],
                  [f, [p, L + " GX"]],
                  [/\bopr\/([\w\.]+)/i],
                  [f, [p, L]],
                  [/\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i],
                  [f, [p, "Baidu"]],
                  [/\b(?:mxbrowser|mxios|myie2)\/?([-\w\.]*)\b/i],
                  [f, [p, "Maxthon"]],
                  [
                    /(kindle)\/([\w\.]+)/i,
                    /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\/ ]?([\w\.]*)/i,
                    /(avant|iemobile|slim(?:browser|boat|jet))[\/ ]?([\d\.]*)/i,
                    /(?:ms|\()(ie) ([\w\.]+)/i,
                    /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon)\/([-\w\.]+)/i,
                    /(heytap|ovi|115)browser\/([\d\.]+)/i,
                    /(weibo)__([\d\.]+)/i
                  ],
                  [p, f],
                  [/quark(?:pc)?\/([-\w\.]+)/i],
                  [f, [p, "Quark"]],
                  [/\bddg\/([\w\.]+)/i],
                  [f, [p, "DuckDuckGo"]],
                  [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],
                  [f, [p, "UC" + T]],
                  [
                    /microm.+\bqbcore\/([\w\.]+)/i,
                    /\bqbcore\/([\w\.]+).+microm/i,
                    /micromessenger\/([\w\.]+)/i
                  ],
                  [f, [p, "WeChat"]],
                  [/konqueror\/([\w\.]+)/i],
                  [f, [p, "Konqueror"]],
                  [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],
                  [f, [p, "IE"]],
                  [/ya(?:search)?browser\/([\w\.]+)/i],
                  [f, [p, "Yandex"]],
                  [/slbrowser\/([\w\.]+)/i],
                  [f, [p, "Smart Lenovo " + T]],
                  [/(avast|avg)\/([\w\.]+)/i],
                  [[p, /(.+)/, "$1 Secure " + T], f],
                  [/\bfocus\/([\w\.]+)/i],
                  [f, [p, O + " Focus"]],
                  [/\bopt\/([\w\.]+)/i],
                  [f, [p, L + " Touch"]],
                  [/coc_coc\w+\/([\w\.]+)/i],
                  [f, [p, "Coc Coc"]],
                  [/dolfin\/([\w\.]+)/i],
                  [f, [p, "Dolphin"]],
                  [/coast\/([\w\.]+)/i],
                  [f, [p, L + " Coast"]],
                  [/miuibrowser\/([\w\.]+)/i],
                  [f, [p, "MIUI" + H]],
                  [/fxios\/([\w\.-]+)/i],
                  [f, [p, O]],
                  [/\bqihoobrowser\/?([\w\.]*)/i],
                  [f, [p, "360"]],
                  [/\b(qq)\/([\w\.]+)/i],
                  [[p, /(.+)/, "$1Browser"], f],
                  [/(oculus|sailfish|huawei|vivo|pico)browser\/([\w\.]+)/i],
                  [[p, /(.+)/, "$1" + H], f],
                  [/samsungbrowser\/([\w\.]+)/i],
                  [f, [p, N + " Internet"]],
                  [/metasr[\/ ]?([\d\.]+)/i],
                  [f, [p, "Sogou Explorer"]],
                  [/(sogou)mo\w+\/([\d\.]+)/i],
                  [[p, "Sogou Mobile"], f],
                  [
                    /(electron)\/([\w\.]+) safari/i,
                    /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
                    /m?(qqbrowser|2345(?=browser|chrome|explorer))\w*[\/ ]?v?([\w\.]+)/i
                  ],
                  [p, f],
                  [/(lbbrowser|rekonq)/i, /\[(linkedin)app\]/i],
                  [p],
                  [
                    /ome\/([\w\.]+) \w* ?(iron) saf/i,
                    /ome\/([\w\.]+).+qihu (360)[es]e/i
                  ],
                  [f, p],
                  [
                    /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i
                  ],
                  [[p, W], f],
                  [
                    /(Klarna)\/([\w\.]+)/i,
                    /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
                    /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
                    /safari (line)\/([\w\.]+)/i,
                    /\b(line)\/([\w\.]+)\/iab/i,
                    /(alipay)client\/([\w\.]+)/i,
                    /(twitter)(?:and| f.+e\/([\w\.]+))/i,
                    /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i
                  ],
                  [p, f],
                  [/\bgsa\/([\w\.]+) .*safari\//i],
                  [f, [p, "GSA"]],
                  [/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],
                  [f, [p, "TikTok"]],
                  [/headlesschrome(?:\/([\w\.]+)| )/i],
                  [f, [p, P + " Headless"]],
                  [/ wv\).+(chrome)\/([\w\.]+)/i],
                  [[p, P + " WebView"], f],
                  [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],
                  [f, [p, "Android " + T]],
                  [
                    /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i
                  ],
                  [p, f],
                  [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],
                  [f, [p, "Mobile Safari"]],
                  [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],
                  [f, p],
                  [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],
                  [
                    p,
                    [
                      f,
                      Q,
                      {
                        "1.0": "/8",
                        1.2: "/1",
                        1.3: "/3",
                        "2.0": "/412",
                        "2.0.2": "/416",
                        "2.0.3": "/417",
                        "2.0.4": "/419",
                        "?": "/"
                      }
                    ]
                  ],
                  [/(webkit|khtml)\/([\w\.]+)/i],
                  [p, f],
                  [/(navigator|netscape\d?)\/([-\w\.]+)/i],
                  [[p, "Netscape"], f],
                  [/(wolvic|librewolf)\/([\w\.]+)/i],
                  [p, f],
                  [/mobile vr; rv:([\w\.]+)\).+firefox/i],
                  [f, [p, O + " Reality"]],
                  [
                    /ekiohf.+(flow)\/([\w\.]+)/i,
                    /(swiftfox)/i,
                    /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\/ ]?([\w\.\+]+)/i,
                    /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                    /(firefox)\/([\w\.]+)/i,
                    /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
                    /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                    /(links) \(([\w\.]+)/i
                  ],
                  [p, [f, /_/g, "."]],
                  [/(cobalt)\/([\w\.]+)/i],
                  [p, [f, /master.|lts./, ""]]
                ],
                cpu: [
                  [/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],
                  [[g, "amd64"]],
                  [/(ia32(?=;))/i],
                  [[g, K]],
                  [/((?:i[346]|x)86)[;\)]/i],
                  [[g, "ia32"]],
                  [/\b(aarch64|arm(v?8e?l?|_?64))\b/i],
                  [[g, "arm64"]],
                  [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],
                  [[g, "armhf"]],
                  [/windows (ce|mobile); ppc;/i],
                  [[g, "arm"]],
                  [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],
                  [[g, /ower/, "", K]],
                  [/(sun4\w)[;\)]/i],
                  [[g, "sparc"]],
                  [
                    /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                  ],
                  [[g, K]]
                ],
                device: [
                  [
                    /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
                  ],
                  [u, [m, N], [h, y]],
                  [
                    /\b((?:s[cgp]h|gt|sm)-(?![lr])\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
                    /samsung[- ]((?!sm-[lr])[-\w]+)/i,
                    /sec-(sgh\w+)/i
                  ],
                  [u, [m, N], [h, _]],
                  [/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],
                  [u, [m, k], [h, _]],
                  [
                    /\((ipad);[-\w\),; ]+apple/i,
                    /applecoremedia\/[\w\.]+ \((ipad)/i,
                    /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
                  ],
                  [u, [m, k], [h, y]],
                  [/(macintosh);/i],
                  [u, [m, k]],
                  [/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],
                  [u, [m, j], [h, _]],
                  [/(?:honor)([-\w ]+)[;\)]/i],
                  [u, [m, "Honor"], [h, _]],
                  [
                    /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
                  ],
                  [u, [m, D], [h, y]],
                  [
                    /(?:huawei)([-\w ]+)[;\)]/i,
                    /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
                  ],
                  [u, [m, D], [h, _]],
                  [
                    /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
                    /\b; (\w+) build\/hm\1/i,
                    /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
                    /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
                    /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
                    /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\))/i
                  ],
                  [
                    [u, /_/g, " "],
                    [m, F],
                    [h, _]
                  ],
                  [
                    /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
                    /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i
                  ],
                  [
                    [u, /_/g, " "],
                    [m, F],
                    [h, y]
                  ],
                  [
                    /; (\w+) bui.+ oppo/i,
                    /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
                  ],
                  [u, [m, "OPPO"], [h, _]],
                  [/\b(opd2\d{3}a?) bui/i],
                  [u, [m, "OPPO"], [h, y]],
                  [
                    /vivo (\w+)(?: bui|\))/i,
                    /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
                  ],
                  [u, [m, "Vivo"], [h, _]],
                  [/\b(rmx[1-3]\d{3})(?: bui|;|\))/i],
                  [u, [m, "Realme"], [h, _]],
                  [
                    /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                    /\bmot(?:orola)?[- ](\w*)/i,
                    /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
                  ],
                  [u, [m, M], [h, _]],
                  [/\b(mz60\d|xoom[2 ]{0,2}) build\//i],
                  [u, [m, M], [h, y]],
                  [
                    /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
                  ],
                  [u, [m, I], [h, y]],
                  [
                    /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                    /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                    /\blg-?([\d\w]+) bui/i
                  ],
                  [u, [m, I], [h, _]],
                  [
                    /(ideatab[-\w ]+)/i,
                    /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
                  ],
                  [u, [m, "Lenovo"], [h, y]],
                  [
                    /(?:maemo|nokia).*(n900|lumia \d+)/i,
                    /nokia[-_ ]?([-\w\.]*)/i
                  ],
                  [
                    [u, /_/g, " "],
                    [m, "Nokia"],
                    [h, _]
                  ],
                  [/(pixel c)\b/i],
                  [u, [m, x], [h, y]],
                  [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],
                  [u, [m, x], [h, _]],
                  [
                    /droid.+; (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
                  ],
                  [u, [m, B], [h, _]],
                  [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i],
                  [
                    [u, "Xperia Tablet"],
                    [m, B],
                    [h, y]
                  ],
                  [
                    / (kb2005|in20[12]5|be20[12][59])\b/i,
                    /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
                  ],
                  [u, [m, "OnePlus"], [h, _]],
                  [
                    /(alexa)webm/i,
                    /(kf[a-z]{2}wi|aeo(?!bc)\w\w)( bui|\))/i,
                    /(kf[a-z]+)( bui|\)).+silk\//i
                  ],
                  [u, [m, R], [h, y]],
                  [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],
                  [
                    [u, /(.+)/g, "Fire Phone $1"],
                    [m, R],
                    [h, _]
                  ],
                  [/(playbook);[-\w\),; ]+(rim)/i],
                  [u, m, [h, y]],
                  [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i],
                  [u, [m, C], [h, _]],
                  [
                    /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
                  ],
                  [u, [m, E], [h, y]],
                  [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],
                  [u, [m, E], [h, _]],
                  [/(nexus 9)/i],
                  [u, [m, "HTC"], [h, y]],
                  [
                    /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
                    /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                    /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i
                  ],
                  [m, [u, /_/g, " "], [h, _]],
                  [
                    /droid [\w\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\w*(\)| bui)/i
                  ],
                  [u, [m, "TCL"], [h, y]],
                  [/(itel) ((\w+))/i],
                  [
                    [m, K],
                    u,
                    [h, Q, { tablet: ["p10001l", "w7001"], "*": "mobile" }]
                  ],
                  [/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],
                  [u, [m, "Acer"], [h, y]],
                  [/droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i],
                  [u, [m, "Meizu"], [h, _]],
                  [/; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i],
                  [u, [m, "Ulefone"], [h, _]],
                  [
                    /; (energy ?\w+)(?: bui|\))/i,
                    /; energizer ([\w ]+)(?: bui|\))/i
                  ],
                  [u, [m, "Energizer"], [h, _]],
                  [
                    /; cat (b35);/i,
                    /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\))/i
                  ],
                  [u, [m, "Cat"], [h, _]],
                  [/((?:new )?andromax[\w- ]+)(?: bui|\))/i],
                  [u, [m, "Smartfren"], [h, _]],
                  [/droid.+; (a(?:015|06[35]|142p?))/i],
                  [u, [m, "Nothing"], [h, _]],
                  [
                    /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\w]*)/i,
                    /; (imo) ((?!tab)[\w ]+?)(?: bui|\))/i,
                    /(hp) ([\w ]+\w)/i,
                    /(asus)-?(\w+)/i,
                    /(microsoft); (lumia[\w ]+)/i,
                    /(lenovo)[-_ ]?([-\w]+)/i,
                    /(jolla)/i,
                    /(oppo) ?([\w ]+) bui/i
                  ],
                  [m, u, [h, _]],
                  [
                    /(imo) (tab \w+)/i,
                    /(kobo)\s(ereader|touch)/i,
                    /(archos) (gamepad2?)/i,
                    /(hp).+(touchpad(?!.+tablet)|tablet)/i,
                    /(kindle)\/([\w\.]+)/i,
                    /(nook)[\w ]+build\/(\w+)/i,
                    /(dell) (strea[kpr\d ]*[\dko])/i,
                    /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
                    /(trinity)[- ]*(t\d{3}) bui/i,
                    /(gigaset)[- ]+(q\w{1,9}) bui/i,
                    /(vodafone) ([\w ]+)(?:\)| bui)/i
                  ],
                  [m, u, [h, y]],
                  [/(surface duo)/i],
                  [u, [m, A], [h, y]],
                  [/droid [\d\.]+; (fp\du?)(?: b|\))/i],
                  [u, [m, "Fairphone"], [h, _]],
                  [/(u304aa)/i],
                  [u, [m, "AT&T"], [h, _]],
                  [/\bsie-(\w*)/i],
                  [u, [m, "Siemens"], [h, _]],
                  [/\b(rct\w+) b/i],
                  [u, [m, "RCA"], [h, y]],
                  [/\b(venue[\d ]{2,7}) b/i],
                  [u, [m, "Dell"], [h, y]],
                  [/\b(q(?:mv|ta)\w+) b/i],
                  [u, [m, "Verizon"], [h, y]],
                  [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],
                  [u, [m, "Barnes & Noble"], [h, y]],
                  [/\b(tm\d{3}\w+) b/i],
                  [u, [m, "NuVision"], [h, y]],
                  [/\b(k88) b/i],
                  [u, [m, "ZTE"], [h, y]],
                  [/\b(nx\d{3}j) b/i],
                  [u, [m, "ZTE"], [h, _]],
                  [/\b(gen\d{3}) b.+49h/i],
                  [u, [m, "Swiss"], [h, _]],
                  [/\b(zur\d{3}) b/i],
                  [u, [m, "Swiss"], [h, y]],
                  [/\b((zeki)?tb.*\b) b/i],
                  [u, [m, "Zeki"], [h, y]],
                  [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i],
                  [[m, "Dragon Touch"], u, [h, y]],
                  [/\b(ns-?\w{0,9}) b/i],
                  [u, [m, "Insignia"], [h, y]],
                  [/\b((nxa|next)-?\w{0,9}) b/i],
                  [u, [m, "NextBook"], [h, y]],
                  [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],
                  [[m, "Voice"], u, [h, _]],
                  [/\b(lvtel\-)?(v1[12]) b/i],
                  [[m, "LvTel"], u, [h, _]],
                  [/\b(ph-1) /i],
                  [u, [m, "Essential"], [h, _]],
                  [/\b(v(100md|700na|7011|917g).*\b) b/i],
                  [u, [m, "Envizen"], [h, y]],
                  [/\b(trio[-\w\. ]+) b/i],
                  [u, [m, "MachSpeed"], [h, y]],
                  [/\btu_(1491) b/i],
                  [u, [m, "Rotor"], [h, y]],
                  [/(shield[\w ]+) b/i],
                  [u, [m, "Nvidia"], [h, y]],
                  [/(sprint) (\w+)/i],
                  [m, u, [h, _]],
                  [/(kin\.[onetw]{3})/i],
                  [
                    [u, /\./g, " "],
                    [m, A],
                    [h, _]
                  ],
                  [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],
                  [u, [m, U], [h, y]],
                  [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],
                  [u, [m, U], [h, _]],
                  [/smart-tv.+(samsung)/i],
                  [m, [h, b]],
                  [/hbbtv.+maple;(\d+)/i],
                  [
                    [u, /^/, "SmartTV"],
                    [m, N],
                    [h, b]
                  ],
                  [
                    /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i
                  ],
                  [
                    [m, I],
                    [h, b]
                  ],
                  [/(apple) ?tv/i],
                  [m, [u, k + " TV"], [h, b]],
                  [/crkey/i],
                  [
                    [u, P + "cast"],
                    [m, x],
                    [h, b]
                  ],
                  [/droid.+aft(\w+)( bui|\))/i],
                  [u, [m, R], [h, b]],
                  [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i],
                  [u, [m, j], [h, b]],
                  [/(bravia[\w ]+)( bui|\))/i],
                  [u, [m, B], [h, b]],
                  [/(mitv-\w{5}) bui/i],
                  [u, [m, F], [h, b]],
                  [/Hbbtv.*(technisat) (.*);/i],
                  [m, u, [h, b]],
                  [
                    /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
                    /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i
                  ],
                  [
                    [m, $],
                    [u, $],
                    [h, b]
                  ],
                  [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],
                  [[h, b]],
                  [/(ouya)/i, /(nintendo) ([wids3utch]+)/i],
                  [m, u, [h, v]],
                  [/droid.+; (shield) bui/i],
                  [u, [m, "Nvidia"], [h, v]],
                  [/(playstation [345portablevi]+)/i],
                  [u, [m, B], [h, v]],
                  [/\b(xbox(?: one)?(?!; xbox))[\); ]/i],
                  [u, [m, A], [h, v]],
                  [/\b(sm-[lr]\d\d[05][fnuw]?s?)\b/i],
                  [u, [m, N], [h, w]],
                  [/((pebble))app/i],
                  [m, u, [h, w]],
                  [/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],
                  [u, [m, k], [h, w]],
                  [/droid.+; (glass) \d/i],
                  [u, [m, x], [h, w]],
                  [/droid.+; (wt63?0{2,3})\)/i],
                  [u, [m, U], [h, w]],
                  [/droid.+; (glass) \d/i],
                  [u, [m, x], [h, w]],
                  [/(pico) (4|neo3(?: link|pro)?)/i],
                  [m, u, [h, w]],
                  [/; (quest( \d| pro)?)/i],
                  [u, [m, W], [h, w]],
                  [/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],
                  [m, [h, S]],
                  [/(aeobc)\b/i],
                  [u, [m, R], [h, S]],
                  [
                    /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i
                  ],
                  [u, [h, _]],
                  [
                    /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i
                  ],
                  [u, [h, y]],
                  [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],
                  [[h, y]],
                  [
                    /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i
                  ],
                  [[h, _]],
                  [/(android[-\w\. ]{0,9});.+buil/i],
                  [u, [m, "Generic"]]
                ],
                engine: [
                  [/windows.+ edge\/([\w\.]+)/i],
                  [f, [p, "EdgeHTML"]],
                  [/(arkweb)\/([\w\.]+)/i],
                  [p, f],
                  [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],
                  [f, [p, "Blink"]],
                  [
                    /(presto)\/([\w\.]+)/i,
                    /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\/([\w\.]+)/i,
                    /ekioh(flow)\/([\w\.]+)/i,
                    /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
                    /(icab)[\/ ]([23]\.[\d\.]+)/i,
                    /\b(libweb)/i
                  ],
                  [p, f],
                  [/rv\:([\w\.]{1,9})\b.+(gecko)/i],
                  [f, p]
                ],
                os: [
                  [/microsoft (windows) (vista|xp)/i],
                  [p, f],
                  [/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i],
                  [p, [f, Q, Y]],
                  [
                    /windows nt 6\.2; (arm)/i,
                    /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
                    /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i
                  ],
                  [
                    [f, Q, Y],
                    [p, "Windows"]
                  ],
                  [
                    /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
                    /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
                    /cfnetwork\/.+darwin/i
                  ],
                  [
                    [f, /_/g, "."],
                    [p, "iOS"]
                  ],
                  [
                    /(mac os x) ?([\w\. ]*)/i,
                    /(macintosh|mac_powerpc\b)(?!.+haiku)/i
                  ],
                  [
                    [p, V],
                    [f, /_/g, "."]
                  ],
                  [/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],
                  [f, p],
                  [
                    /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish|openharmony)[-\/ ]?([\w\.]*)/i,
                    /(blackberry)\w*\/([\w\.]*)/i,
                    /(tizen|kaios)[\/ ]([\w\.]+)/i,
                    /\((series40);/i
                  ],
                  [p, f],
                  [/\(bb(10);/i],
                  [f, [p, C]],
                  [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],
                  [f, [p, "Symbian"]],
                  [
                    /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i
                  ],
                  [f, [p, O + " OS"]],
                  [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],
                  [f, [p, "webOS"]],
                  [/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],
                  [f, [p, "watchOS"]],
                  [/crkey\/([\d\.]+)/i],
                  [f, [p, P + "cast"]],
                  [/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],
                  [[p, q], f],
                  [
                    /panasonic;(viera)/i,
                    /(netrange)mmh/i,
                    /(nettv)\/(\d+\.[\w\.]+)/i,
                    /(nintendo|playstation) ([wids345portablevuch]+)/i,
                    /(xbox); +xbox ([^\);]+)/i,
                    /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
                    /(mint)[\/\(\) ]?(\w*)/i,
                    /(mageia|vectorlinux)[; ]/i,
                    /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                    /(hurd|linux) ?([\w\.]*)/i,
                    /(gnu) ?([\w\.]*)/i,
                    /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
                    /(haiku) (\w+)/i
                  ],
                  [p, f],
                  [/(sunos) ?([\w\.\d]*)/i],
                  [[p, "Solaris"], f],
                  [
                    /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
                    /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
                    /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
                    /(unix) ?([\w\.]*)/i
                  ],
                  [p, f]
                ]
              }, Z = function(e3, t3) {
                if (typeof e3 === c && (t3 = e3, e3 = i), !(this instanceof Z))
                  return new Z(e3, t3).getResult();
                var r3 = typeof s !== o && s.navigator ? s.navigator : i, n3 = e3 || (r3 && r3.userAgent ? r3.userAgent : ""), v2 = r3 && r3.userAgentData ? r3.userAgentData : i, b2 = t3 ? function(e4, t4) {
                  var r4 = {};
                  for (var n4 in e4)
                    t4[n4] && t4[n4].length % 2 == 0 ? r4[n4] = t4[n4].concat(e4[n4]) : r4[n4] = e4[n4];
                  return r4;
                }(X, t3) : X, w2 = r3 && r3.userAgent == n3;
                return this.getBrowser = function() {
                  var e4, t4 = {};
                  return t4[p] = i, t4[f] = i, J.call(t4, n3, b2.browser), t4[l] = typeof (e4 = t4[f]) === d ? e4.replace(/[^\d\.]/g, "").split(".")[0] : i, w2 && r3 && r3.brave && typeof r3.brave.isBrave == a && (t4[p] = "Brave"), t4;
                }, this.getCPU = function() {
                  var e4 = {};
                  return e4[g] = i, J.call(e4, n3, b2.cpu), e4;
                }, this.getDevice = function() {
                  var e4 = {};
                  return e4[m] = i, e4[u] = i, e4[h] = i, J.call(e4, n3, b2.device), w2 && !e4[h] && v2 && v2.mobile && (e4[h] = _), w2 && "Macintosh" == e4[u] && r3 && typeof r3.standalone !== o && r3.maxTouchPoints && r3.maxTouchPoints > 2 && (e4[u] = "iPad", e4[h] = y), e4;
                }, this.getEngine = function() {
                  var e4 = {};
                  return e4[p] = i, e4[f] = i, J.call(e4, n3, b2.engine), e4;
                }, this.getOS = function() {
                  var e4 = {};
                  return e4[p] = i, e4[f] = i, J.call(e4, n3, b2.os), w2 && !e4[p] && v2 && v2.platform && "Unknown" != v2.platform && (e4[p] = v2.platform.replace(/chrome os/i, q).replace(/macos/i, V)), e4;
                }, this.getResult = function() {
                  return {
                    ua: this.getUA(),
                    browser: this.getBrowser(),
                    engine: this.getEngine(),
                    os: this.getOS(),
                    device: this.getDevice(),
                    cpu: this.getCPU()
                  };
                }, this.getUA = function() {
                  return n3;
                }, this.setUA = function(e4) {
                  return n3 = typeof e4 === d && e4.length > 500 ? $(e4, 500) : e4, this;
                }, this.setUA(n3), this;
              };
              Z.VERSION = "1.0.40", Z.BROWSER = z([p, f, l]), Z.CPU = z([g]), Z.DEVICE = z([u, m, h, v, _, b, y, w, S]), Z.ENGINE = Z.OS = z([p, f]), typeof t2 !== o ? (e2.exports && (t2 = e2.exports = Z), t2.UAParser = Z) : r2.amdO ? (n2 = (function() {
                return Z;
              }).call(t2, r2, t2, e2)) === i || (e2.exports = n2) : typeof s !== o && (s.UAParser = Z);
              var ee = typeof s !== o && (s.jQuery || s.Zepto);
              if (ee && !ee.ua) {
                var te = new Z();
                ee.ua = te.getResult(), ee.ua.get = function() {
                  return te.getUA();
                }, ee.ua.set = function(e3) {
                  te.setUA(e3);
                  var t3 = te.getResult();
                  for (var r3 in t3) ee.ua[r3] = t3[r3];
                };
              }
            }("object" == typeof window ? window : this);
          },
          7363: (e2, t2, r2) => {
            var n2 = r2(5020), s = r2(3804), i = r2(5602);
            t2.grammar = i, t2.write = s, t2.parse = n2.parse, t2.parseParams = n2.parseParams, t2.parseFmtpConfig = n2.parseFmtpConfig, t2.parsePayloads = n2.parsePayloads, t2.parseRemoteCandidates = n2.parseRemoteCandidates, t2.parseImageAttributes = n2.parseImageAttributes, t2.parseSimulcastStreamList = n2.parseSimulcastStreamList;
          },
          7402: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome55 = void 0;
            const a = i(r2(7363)), o = r2(2994), c = r2(4893), d = i(r2(1765)), l = i(r2(8046)), u = i(r2(5544)), p = i(r2(4496)), h = r2(521), m = r2(1305), f = new o.Logger("Chrome55"), g = { OS: 1024, MIS: 1024 };
            class v extends h.HandlerInterface {
              static createFactory() {
                return () => new v();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdTrack = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome55";
              }
              close() {
                if (f.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                f.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = a.parse(t3.sdp);
                  return u.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                f.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d2),
                  video: l.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d2),
                  video: l.getSendingRemoteRtpParameters("video", d2)
                }, n3.role && "auto" !== n3.role && (this._forcedLocalDtlsRole = "server" === n3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (f.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                f.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (f.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                this.assertSendDirection(), f.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), n3 && f.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addStream(this._sendStream);
                let s2, i2 = await this._pc.createOffer(), o2 = a.parse(i2.sdp);
                const c2 = d.clone(this._sendingRtpParametersByKind[e3.kind]);
                c2.codecs = l.reduceCodecs(c2.codecs);
                const h2 = d.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                if (h2.codecs = l.reduceCodecs(h2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: o2
                }), "video" === e3.kind && t3 && t3.length > 1 && (f.debug("send() | enabling simulcast"), o2 = a.parse(i2.sdp), s2 = o2.media.find((e4) => "video" === e4.type), p.addLegacySimulcast({
                  offerMediaObject: s2,
                  track: e3,
                  numStreams: t3.length
                }), i2 = { type: "offer", sdp: a.write(o2) }), f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  i2
                ), await this._pc.setLocalDescription(i2), o2 = a.parse(this._pc.localDescription.sdp), s2 = o2.media.find((t4) => t4.type === e3.kind), c2.rtcp.cname = u.getCname({ offerMediaObject: s2 }), c2.encodings = p.getRtpEncodings({
                  offerMediaObject: s2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < c2.encodings.length; ++e4)
                    t3[e4] && Object.assign(c2.encodings[e4], t3[e4]);
                if (c2.encodings.length > 1 && "video/vp8" === c2.codecs[0].mimeType.toLowerCase())
                  for (const e4 of c2.encodings) e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: s2,
                  offerRtpParameters: c2,
                  answerRtpParameters: h2,
                  codecOptions: r3
                });
                const m2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  m2
                ), await this._pc.setRemoteDescription(m2);
                const g2 = String(this._nextSendLocalId);
                return this._nextSendLocalId++, this._mapSendLocalIdTrack.set(g2, e3), { localId: g2, rtpParameters: c2 };
              }
              async stopSending(e3) {
                this.assertSendDirection(), f.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapSendLocalIdTrack.get(e3);
                if (!t3) throw new Error("track not found");
                this._mapSendLocalIdTrack.delete(e3), this._sendStream.removeTrack(t3), this._pc.addStream(this._sendStream);
                const r3 = await this._pc.createOffer();
                f.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void f.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState) return;
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async setMaxSpatialLayer(e3, t3) {
                throw new c.UnsupportedError(" not implemented");
              }
              async setRtpEncodingParameters(e3, t3) {
                throw new c.UnsupportedError("not supported");
              }
              async getSenderStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                f.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [];
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: n4,
                    streamId: s3
                  } = t4;
                  f.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const i2 = r4;
                  this._remoteSdp.receive({
                    mid: i2,
                    kind: r4,
                    offerRtpParameters: n4,
                    streamId: s3 || n4.rtcp.cname,
                    trackId: e4
                  });
                }
                const r3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  r3
                ), await this._pc.setRemoteDescription(r3);
                let n3 = await this._pc.createAnswer();
                const s2 = a.parse(n3.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, n4 = e4, i2 = s2.media.find((e5) => String(e5.mid) === n4);
                  u.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: i2
                  });
                }
                n3 = { type: "answer", sdp: a.write(s2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: s2
                }), f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n3
                ), await this._pc.setLocalDescription(n3);
                for (const r4 of e3) {
                  const { kind: e4, trackId: n4, rtpParameters: s3 } = r4, i2 = e4, a2 = n4, o2 = r4.streamId || s3.rtcp.cname, c2 = this._pc.getRemoteStreams().find((e5) => e5.id === o2).getTrackById(a2);
                  if (!c2) throw new Error("remote track not found");
                  this._mapRecvLocalIdInfo.set(a2, { mid: i2, rtpParameters: s3 }), t3.push({ localId: a2, track: c2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  f.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                f.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmitTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                f.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = u.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome55 = v;
          },
          7504: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.DataProducer = void 0;
            const n2 = r2(2994), s = r2(2010), i = r2(4893), a = new n2.Logger("DataProducer");
            class o extends s.EnhancedEventEmitter {
              constructor({
                id: e3,
                dataChannel: t3,
                sctpStreamParameters: r3,
                appData: n3
              }) {
                super(), this._closed = false, this._observer = new s.EnhancedEventEmitter(), a.debug("constructor()"), this._id = e3, this._dataChannel = t3, this._sctpStreamParameters = r3, this._appData = n3 || {}, this.handleDataChannel();
              }
              get id() {
                return this._id;
              }
              get closed() {
                return this._closed;
              }
              get sctpStreamParameters() {
                return this._sctpStreamParameters;
              }
              get readyState() {
                return this._dataChannel.readyState;
              }
              get label() {
                return this._dataChannel.label;
              }
              get protocol() {
                return this._dataChannel.protocol;
              }
              get bufferedAmount() {
                return this._dataChannel.bufferedAmount;
              }
              get bufferedAmountLowThreshold() {
                return this._dataChannel.bufferedAmountLowThreshold;
              }
              set bufferedAmountLowThreshold(e3) {
                this._dataChannel.bufferedAmountLowThreshold = e3;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (a.debug("close()"), this._closed = true, this._dataChannel.close(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (a.debug("transportClosed()"), this._closed = true, this._dataChannel.close(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              send(e3) {
                if (a.debug("send()"), this._closed)
                  throw new i.InvalidStateError("closed");
                this._dataChannel.send(e3);
              }
              handleDataChannel() {
                this._dataChannel.addEventListener("open", () => {
                  this._closed || (a.debug('DataChannel "open" event'), this.safeEmit("open"));
                }), this._dataChannel.addEventListener("error", (e3) => {
                  if (this._closed) return;
                  let { error: t3 } = e3;
                  t3 || (t3 = new Error("unknown DataChannel error")), "sctp-failure" === t3.errorDetail ? a.error(
                    "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                    t3.sctpCauseCode,
                    t3.message
                  ) : a.error('DataChannel "error" event: %o', t3), this.safeEmit("error", t3);
                }), this._dataChannel.addEventListener("close", () => {
                  this._closed || (a.warn('DataChannel "close" event'), this._closed = true, this.emit("@close"), this.safeEmit("close"), this._observer.safeEmit("close"));
                }), this._dataChannel.addEventListener("message", () => {
                  this._closed || a.warn(
                    'DataChannel "message" event in a DataProducer, message discarded'
                  );
                }), this._dataChannel.addEventListener("bufferedamountlow", () => {
                  this._closed || this.safeEmit("bufferedamountlow");
                });
              }
            }
            t2.DataProducer = o;
          },
          7628: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = n2, t3 = e3.lib, r3 = t3.WordArray, s = t3.BlockCipher, i = e3.algo, a = [
                57,
                49,
                41,
                33,
                25,
                17,
                9,
                1,
                58,
                50,
                42,
                34,
                26,
                18,
                10,
                2,
                59,
                51,
                43,
                35,
                27,
                19,
                11,
                3,
                60,
                52,
                44,
                36,
                63,
                55,
                47,
                39,
                31,
                23,
                15,
                7,
                62,
                54,
                46,
                38,
                30,
                22,
                14,
                6,
                61,
                53,
                45,
                37,
                29,
                21,
                13,
                5,
                28,
                20,
                12,
                4
              ], o = [
                14,
                17,
                11,
                24,
                1,
                5,
                3,
                28,
                15,
                6,
                21,
                10,
                23,
                19,
                12,
                4,
                26,
                8,
                16,
                7,
                27,
                20,
                13,
                2,
                41,
                52,
                31,
                37,
                47,
                55,
                30,
                40,
                51,
                45,
                33,
                48,
                44,
                49,
                39,
                56,
                34,
                53,
                46,
                42,
                50,
                36,
                29,
                32
              ], c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28], d = [
                {
                  0: 8421888,
                  268435456: 32768,
                  536870912: 8421378,
                  805306368: 2,
                  1073741824: 512,
                  1342177280: 8421890,
                  1610612736: 8389122,
                  1879048192: 8388608,
                  2147483648: 514,
                  2415919104: 8389120,
                  2684354560: 33280,
                  2952790016: 8421376,
                  3221225472: 32770,
                  3489660928: 8388610,
                  3758096384: 0,
                  4026531840: 33282,
                  134217728: 0,
                  402653184: 8421890,
                  671088640: 33282,
                  939524096: 32768,
                  1207959552: 8421888,
                  1476395008: 512,
                  1744830464: 8421378,
                  2013265920: 2,
                  2281701376: 8389120,
                  2550136832: 33280,
                  2818572288: 8421376,
                  3087007744: 8389122,
                  3355443200: 8388610,
                  3623878656: 32770,
                  3892314112: 514,
                  4160749568: 8388608,
                  1: 32768,
                  268435457: 2,
                  536870913: 8421888,
                  805306369: 8388608,
                  1073741825: 8421378,
                  1342177281: 33280,
                  1610612737: 512,
                  1879048193: 8389122,
                  2147483649: 8421890,
                  2415919105: 8421376,
                  2684354561: 8388610,
                  2952790017: 33282,
                  3221225473: 514,
                  3489660929: 8389120,
                  3758096385: 32770,
                  4026531841: 0,
                  134217729: 8421890,
                  402653185: 8421376,
                  671088641: 8388608,
                  939524097: 512,
                  1207959553: 32768,
                  1476395009: 8388610,
                  1744830465: 2,
                  2013265921: 33282,
                  2281701377: 32770,
                  2550136833: 8389122,
                  2818572289: 514,
                  3087007745: 8421888,
                  3355443201: 8389120,
                  3623878657: 0,
                  3892314113: 33280,
                  4160749569: 8421378
                },
                {
                  0: 1074282512,
                  16777216: 16384,
                  33554432: 524288,
                  50331648: 1074266128,
                  67108864: 1073741840,
                  83886080: 1074282496,
                  100663296: 1073758208,
                  117440512: 16,
                  134217728: 540672,
                  150994944: 1073758224,
                  167772160: 1073741824,
                  184549376: 540688,
                  201326592: 524304,
                  218103808: 0,
                  234881024: 16400,
                  251658240: 1074266112,
                  8388608: 1073758208,
                  25165824: 540688,
                  41943040: 16,
                  58720256: 1073758224,
                  75497472: 1074282512,
                  92274688: 1073741824,
                  109051904: 524288,
                  125829120: 1074266128,
                  142606336: 524304,
                  159383552: 0,
                  176160768: 16384,
                  192937984: 1074266112,
                  209715200: 1073741840,
                  226492416: 540672,
                  243269632: 1074282496,
                  260046848: 16400,
                  268435456: 0,
                  285212672: 1074266128,
                  301989888: 1073758224,
                  318767104: 1074282496,
                  335544320: 1074266112,
                  352321536: 16,
                  369098752: 540688,
                  385875968: 16384,
                  402653184: 16400,
                  419430400: 524288,
                  436207616: 524304,
                  452984832: 1073741840,
                  469762048: 540672,
                  486539264: 1073758208,
                  503316480: 1073741824,
                  520093696: 1074282512,
                  276824064: 540688,
                  293601280: 524288,
                  310378496: 1074266112,
                  327155712: 16384,
                  343932928: 1073758208,
                  360710144: 1074282512,
                  377487360: 16,
                  394264576: 1073741824,
                  411041792: 1074282496,
                  427819008: 1073741840,
                  444596224: 1073758224,
                  461373440: 524304,
                  478150656: 0,
                  494927872: 16400,
                  511705088: 1074266128,
                  528482304: 540672
                },
                {
                  0: 260,
                  1048576: 0,
                  2097152: 67109120,
                  3145728: 65796,
                  4194304: 65540,
                  5242880: 67108868,
                  6291456: 67174660,
                  7340032: 67174400,
                  8388608: 67108864,
                  9437184: 67174656,
                  10485760: 65792,
                  11534336: 67174404,
                  12582912: 67109124,
                  13631488: 65536,
                  14680064: 4,
                  15728640: 256,
                  524288: 67174656,
                  1572864: 67174404,
                  2621440: 0,
                  3670016: 67109120,
                  4718592: 67108868,
                  5767168: 65536,
                  6815744: 65540,
                  7864320: 260,
                  8912896: 4,
                  9961472: 256,
                  11010048: 67174400,
                  12058624: 65796,
                  13107200: 65792,
                  14155776: 67109124,
                  15204352: 67174660,
                  16252928: 67108864,
                  16777216: 67174656,
                  17825792: 65540,
                  18874368: 65536,
                  19922944: 67109120,
                  20971520: 256,
                  22020096: 67174660,
                  23068672: 67108868,
                  24117248: 0,
                  25165824: 67109124,
                  26214400: 67108864,
                  27262976: 4,
                  28311552: 65792,
                  29360128: 67174400,
                  30408704: 260,
                  31457280: 65796,
                  32505856: 67174404,
                  17301504: 67108864,
                  18350080: 260,
                  19398656: 67174656,
                  20447232: 0,
                  21495808: 65540,
                  22544384: 67109120,
                  23592960: 256,
                  24641536: 67174404,
                  25690112: 65536,
                  26738688: 67174660,
                  27787264: 65796,
                  28835840: 67108868,
                  29884416: 67109124,
                  30932992: 67174400,
                  31981568: 4,
                  33030144: 65792
                },
                {
                  0: 2151682048,
                  65536: 2147487808,
                  131072: 4198464,
                  196608: 2151677952,
                  262144: 0,
                  327680: 4198400,
                  393216: 2147483712,
                  458752: 4194368,
                  524288: 2147483648,
                  589824: 4194304,
                  655360: 64,
                  720896: 2147487744,
                  786432: 2151678016,
                  851968: 4160,
                  917504: 4096,
                  983040: 2151682112,
                  32768: 2147487808,
                  98304: 64,
                  163840: 2151678016,
                  229376: 2147487744,
                  294912: 4198400,
                  360448: 2151682112,
                  425984: 0,
                  491520: 2151677952,
                  557056: 4096,
                  622592: 2151682048,
                  688128: 4194304,
                  753664: 4160,
                  819200: 2147483648,
                  884736: 4194368,
                  950272: 4198464,
                  1015808: 2147483712,
                  1048576: 4194368,
                  1114112: 4198400,
                  1179648: 2147483712,
                  1245184: 0,
                  1310720: 4160,
                  1376256: 2151678016,
                  1441792: 2151682048,
                  1507328: 2147487808,
                  1572864: 2151682112,
                  1638400: 2147483648,
                  1703936: 2151677952,
                  1769472: 4198464,
                  1835008: 2147487744,
                  1900544: 4194304,
                  1966080: 64,
                  2031616: 4096,
                  1081344: 2151677952,
                  1146880: 2151682112,
                  1212416: 0,
                  1277952: 4198400,
                  1343488: 4194368,
                  1409024: 2147483648,
                  1474560: 2147487808,
                  1540096: 64,
                  1605632: 2147483712,
                  1671168: 4096,
                  1736704: 2147487744,
                  1802240: 2151678016,
                  1867776: 4160,
                  1933312: 2151682048,
                  1998848: 4194304,
                  2064384: 4198464
                },
                {
                  0: 128,
                  4096: 17039360,
                  8192: 262144,
                  12288: 536870912,
                  16384: 537133184,
                  20480: 16777344,
                  24576: 553648256,
                  28672: 262272,
                  32768: 16777216,
                  36864: 537133056,
                  40960: 536871040,
                  45056: 553910400,
                  49152: 553910272,
                  53248: 0,
                  57344: 17039488,
                  61440: 553648128,
                  2048: 17039488,
                  6144: 553648256,
                  10240: 128,
                  14336: 17039360,
                  18432: 262144,
                  22528: 537133184,
                  26624: 553910272,
                  30720: 536870912,
                  34816: 537133056,
                  38912: 0,
                  43008: 553910400,
                  47104: 16777344,
                  51200: 536871040,
                  55296: 553648128,
                  59392: 16777216,
                  63488: 262272,
                  65536: 262144,
                  69632: 128,
                  73728: 536870912,
                  77824: 553648256,
                  81920: 16777344,
                  86016: 553910272,
                  90112: 537133184,
                  94208: 16777216,
                  98304: 553910400,
                  102400: 553648128,
                  106496: 17039360,
                  110592: 537133056,
                  114688: 262272,
                  118784: 536871040,
                  122880: 0,
                  126976: 17039488,
                  67584: 553648256,
                  71680: 16777216,
                  75776: 17039360,
                  79872: 537133184,
                  83968: 536870912,
                  88064: 17039488,
                  92160: 128,
                  96256: 553910272,
                  100352: 262272,
                  104448: 553910400,
                  108544: 0,
                  112640: 553648128,
                  116736: 16777344,
                  120832: 262144,
                  124928: 537133056,
                  129024: 536871040
                },
                {
                  0: 268435464,
                  256: 8192,
                  512: 270532608,
                  768: 270540808,
                  1024: 268443648,
                  1280: 2097152,
                  1536: 2097160,
                  1792: 268435456,
                  2048: 0,
                  2304: 268443656,
                  2560: 2105344,
                  2816: 8,
                  3072: 270532616,
                  3328: 2105352,
                  3584: 8200,
                  3840: 270540800,
                  128: 270532608,
                  384: 270540808,
                  640: 8,
                  896: 2097152,
                  1152: 2105352,
                  1408: 268435464,
                  1664: 268443648,
                  1920: 8200,
                  2176: 2097160,
                  2432: 8192,
                  2688: 268443656,
                  2944: 270532616,
                  3200: 0,
                  3456: 270540800,
                  3712: 2105344,
                  3968: 268435456,
                  4096: 268443648,
                  4352: 270532616,
                  4608: 270540808,
                  4864: 8200,
                  5120: 2097152,
                  5376: 268435456,
                  5632: 268435464,
                  5888: 2105344,
                  6144: 2105352,
                  6400: 0,
                  6656: 8,
                  6912: 270532608,
                  7168: 8192,
                  7424: 268443656,
                  7680: 270540800,
                  7936: 2097160,
                  4224: 8,
                  4480: 2105344,
                  4736: 2097152,
                  4992: 268435464,
                  5248: 268443648,
                  5504: 8200,
                  5760: 270540808,
                  6016: 270532608,
                  6272: 270540800,
                  6528: 270532616,
                  6784: 8192,
                  7040: 2105352,
                  7296: 2097160,
                  7552: 0,
                  7808: 268435456,
                  8064: 268443656
                },
                {
                  0: 1048576,
                  16: 33555457,
                  32: 1024,
                  48: 1049601,
                  64: 34604033,
                  80: 0,
                  96: 1,
                  112: 34603009,
                  128: 33555456,
                  144: 1048577,
                  160: 33554433,
                  176: 34604032,
                  192: 34603008,
                  208: 1025,
                  224: 1049600,
                  240: 33554432,
                  8: 34603009,
                  24: 0,
                  40: 33555457,
                  56: 34604032,
                  72: 1048576,
                  88: 33554433,
                  104: 33554432,
                  120: 1025,
                  136: 1049601,
                  152: 33555456,
                  168: 34603008,
                  184: 1048577,
                  200: 1024,
                  216: 34604033,
                  232: 1,
                  248: 1049600,
                  256: 33554432,
                  272: 1048576,
                  288: 33555457,
                  304: 34603009,
                  320: 1048577,
                  336: 33555456,
                  352: 34604032,
                  368: 1049601,
                  384: 1025,
                  400: 34604033,
                  416: 1049600,
                  432: 1,
                  448: 0,
                  464: 34603008,
                  480: 33554433,
                  496: 1024,
                  264: 1049600,
                  280: 33555457,
                  296: 34603009,
                  312: 1,
                  328: 33554432,
                  344: 1048576,
                  360: 1025,
                  376: 34604032,
                  392: 33554433,
                  408: 34603008,
                  424: 0,
                  440: 34604033,
                  456: 1049601,
                  472: 1024,
                  488: 33555456,
                  504: 1048577
                },
                {
                  0: 134219808,
                  1: 131072,
                  2: 134217728,
                  3: 32,
                  4: 131104,
                  5: 134350880,
                  6: 134350848,
                  7: 2048,
                  8: 134348800,
                  9: 134219776,
                  10: 133120,
                  11: 134348832,
                  12: 2080,
                  13: 0,
                  14: 134217760,
                  15: 133152,
                  2147483648: 2048,
                  2147483649: 134350880,
                  2147483650: 134219808,
                  2147483651: 134217728,
                  2147483652: 134348800,
                  2147483653: 133120,
                  2147483654: 133152,
                  2147483655: 32,
                  2147483656: 134217760,
                  2147483657: 2080,
                  2147483658: 131104,
                  2147483659: 134350848,
                  2147483660: 0,
                  2147483661: 134348832,
                  2147483662: 134219776,
                  2147483663: 131072,
                  16: 133152,
                  17: 134350848,
                  18: 32,
                  19: 2048,
                  20: 134219776,
                  21: 134217760,
                  22: 134348832,
                  23: 131072,
                  24: 0,
                  25: 131104,
                  26: 134348800,
                  27: 134219808,
                  28: 134350880,
                  29: 133120,
                  30: 2080,
                  31: 134217728,
                  2147483664: 131072,
                  2147483665: 2048,
                  2147483666: 134348832,
                  2147483667: 133152,
                  2147483668: 32,
                  2147483669: 134348800,
                  2147483670: 134217728,
                  2147483671: 134219808,
                  2147483672: 134350880,
                  2147483673: 134217760,
                  2147483674: 134219776,
                  2147483675: 0,
                  2147483676: 133120,
                  2147483677: 2080,
                  2147483678: 131104,
                  2147483679: 134350848
                }
              ], l = [
                4160749569,
                528482304,
                33030144,
                2064384,
                129024,
                8064,
                504,
                2147483679
              ], u = i.DES = s.extend({
                _doReset: function() {
                  for (var e4 = this._key.words, t4 = [], r4 = 0; r4 < 56; r4++) {
                    var n3 = a[r4] - 1;
                    t4[r4] = e4[n3 >>> 5] >>> 31 - n3 % 32 & 1;
                  }
                  for (var s2 = this._subKeys = [], i2 = 0; i2 < 16; i2++) {
                    var d2 = s2[i2] = [], l2 = c[i2];
                    for (r4 = 0; r4 < 24; r4++)
                      d2[r4 / 6 | 0] |= t4[(o[r4] - 1 + l2) % 28] << 31 - r4 % 6, d2[4 + (r4 / 6 | 0)] |= t4[28 + (o[r4 + 24] - 1 + l2) % 28] << 31 - r4 % 6;
                    for (d2[0] = d2[0] << 1 | d2[0] >>> 31, r4 = 1; r4 < 7; r4++)
                      d2[r4] = d2[r4] >>> 4 * (r4 - 1) + 3;
                    d2[7] = d2[7] << 5 | d2[7] >>> 27;
                  }
                  var u2 = this._invSubKeys = [];
                  for (r4 = 0; r4 < 16; r4++) u2[r4] = s2[15 - r4];
                },
                encryptBlock: function(e4, t4) {
                  this._doCryptBlock(e4, t4, this._subKeys);
                },
                decryptBlock: function(e4, t4) {
                  this._doCryptBlock(e4, t4, this._invSubKeys);
                },
                _doCryptBlock: function(e4, t4, r4) {
                  this._lBlock = e4[t4], this._rBlock = e4[t4 + 1], p.call(this, 4, 252645135), p.call(this, 16, 65535), h.call(this, 2, 858993459), h.call(this, 8, 16711935), p.call(this, 1, 1431655765);
                  for (var n3 = 0; n3 < 16; n3++) {
                    for (var s2 = r4[n3], i2 = this._lBlock, a2 = this._rBlock, o2 = 0, c2 = 0; c2 < 8; c2++)
                      o2 |= d[c2][((a2 ^ s2[c2]) & l[c2]) >>> 0];
                    this._lBlock = a2, this._rBlock = i2 ^ o2;
                  }
                  var u2 = this._lBlock;
                  this._lBlock = this._rBlock, this._rBlock = u2, p.call(this, 1, 1431655765), h.call(this, 8, 16711935), h.call(this, 2, 858993459), p.call(this, 16, 65535), p.call(this, 4, 252645135), e4[t4] = this._lBlock, e4[t4 + 1] = this._rBlock;
                },
                keySize: 2,
                ivSize: 2,
                blockSize: 2
              });
              function p(e4, t4) {
                var r4 = (this._lBlock >>> e4 ^ this._rBlock) & t4;
                this._rBlock ^= r4, this._lBlock ^= r4 << e4;
              }
              function h(e4, t4) {
                var r4 = (this._rBlock >>> e4 ^ this._lBlock) & t4;
                this._lBlock ^= r4, this._rBlock ^= r4 << e4;
              }
              e3.DES = s._createHelper(u);
              var m = i.TripleDES = s.extend({
                _doReset: function() {
                  var e4 = this._key.words;
                  if (2 !== e4.length && 4 !== e4.length && e4.length < 6)
                    throw new Error(
                      "Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192."
                    );
                  var t4 = e4.slice(0, 2), n3 = e4.length < 4 ? e4.slice(0, 2) : e4.slice(2, 4), s2 = e4.length < 6 ? e4.slice(0, 2) : e4.slice(4, 6);
                  this._des1 = u.createEncryptor(r3.create(t4)), this._des2 = u.createEncryptor(r3.create(n3)), this._des3 = u.createEncryptor(r3.create(s2));
                },
                encryptBlock: function(e4, t4) {
                  this._des1.encryptBlock(e4, t4), this._des2.decryptBlock(e4, t4), this._des3.encryptBlock(e4, t4);
                },
                decryptBlock: function(e4, t4) {
                  this._des3.decryptBlock(e4, t4), this._des2.encryptBlock(e4, t4), this._des1.decryptBlock(e4, t4);
                },
                keySize: 6,
                ivSize: 2,
                blockSize: 2
              });
              e3.TripleDES = s._createHelper(m);
            }(), n2.TripleDES);
          },
          7654: (e2, t2, r2) => {
            var n2 = "__lodash_hash_undefined__", s = "[object Function]", i = "[object GeneratorFunction]", a = /^\[object .+?Constructor\]$/, o = "object" == typeof r2.g && r2.g && r2.g.Object === Object && r2.g, c = "object" == typeof self && self && self.Object === Object && self, d = o || c || Function("return this")();
            var l, u = Array.prototype, p = Function.prototype, h = Object.prototype, m = d["__core-js_shared__"], f = (l = /[^.]+$/.exec(m && m.keys && m.keys.IE_PROTO || "")) ? "Symbol(src)_1." + l : "", g = p.toString, v = h.hasOwnProperty, _ = h.toString, y = RegExp(
              "^" + g.call(v).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(
                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                "$1.*?"
              ) + "$"
            ), b = u.splice, w = O(d, "Map"), S = O(Object, "create");
            function R(e3) {
              var t3 = -1, r3 = e3 ? e3.length : 0;
              for (this.clear(); ++t3 < r3; ) {
                var n3 = e3[t3];
                this.set(n3[0], n3[1]);
              }
            }
            function k(e3) {
              var t3 = -1, r3 = e3 ? e3.length : 0;
              for (this.clear(); ++t3 < r3; ) {
                var n3 = e3[t3];
                this.set(n3[0], n3[1]);
              }
            }
            function E(e3) {
              var t3 = -1, r3 = e3 ? e3.length : 0;
              for (this.clear(); ++t3 < r3; ) {
                var n3 = e3[t3];
                this.set(n3[0], n3[1]);
              }
            }
            function C(e3, t3) {
              for (var r3, n3, s2 = e3.length; s2--; )
                if ((r3 = e3[s2][0]) === (n3 = t3) || r3 != r3 && n3 != n3) return s2;
              return -1;
            }
            function T(e3) {
              if (!D(e3) || (t3 = e3, f && f in t3)) return false;
              var t3, r3 = function(e4) {
                var t4 = D(e4) ? _.call(e4) : "";
                return t4 == s || t4 == i;
              }(e3) || function(e4) {
                var t4 = false;
                if (null != e4 && "function" != typeof e4.toString)
                  try {
                    t4 = !!(e4 + "");
                  } catch (e5) {
                  }
                return t4;
              }(e3) ? y : a;
              return r3.test(
                function(e4) {
                  if (null != e4) {
                    try {
                      return g.call(e4);
                    } catch (e5) {
                    }
                    try {
                      return e4 + "";
                    } catch (e5) {
                    }
                  }
                  return "";
                }(e3)
              );
            }
            function P(e3, t3) {
              var r3, n3, s2 = e3.__data__;
              return ("string" == (n3 = typeof (r3 = t3)) || "number" == n3 || "symbol" == n3 || "boolean" == n3 ? "__proto__" !== r3 : null === r3) ? s2["string" == typeof t3 ? "string" : "hash"] : s2.map;
            }
            function O(e3, t3) {
              var r3 = function(e4, t4) {
                return null == e4 ? void 0 : e4[t4];
              }(e3, t3);
              return T(r3) ? r3 : void 0;
            }
            function x(e3, t3) {
              if ("function" != typeof e3 || t3 && "function" != typeof t3)
                throw new TypeError("Expected a function");
              var r3 = function() {
                var n3 = arguments, s2 = t3 ? t3.apply(this, n3) : n3[0], i2 = r3.cache;
                if (i2.has(s2)) return i2.get(s2);
                var a2 = e3.apply(this, n3);
                return r3.cache = i2.set(s2, a2), a2;
              };
              return r3.cache = new (x.Cache || E)(), r3;
            }
            function D(e3) {
              var t3 = typeof e3;
              return !!e3 && ("object" == t3 || "function" == t3);
            }
            R.prototype.clear = function() {
              this.__data__ = S ? S(null) : {};
            }, R.prototype.delete = function(e3) {
              return this.has(e3) && delete this.__data__[e3];
            }, R.prototype.get = function(e3) {
              var t3 = this.__data__;
              if (S) {
                var r3 = t3[e3];
                return r3 === n2 ? void 0 : r3;
              }
              return v.call(t3, e3) ? t3[e3] : void 0;
            }, R.prototype.has = function(e3) {
              var t3 = this.__data__;
              return S ? void 0 !== t3[e3] : v.call(t3, e3);
            }, R.prototype.set = function(e3, t3) {
              return this.__data__[e3] = S && void 0 === t3 ? n2 : t3, this;
            }, k.prototype.clear = function() {
              this.__data__ = [];
            }, k.prototype.delete = function(e3) {
              var t3 = this.__data__, r3 = C(t3, e3);
              return !(r3 < 0) && (r3 == t3.length - 1 ? t3.pop() : b.call(t3, r3, 1), true);
            }, k.prototype.get = function(e3) {
              var t3 = this.__data__, r3 = C(t3, e3);
              return r3 < 0 ? void 0 : t3[r3][1];
            }, k.prototype.has = function(e3) {
              return C(this.__data__, e3) > -1;
            }, k.prototype.set = function(e3, t3) {
              var r3 = this.__data__, n3 = C(r3, e3);
              return n3 < 0 ? r3.push([e3, t3]) : r3[n3][1] = t3, this;
            }, E.prototype.clear = function() {
              this.__data__ = {
                hash: new R(),
                map: new (w || k)(),
                string: new R()
              };
            }, E.prototype.delete = function(e3) {
              return P(this, e3).delete(e3);
            }, E.prototype.get = function(e3) {
              return P(this, e3).get(e3);
            }, E.prototype.has = function(e3) {
              return P(this, e3).has(e3);
            }, E.prototype.set = function(e3, t3) {
              return P(this, e3).set(e3, t3), this;
            }, x.Cache = E, e2.exports = x;
          },
          7800: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => s });
            var n2 = r2(3145);
            function s(e3, t3) {
              if (e3) {
                if ("string" == typeof e3) return (0, n2.A)(e3, t3);
                var r3 = {}.toString.call(e3).slice(8, -1);
                return "Object" === r3 && e3.constructor && (r3 = e3.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e3) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? (0, n2.A)(e3, t3) : void 0;
              }
            }
          },
          7833: (e2, t2, r2) => {
            t2.formatArgs = function(t3) {
              if (t3[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t3[0] + (this.useColors ? "%c " : " ") + "+" + e2.exports.humanize(this.diff), !this.useColors)
                return;
              const r3 = "color: " + this.color;
              t3.splice(1, 0, r3, "color: inherit");
              let n3 = 0, s = 0;
              t3[0].replace(/%[a-zA-Z%]/g, (e3) => {
                "%%" !== e3 && (n3++, "%c" === e3 && (s = n3));
              }), t3.splice(s, 0, r3);
            }, t2.save = function(e3) {
              try {
                e3 ? t2.storage.setItem("debug", e3) : t2.storage.removeItem("debug");
              } catch (e4) {
              }
            }, t2.load = function() {
              let e3;
              try {
                e3 = t2.storage.getItem("debug");
              } catch (e4) {
              }
              !e3 && "undefined" != typeof process && "env" in process && (e3 = process.env.DEBUG);
              return e3;
            }, t2.useColors = function() {
              if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs))
                return true;
              if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
                return false;
              let e3;
              return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && (e3 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(e3[1], 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
            }, t2.storage = function() {
              try {
                return localStorage;
              } catch (e3) {
              }
            }(), t2.destroy = /* @__PURE__ */ (() => {
              let e3 = false;
              return () => {
                e3 || (e3 = true, console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                ));
              };
            })(), t2.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33"
            ], t2.log = console.debug || console.log || (() => {
            }), e2.exports = r2(736)(t2);
            const { formatters: n2 } = e2.exports;
            n2.j = function(e3) {
              try {
                return JSON.stringify(e3);
              } catch (e4) {
                return "[UnexpectedJSONParseError]: " + e4.message;
              }
            };
          },
          8046: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.canReceive = t2.canSend = t2.generateProbatorRtpParameters = t2.reduceCodecs = t2.getSendingRemoteRtpParameters = t2.getSendingRtpParameters = t2.getRecvRtpCapabilities = t2.getExtendedRtpCapabilities = t2.validateSctpCapabilities = t2.validateSctpStreamParameters = t2.validateRtpParameters = t2.validateRtpCapabilities = void 0;
            const a = i(r2(3200)), o = i(r2(1765));
            function c(e3) {
              if ("object" != typeof e3)
                throw new TypeError("params is not an object");
              if (e3.mid && "string" != typeof e3.mid)
                throw new TypeError("params.mid is not a string");
              if (!Array.isArray(e3.codecs))
                throw new TypeError("missing params.codecs");
              for (const t3 of e3.codecs) p(t3);
              if (e3.headerExtensions && !Array.isArray(e3.headerExtensions))
                throw new TypeError("params.headerExtensions is not an array");
              e3.headerExtensions || (e3.headerExtensions = []);
              for (const t3 of e3.headerExtensions) h(t3);
              if (e3.encodings && !Array.isArray(e3.encodings))
                throw new TypeError("params.encodings is not an array");
              e3.encodings || (e3.encodings = []);
              for (const t3 of e3.encodings) m(t3);
              if (e3.rtcp && "object" != typeof e3.rtcp)
                throw new TypeError("params.rtcp is not an object");
              e3.rtcp || (e3.rtcp = {}), function(e4) {
                if ("object" != typeof e4)
                  throw new TypeError("rtcp is not an object");
                if (e4.cname && "string" != typeof e4.cname)
                  throw new TypeError("invalid rtcp.cname");
                e4.reducedSize && "boolean" == typeof e4.reducedSize || (e4.reducedSize = true);
              }(e3.rtcp);
            }
            function d(e3) {
              const t3 = new RegExp("^(audio|video)/(.+)", "i");
              if ("object" != typeof e3)
                throw new TypeError("codec is not an object");
              if (!e3.mimeType || "string" != typeof e3.mimeType)
                throw new TypeError("missing codec.mimeType");
              const r3 = t3.exec(e3.mimeType);
              if (!r3) throw new TypeError("invalid codec.mimeType");
              if (e3.kind = r3[1].toLowerCase(), e3.preferredPayloadType && "number" != typeof e3.preferredPayloadType)
                throw new TypeError("invalid codec.preferredPayloadType");
              if ("number" != typeof e3.clockRate)
                throw new TypeError("missing codec.clockRate");
              "audio" === e3.kind ? "number" != typeof e3.channels && (e3.channels = 1) : delete e3.channels, e3.parameters && "object" == typeof e3.parameters || (e3.parameters = {});
              for (const t4 of Object.keys(e3.parameters)) {
                let r4 = e3.parameters[t4];
                if (void 0 === r4 && (e3.parameters[t4] = "", r4 = ""), "string" != typeof r4 && "number" != typeof r4)
                  throw new TypeError(
                    `invalid codec parameter [key:${t4}s, value:${r4}]`
                  );
                if ("apt" === t4 && "number" != typeof r4)
                  throw new TypeError("invalid codec apt parameter");
              }
              e3.rtcpFeedback && Array.isArray(e3.rtcpFeedback) || (e3.rtcpFeedback = []);
              for (const t4 of e3.rtcpFeedback) l(t4);
            }
            function l(e3) {
              if ("object" != typeof e3)
                throw new TypeError("fb is not an object");
              if (!e3.type || "string" != typeof e3.type)
                throw new TypeError("missing fb.type");
              e3.parameter && "string" == typeof e3.parameter || (e3.parameter = "");
            }
            function u(e3) {
              if ("object" != typeof e3)
                throw new TypeError("ext is not an object");
              if ("audio" !== e3.kind && "video" !== e3.kind)
                throw new TypeError("invalid ext.kind");
              if (!e3.uri || "string" != typeof e3.uri)
                throw new TypeError("missing ext.uri");
              if ("number" != typeof e3.preferredId)
                throw new TypeError("missing ext.preferredId");
              if (e3.preferredEncrypt && "boolean" != typeof e3.preferredEncrypt)
                throw new TypeError("invalid ext.preferredEncrypt");
              if (e3.preferredEncrypt || (e3.preferredEncrypt = false), e3.direction && "string" != typeof e3.direction)
                throw new TypeError("invalid ext.direction");
              e3.direction || (e3.direction = "sendrecv");
            }
            function p(e3) {
              const t3 = new RegExp("^(audio|video)/(.+)", "i");
              if ("object" != typeof e3)
                throw new TypeError("codec is not an object");
              if (!e3.mimeType || "string" != typeof e3.mimeType)
                throw new TypeError("missing codec.mimeType");
              const r3 = t3.exec(e3.mimeType);
              if (!r3) throw new TypeError("invalid codec.mimeType");
              if ("number" != typeof e3.payloadType)
                throw new TypeError("missing codec.payloadType");
              if ("number" != typeof e3.clockRate)
                throw new TypeError("missing codec.clockRate");
              "audio" === r3[1].toLowerCase() ? "number" != typeof e3.channels && (e3.channels = 1) : delete e3.channels, e3.parameters && "object" == typeof e3.parameters || (e3.parameters = {});
              for (const t4 of Object.keys(e3.parameters)) {
                let r4 = e3.parameters[t4];
                if (void 0 === r4 && (e3.parameters[t4] = "", r4 = ""), "string" != typeof r4 && "number" != typeof r4)
                  throw new TypeError(
                    `invalid codec parameter [key:${t4}s, value:${r4}]`
                  );
                if ("apt" === t4 && "number" != typeof r4)
                  throw new TypeError("invalid codec apt parameter");
              }
              e3.rtcpFeedback && Array.isArray(e3.rtcpFeedback) || (e3.rtcpFeedback = []);
              for (const t4 of e3.rtcpFeedback) l(t4);
            }
            function h(e3) {
              if ("object" != typeof e3)
                throw new TypeError("ext is not an object");
              if (!e3.uri || "string" != typeof e3.uri)
                throw new TypeError("missing ext.uri");
              if ("number" != typeof e3.id) throw new TypeError("missing ext.id");
              if (e3.encrypt && "boolean" != typeof e3.encrypt)
                throw new TypeError("invalid ext.encrypt");
              e3.encrypt || (e3.encrypt = false), e3.parameters && "object" == typeof e3.parameters || (e3.parameters = {});
              for (const t3 of Object.keys(e3.parameters)) {
                let r3 = e3.parameters[t3];
                if (void 0 === r3 && (e3.parameters[t3] = "", r3 = ""), "string" != typeof r3 && "number" != typeof r3)
                  throw new TypeError("invalid header extension parameter");
              }
            }
            function m(e3) {
              if ("object" != typeof e3)
                throw new TypeError("encoding is not an object");
              if (e3.ssrc && "number" != typeof e3.ssrc)
                throw new TypeError("invalid encoding.ssrc");
              if (e3.rid && "string" != typeof e3.rid)
                throw new TypeError("invalid encoding.rid");
              if (e3.rtx && "object" != typeof e3.rtx)
                throw new TypeError("invalid encoding.rtx");
              if (e3.rtx && "number" != typeof e3.rtx.ssrc)
                throw new TypeError("missing encoding.rtx.ssrc");
              if (e3.dtx && "boolean" == typeof e3.dtx || (e3.dtx = false), e3.scalabilityMode && "string" != typeof e3.scalabilityMode)
                throw new TypeError("invalid encoding.scalabilityMode");
            }
            function f(e3) {
              return !!e3 && /.+\/rtx$/i.test(e3.mimeType);
            }
            function g(e3, t3, { strict: r3 = false, modify: n3 = false } = {}) {
              const s2 = e3.mimeType.toLowerCase();
              if (s2 !== t3.mimeType.toLowerCase()) return false;
              if (e3.clockRate !== t3.clockRate) return false;
              if (e3.channels !== t3.channels) return false;
              switch (s2) {
                case "video/h264":
                  if (r3) {
                    if ((e3.parameters["packetization-mode"] || 0) !== (t3.parameters["packetization-mode"] || 0))
                      return false;
                    if (!a.isSameProfile(e3.parameters, t3.parameters)) return false;
                    let r4;
                    try {
                      r4 = a.generateProfileLevelIdStringForAnswer(
                        e3.parameters,
                        t3.parameters
                      );
                    } catch (e4) {
                      return false;
                    }
                    n3 && (r4 ? (e3.parameters["profile-level-id"] = r4, t3.parameters["profile-level-id"] = r4) : (delete e3.parameters["profile-level-id"], delete t3.parameters["profile-level-id"]));
                  }
                  break;
                case "video/vp9":
                  if (r3) {
                    if ((e3.parameters["profile-id"] || 0) !== (t3.parameters["profile-id"] || 0))
                      return false;
                  }
              }
              return true;
            }
            function v(e3, t3) {
              return (!e3.kind || !t3.kind || e3.kind === t3.kind) && e3.uri === t3.uri;
            }
            function _(e3, t3) {
              const r3 = [];
              for (const n3 of e3.rtcpFeedback || []) {
                const e4 = (t3.rtcpFeedback || []).find(
                  (e5) => e5.type === n3.type && (e5.parameter === n3.parameter || !e5.parameter && !n3.parameter)
                );
                e4 && r3.push(e4);
              }
              return r3;
            }
            t2.validateRtpCapabilities = function(e3) {
              if ("object" != typeof e3)
                throw new TypeError("caps is not an object");
              if (e3.codecs && !Array.isArray(e3.codecs))
                throw new TypeError("caps.codecs is not an array");
              e3.codecs || (e3.codecs = []);
              for (const t3 of e3.codecs) d(t3);
              if (e3.headerExtensions && !Array.isArray(e3.headerExtensions))
                throw new TypeError("caps.headerExtensions is not an array");
              e3.headerExtensions || (e3.headerExtensions = []);
              for (const t3 of e3.headerExtensions) u(t3);
            }, t2.validateRtpParameters = c, t2.validateSctpStreamParameters = function(e3) {
              if ("object" != typeof e3)
                throw new TypeError("params is not an object");
              if ("number" != typeof e3.streamId)
                throw new TypeError("missing params.streamId");
              let t3 = false;
              if ("boolean" == typeof e3.ordered ? t3 = true : e3.ordered = true, e3.maxPacketLifeTime && "number" != typeof e3.maxPacketLifeTime)
                throw new TypeError("invalid params.maxPacketLifeTime");
              if (e3.maxRetransmits && "number" != typeof e3.maxRetransmits)
                throw new TypeError("invalid params.maxRetransmits");
              if (e3.maxPacketLifeTime && e3.maxRetransmits)
                throw new TypeError(
                  "cannot provide both maxPacketLifeTime and maxRetransmits"
                );
              if (t3 && e3.ordered && (e3.maxPacketLifeTime || e3.maxRetransmits))
                throw new TypeError(
                  "cannot be ordered with maxPacketLifeTime or maxRetransmits"
                );
              if (t3 || !e3.maxPacketLifeTime && !e3.maxRetransmits || (e3.ordered = false), e3.label && "string" != typeof e3.label)
                throw new TypeError("invalid params.label");
              if (e3.protocol && "string" != typeof e3.protocol)
                throw new TypeError("invalid params.protocol");
            }, t2.validateSctpCapabilities = function(e3) {
              if ("object" != typeof e3)
                throw new TypeError("caps is not an object");
              if (!e3.numStreams || "object" != typeof e3.numStreams)
                throw new TypeError("missing caps.numStreams");
              !function(e4) {
                if ("object" != typeof e4)
                  throw new TypeError("numStreams is not an object");
                if ("number" != typeof e4.OS)
                  throw new TypeError("missing numStreams.OS");
                if ("number" != typeof e4.MIS)
                  throw new TypeError("missing numStreams.MIS");
              }(e3.numStreams);
            }, t2.getExtendedRtpCapabilities = function(e3, t3) {
              const r3 = { codecs: [], headerExtensions: [] };
              for (const n3 of t3.codecs || []) {
                if (f(n3)) continue;
                const t4 = (e3.codecs || []).find(
                  (e4) => g(e4, n3, { strict: true, modify: true })
                );
                if (!t4) continue;
                const s2 = {
                  mimeType: t4.mimeType,
                  kind: t4.kind,
                  clockRate: t4.clockRate,
                  channels: t4.channels,
                  localPayloadType: t4.preferredPayloadType,
                  localRtxPayloadType: void 0,
                  remotePayloadType: n3.preferredPayloadType,
                  remoteRtxPayloadType: void 0,
                  localParameters: t4.parameters,
                  remoteParameters: n3.parameters,
                  rtcpFeedback: _(t4, n3)
                };
                r3.codecs.push(s2);
              }
              for (const n3 of r3.codecs) {
                const r4 = e3.codecs.find(
                  (e4) => f(e4) && e4.parameters.apt === n3.localPayloadType
                ), s2 = t3.codecs.find(
                  (e4) => f(e4) && e4.parameters.apt === n3.remotePayloadType
                );
                r4 && s2 && (n3.localRtxPayloadType = r4.preferredPayloadType, n3.remoteRtxPayloadType = s2.preferredPayloadType);
              }
              for (const n3 of t3.headerExtensions) {
                const t4 = e3.headerExtensions.find((e4) => v(e4, n3));
                if (!t4) continue;
                const s2 = {
                  kind: n3.kind,
                  uri: n3.uri,
                  sendId: t4.preferredId,
                  recvId: n3.preferredId,
                  encrypt: t4.preferredEncrypt,
                  direction: "sendrecv"
                };
                switch (n3.direction) {
                  case "sendrecv":
                    s2.direction = "sendrecv";
                    break;
                  case "recvonly":
                    s2.direction = "sendonly";
                    break;
                  case "sendonly":
                    s2.direction = "recvonly";
                    break;
                  case "inactive":
                    s2.direction = "inactive";
                }
                r3.headerExtensions.push(s2);
              }
              return r3;
            }, t2.getRecvRtpCapabilities = function(e3) {
              const t3 = { codecs: [], headerExtensions: [] };
              for (const r3 of e3.codecs) {
                const e4 = {
                  mimeType: r3.mimeType,
                  kind: r3.kind,
                  preferredPayloadType: r3.remotePayloadType,
                  clockRate: r3.clockRate,
                  channels: r3.channels,
                  parameters: r3.localParameters,
                  rtcpFeedback: r3.rtcpFeedback
                };
                if (t3.codecs.push(e4), !r3.remoteRtxPayloadType) continue;
                const n3 = {
                  mimeType: `${r3.kind}/rtx`,
                  kind: r3.kind,
                  preferredPayloadType: r3.remoteRtxPayloadType,
                  clockRate: r3.clockRate,
                  parameters: { apt: r3.remotePayloadType },
                  rtcpFeedback: []
                };
                t3.codecs.push(n3);
              }
              for (const r3 of e3.headerExtensions) {
                if ("sendrecv" !== r3.direction && "recvonly" !== r3.direction)
                  continue;
                const e4 = {
                  kind: r3.kind,
                  uri: r3.uri,
                  preferredId: r3.recvId,
                  preferredEncrypt: r3.encrypt,
                  direction: r3.direction
                };
                t3.headerExtensions.push(e4);
              }
              return t3;
            }, t2.getSendingRtpParameters = function(e3, t3) {
              const r3 = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {}
              };
              for (const n3 of t3.codecs) {
                if (n3.kind !== e3) continue;
                const t4 = {
                  mimeType: n3.mimeType,
                  payloadType: n3.localPayloadType,
                  clockRate: n3.clockRate,
                  channels: n3.channels,
                  parameters: n3.localParameters,
                  rtcpFeedback: n3.rtcpFeedback
                };
                if (r3.codecs.push(t4), n3.localRtxPayloadType) {
                  const e4 = {
                    mimeType: `${n3.kind}/rtx`,
                    payloadType: n3.localRtxPayloadType,
                    clockRate: n3.clockRate,
                    parameters: { apt: n3.localPayloadType },
                    rtcpFeedback: []
                  };
                  r3.codecs.push(e4);
                }
              }
              for (const n3 of t3.headerExtensions) {
                if (n3.kind && n3.kind !== e3 || "sendrecv" !== n3.direction && "sendonly" !== n3.direction)
                  continue;
                const t4 = {
                  uri: n3.uri,
                  id: n3.sendId,
                  encrypt: n3.encrypt,
                  parameters: {}
                };
                r3.headerExtensions.push(t4);
              }
              return r3;
            }, t2.getSendingRemoteRtpParameters = function(e3, t3) {
              const r3 = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {}
              };
              for (const n3 of t3.codecs) {
                if (n3.kind !== e3) continue;
                const t4 = {
                  mimeType: n3.mimeType,
                  payloadType: n3.localPayloadType,
                  clockRate: n3.clockRate,
                  channels: n3.channels,
                  parameters: n3.remoteParameters,
                  rtcpFeedback: n3.rtcpFeedback
                };
                if (r3.codecs.push(t4), n3.localRtxPayloadType) {
                  const e4 = {
                    mimeType: `${n3.kind}/rtx`,
                    payloadType: n3.localRtxPayloadType,
                    clockRate: n3.clockRate,
                    parameters: { apt: n3.localPayloadType },
                    rtcpFeedback: []
                  };
                  r3.codecs.push(e4);
                }
              }
              for (const n3 of t3.headerExtensions) {
                if (n3.kind && n3.kind !== e3 || "sendrecv" !== n3.direction && "sendonly" !== n3.direction)
                  continue;
                const t4 = {
                  uri: n3.uri,
                  id: n3.sendId,
                  encrypt: n3.encrypt,
                  parameters: {}
                };
                r3.headerExtensions.push(t4);
              }
              if (r3.headerExtensions.some(
                (e4) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e4.uri
              ))
                for (const e4 of r3.codecs)
                  e4.rtcpFeedback = (e4.rtcpFeedback || []).filter(
                    (e5) => "goog-remb" !== e5.type
                  );
              else if (r3.headerExtensions.some(
                (e4) => "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" === e4.uri
              ))
                for (const e4 of r3.codecs)
                  e4.rtcpFeedback = (e4.rtcpFeedback || []).filter(
                    (e5) => "transport-cc" !== e5.type
                  );
              else
                for (const e4 of r3.codecs)
                  e4.rtcpFeedback = (e4.rtcpFeedback || []).filter(
                    (e5) => "transport-cc" !== e5.type && "goog-remb" !== e5.type
                  );
              return r3;
            }, t2.reduceCodecs = function(e3, t3) {
              const r3 = [];
              if (t3) {
                for (let n3 = 0; n3 < e3.length; ++n3)
                  if (g(e3[n3], t3, { strict: true })) {
                    r3.push(e3[n3]), f(e3[n3 + 1]) && r3.push(e3[n3 + 1]);
                    break;
                  }
                if (0 === r3.length)
                  throw new TypeError("no matching codec found");
              } else r3.push(e3[0]), f(e3[1]) && r3.push(e3[1]);
              return r3;
            }, t2.generateProbatorRtpParameters = function(e3) {
              c(e3 = o.clone(e3));
              const t3 = {
                mid: "probator",
                codecs: [],
                headerExtensions: [],
                encodings: [{ ssrc: 1234 }],
                rtcp: { cname: "probator" }
              };
              return t3.codecs.push(e3.codecs[0]), t3.codecs[0].payloadType = 127, t3.headerExtensions = e3.headerExtensions, t3;
            }, t2.canSend = function(e3, t3) {
              return t3.codecs.some((t4) => t4.kind === e3);
            }, t2.canReceive = function(e3, t3) {
              if (c(e3), 0 === e3.codecs.length) return false;
              const r3 = e3.codecs[0];
              return t3.codecs.some(
                (e4) => e4.remotePayloadType === r3.payloadType
              );
            };
          },
          8056: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), function() {
              var e3 = n2, t3 = e3.lib, r3 = t3.WordArray, s = t3.Hasher, i = e3.algo, a = r3.create([
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                7,
                4,
                13,
                1,
                10,
                6,
                15,
                3,
                12,
                0,
                9,
                5,
                2,
                14,
                11,
                8,
                3,
                10,
                14,
                4,
                9,
                15,
                8,
                1,
                2,
                7,
                0,
                6,
                13,
                11,
                5,
                12,
                1,
                9,
                11,
                10,
                0,
                8,
                12,
                4,
                13,
                3,
                7,
                15,
                14,
                5,
                6,
                2,
                4,
                0,
                5,
                9,
                7,
                12,
                2,
                10,
                14,
                1,
                3,
                8,
                11,
                6,
                15,
                13
              ]), o = r3.create([
                5,
                14,
                7,
                0,
                9,
                2,
                11,
                4,
                13,
                6,
                15,
                8,
                1,
                10,
                3,
                12,
                6,
                11,
                3,
                7,
                0,
                13,
                5,
                10,
                14,
                15,
                8,
                12,
                4,
                9,
                1,
                2,
                15,
                5,
                1,
                3,
                7,
                14,
                6,
                9,
                11,
                8,
                12,
                2,
                10,
                0,
                4,
                13,
                8,
                6,
                4,
                1,
                3,
                11,
                15,
                0,
                5,
                12,
                2,
                13,
                9,
                7,
                10,
                14,
                12,
                15,
                10,
                4,
                1,
                5,
                8,
                7,
                6,
                2,
                13,
                14,
                0,
                3,
                9,
                11
              ]), c = r3.create([
                11,
                14,
                15,
                12,
                5,
                8,
                7,
                9,
                11,
                13,
                14,
                15,
                6,
                7,
                9,
                8,
                7,
                6,
                8,
                13,
                11,
                9,
                7,
                15,
                7,
                12,
                15,
                9,
                11,
                7,
                13,
                12,
                11,
                13,
                6,
                7,
                14,
                9,
                13,
                15,
                14,
                8,
                13,
                6,
                5,
                12,
                7,
                5,
                11,
                12,
                14,
                15,
                14,
                15,
                9,
                8,
                9,
                14,
                5,
                6,
                8,
                6,
                5,
                12,
                9,
                15,
                5,
                11,
                6,
                8,
                13,
                12,
                5,
                12,
                13,
                14,
                11,
                8,
                5,
                6
              ]), d = r3.create([
                8,
                9,
                9,
                11,
                13,
                15,
                15,
                5,
                7,
                7,
                8,
                11,
                14,
                14,
                12,
                6,
                9,
                13,
                15,
                7,
                12,
                8,
                9,
                11,
                7,
                7,
                12,
                7,
                6,
                15,
                13,
                11,
                9,
                7,
                15,
                11,
                8,
                6,
                6,
                14,
                12,
                13,
                5,
                14,
                13,
                13,
                7,
                5,
                15,
                5,
                8,
                11,
                14,
                14,
                6,
                14,
                6,
                9,
                12,
                9,
                12,
                5,
                15,
                8,
                8,
                5,
                12,
                9,
                12,
                5,
                14,
                6,
                8,
                13,
                6,
                5,
                15,
                13,
                11,
                11
              ]), l = r3.create([
                0,
                1518500249,
                1859775393,
                2400959708,
                2840853838
              ]), u = r3.create([
                1352829926,
                1548603684,
                1836072691,
                2053994217,
                0
              ]), p = i.RIPEMD160 = s.extend({
                _doReset: function() {
                  this._hash = r3.create([
                    1732584193,
                    4023233417,
                    2562383102,
                    271733878,
                    3285377520
                  ]);
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = 0; r4 < 16; r4++) {
                    var n3 = t4 + r4, s2 = e4[n3];
                    e4[n3] = 16711935 & (s2 << 8 | s2 >>> 24) | 4278255360 & (s2 << 24 | s2 >>> 8);
                  }
                  var i2, p2, y, b, w, S, R, k, E, C, T, P = this._hash.words, O = l.words, x = u.words, D = a.words, I = o.words, A = c.words, M = d.words;
                  for (S = i2 = P[0], R = p2 = P[1], k = y = P[2], E = b = P[3], C = w = P[4], r4 = 0; r4 < 80; r4 += 1)
                    T = i2 + e4[t4 + D[r4]] | 0, T += r4 < 16 ? h(p2, y, b) + O[0] : r4 < 32 ? m(p2, y, b) + O[1] : r4 < 48 ? f(p2, y, b) + O[2] : r4 < 64 ? g(p2, y, b) + O[3] : v(p2, y, b) + O[4], T = (T = _(T |= 0, A[r4])) + w | 0, i2 = w, w = b, b = _(y, 10), y = p2, p2 = T, T = S + e4[t4 + I[r4]] | 0, T += r4 < 16 ? v(R, k, E) + x[0] : r4 < 32 ? g(R, k, E) + x[1] : r4 < 48 ? f(R, k, E) + x[2] : r4 < 64 ? m(R, k, E) + x[3] : h(R, k, E) + x[4], T = (T = _(T |= 0, M[r4])) + C | 0, S = C, C = E, E = _(k, 10), k = R, R = T;
                  T = P[1] + y + E | 0, P[1] = P[2] + b + C | 0, P[2] = P[3] + w + S | 0, P[3] = P[4] + i2 + R | 0, P[4] = P[0] + p2 + k | 0, P[0] = T;
                },
                _doFinalize: function() {
                  var e4 = this._data, t4 = e4.words, r4 = 8 * this._nDataBytes, n3 = 8 * e4.sigBytes;
                  t4[n3 >>> 5] |= 128 << 24 - n3 % 32, t4[14 + (n3 + 64 >>> 9 << 4)] = 16711935 & (r4 << 8 | r4 >>> 24) | 4278255360 & (r4 << 24 | r4 >>> 8), e4.sigBytes = 4 * (t4.length + 1), this._process();
                  for (var s2 = this._hash, i2 = s2.words, a2 = 0; a2 < 5; a2++) {
                    var o2 = i2[a2];
                    i2[a2] = 16711935 & (o2 << 8 | o2 >>> 24) | 4278255360 & (o2 << 24 | o2 >>> 8);
                  }
                  return s2;
                },
                clone: function() {
                  var e4 = s.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                }
              });
              function h(e4, t4, r4) {
                return e4 ^ t4 ^ r4;
              }
              function m(e4, t4, r4) {
                return e4 & t4 | ~e4 & r4;
              }
              function f(e4, t4, r4) {
                return (e4 | ~t4) ^ r4;
              }
              function g(e4, t4, r4) {
                return e4 & r4 | t4 & ~r4;
              }
              function v(e4, t4, r4) {
                return e4 ^ (t4 | ~r4);
              }
              function _(e4, t4) {
                return e4 << t4 | e4 >>> 32 - t4;
              }
              e3.RIPEMD160 = s._createHelper(p), e3.HmacRIPEMD160 = s._createHmacHelper(p);
            }(Math), n2.RIPEMD160);
          },
          8057: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__exportStar || function(e3, t3) {
              for (var r3 in e3)
                "default" === r3 || Object.prototype.hasOwnProperty.call(t3, r3) || n2(t3, e3, r3);
            };
            Object.defineProperty(t2, "__esModule", { value: true }), s(r2(6004), t2), s(r2(5601), t2), s(r2(9792), t2), s(r2(3518), t2), s(r2(7504), t2), s(r2(9166), t2), s(r2(5370), t2), s(r2(4160), t2), s(r2(521), t2), s(r2(4893), t2);
          },
          8124: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = r2(9021), r2(7165), n2.pad.NoPadding = { pad: function() {
            }, unpad: function() {
            } }, n2.pad.NoPadding);
          },
          8155: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome67 = void 0;
            const a = i(r2(7363)), o = r2(2994), c = i(r2(1765)), d = i(r2(8046)), l = i(r2(5544)), u = i(r2(4496)), p = r2(521), h = r2(1305), m = new o.Logger("Chrome67"), f = { OS: 1024, MIS: 1024 };
            class g extends p.HandlerInterface {
              static createFactory() {
                return () => new g();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdRtpSender = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome67";
              }
              close() {
                if (m.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                m.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = a.parse(t3.sdp);
                  return l.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                m.debug("run()"), this._direction = e3, this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, n3.role && "auto" !== n3.role && (this._forcedLocalDtlsRole = "server" === n3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (m.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                m.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (m.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                this.assertSendDirection(), m.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), n3 && m.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addTrack(e3, this._sendStream);
                let s2, i2 = await this._pc.createOffer(), o2 = a.parse(i2.sdp);
                const p2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                p2.codecs = d.reduceCodecs(p2.codecs);
                const h2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                if (h2.codecs = d.reduceCodecs(h2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: o2
                }), "video" === e3.kind && t3 && t3.length > 1 && (m.debug("send() | enabling simulcast"), o2 = a.parse(i2.sdp), s2 = o2.media.find((e4) => "video" === e4.type), u.addLegacySimulcast({
                  offerMediaObject: s2,
                  track: e3,
                  numStreams: t3.length
                }), i2 = { type: "offer", sdp: a.write(o2) }), m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  i2
                ), await this._pc.setLocalDescription(i2), o2 = a.parse(this._pc.localDescription.sdp), s2 = o2.media.find((t4) => t4.type === e3.kind), p2.rtcp.cname = l.getCname({ offerMediaObject: s2 }), p2.encodings = u.getRtpEncodings({
                  offerMediaObject: s2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < p2.encodings.length; ++e4)
                    t3[e4] && Object.assign(p2.encodings[e4], t3[e4]);
                if (p2.encodings.length > 1 && "video/vp8" === p2.codecs[0].mimeType.toLowerCase())
                  for (const e4 of p2.encodings) e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: s2,
                  offerRtpParameters: p2,
                  answerRtpParameters: h2,
                  codecOptions: r3
                });
                const f2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  f2
                ), await this._pc.setRemoteDescription(f2);
                const g2 = String(this._nextSendLocalId);
                this._nextSendLocalId++;
                const v = this._pc.getSenders().find((t4) => t4.track === e3);
                return this._mapSendLocalIdRtpSender.set(g2, v), { localId: g2, rtpParameters: p2, rtpSender: v };
              }
              async stopSending(e3) {
                this.assertSendDirection(), m.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3) throw new Error("associated RTCRtpSender not found");
                this._pc.removeTrack(t3), t3.track && this._sendStream.removeTrack(t3.track), this._mapSendLocalIdRtpSender.delete(e3);
                const r3 = await this._pc.createOffer();
                m.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void m.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState) return;
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : m.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const n3 = r3.track;
                await r3.replaceTrack(t3), n3 && this._sendStream.removeTrack(n3), t3 && this._sendStream.addTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const n3 = r3.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.setParameters(n3);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const n3 = r3.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  n3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.setParameters(n3);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3) throw new Error("associated RTCRtpSender not found");
                return t3.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                m.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % f.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [];
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: n4,
                    streamId: s3
                  } = t4;
                  m.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const i2 = r4;
                  this._remoteSdp.receive({
                    mid: i2,
                    kind: r4,
                    offerRtpParameters: n4,
                    streamId: s3 || n4.rtcp.cname,
                    trackId: e4
                  });
                }
                const r3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  r3
                ), await this._pc.setRemoteDescription(r3);
                let n3 = await this._pc.createAnswer();
                const s2 = a.parse(n3.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, n4 = e4, i2 = s2.media.find((e5) => String(e5.mid) === n4);
                  l.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: i2
                  });
                }
                n3 = { type: "answer", sdp: a.write(s2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: s2
                }), m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n3
                ), await this._pc.setLocalDescription(n3);
                for (const r4 of e3) {
                  const { kind: e4, trackId: n4, rtpParameters: s3 } = r4, i2 = n4, a2 = e4, o2 = this._pc.getReceivers().find((e5) => e5.track && e5.track.id === i2);
                  if (!o2) throw new Error("new RTCRtpReceiver not");
                  this._mapRecvLocalIdInfo.set(i2, {
                    mid: a2,
                    rtpParameters: s3,
                    rtpReceiver: o2
                  }), t3.push({ localId: i2, track: o2.track, rtpReceiver: o2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  m.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                m.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const { rtpReceiver: t3 } = this._mapRecvLocalIdInfo.get(e3) || {};
                if (!t3) throw new Error("associated RTCRtpReceiver not found");
                return t3.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmitTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                m.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome67 = g;
          },
          8274: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Logger = void 0;
            const n2 = r2(7833), s = "awaitqueue";
            t2.Logger = class {
              constructor(e3) {
                __publicField(this, "_debug");
                __publicField(this, "_warn");
                __publicField(this, "_error");
                e3 ? (this._debug = n2(`${s}:${e3}`), this._warn = n2(`${s}:WARN:${e3}`), this._error = n2(`${s}:ERROR:${e3}`)) : (this._debug = n2(s), this._warn = n2(`${s}:WARN`), this._error = n2(`${s}:ERROR`)), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              get debug() {
                return this._debug;
              }
              get warn() {
                return this._warn;
              }
              get error() {
                return this._error;
              }
            };
          },
          8278: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { Ag: () => a, Wm: () => o, sn: () => c, tr: () => l });
            var n2 = r2(467), s = r2(4756), i = r2.n(s);
            r2(1806);
            function a() {
              return void 0 !== window.RTCRtpSender && void 0 !== window.RTCRtpSender.prototype.createEncodedStreams || o();
            }
            function o() {
              return void 0 !== window.RTCRtpScriptTransform;
            }
            function c(e3) {
              return d.apply(this, arguments);
            }
            function d() {
              return (d = (0, n2.A)(
                i().mark(function e3(t3) {
                  var r3, n3;
                  return i().wrap(function(e4) {
                    for (; ; )
                      switch (e4.prev = e4.next) {
                        case 0:
                          return r3 = new TextEncoder(), e4.next = 3, crypto.subtle.importKey(
                            "raw",
                            r3.encode(t3),
                            { name: "PBKDF2" },
                            false,
                            ["deriveBits", "deriveKey"]
                          );
                        case 3:
                          return n3 = e4.sent, e4.abrupt("return", n3);
                        case 5:
                        case "end":
                          return e4.stop();
                      }
                  }, e3);
                })
              )).apply(this, arguments);
            }
            function l(e3) {
              return u.apply(this, arguments);
            }
            function u() {
              return (u = (0, n2.A)(
                i().mark(function e3(t3) {
                  var r3;
                  return i().wrap(function(e4) {
                    for (; ; )
                      switch (e4.prev = e4.next) {
                        case 0:
                          return e4.next = 2, crypto.subtle.importKey("raw", t3, "HKDF", false, [
                            "deriveBits",
                            "deriveKey"
                          ]);
                        case 2:
                          return r3 = e4.sent, e4.abrupt("return", r3);
                        case 4:
                        case "end":
                          return e4.stop();
                      }
                  }, e3);
                })
              )).apply(this, arguments);
            }
          },
          8454: function(e2, t2, r2) {
            var n2, s;
            e2.exports = (s = r2(9021), r2(7165), s.mode.ECB = ((n2 = s.lib.BlockCipherMode.extend()).Encryptor = n2.extend({
              processBlock: function(e3, t3) {
                this._cipher.encryptBlock(e3, t3);
              }
            }), n2.Decryptor = n2.extend({
              processBlock: function(e3, t3) {
                this._cipher.decryptBlock(e3, t3);
              }
            }), n2), s.mode.ECB);
          },
          8624: (e2, t2, r2) => {
            "use strict";
            r2.r(t2), r2.d(t2, {
              DOMException: () => w,
              Headers: () => l,
              Request: () => v,
              Response: () => y,
              fetch: () => S
            });
            var n2 = "undefined" != typeof globalThis && globalThis || "undefined" != typeof self && self || void 0 !== r2.g && r2.g || {}, s = {
              searchParams: "URLSearchParams" in n2,
              iterable: "Symbol" in n2 && "iterator" in Symbol,
              blob: "FileReader" in n2 && "Blob" in n2 && function() {
                try {
                  return new Blob(), true;
                } catch (e3) {
                  return false;
                }
              }(),
              formData: "FormData" in n2,
              arrayBuffer: "ArrayBuffer" in n2
            };
            if (s.arrayBuffer)
              var i = [
                "[object Int8Array]",
                "[object Uint8Array]",
                "[object Uint8ClampedArray]",
                "[object Int16Array]",
                "[object Uint16Array]",
                "[object Int32Array]",
                "[object Uint32Array]",
                "[object Float32Array]",
                "[object Float64Array]"
              ], a = ArrayBuffer.isView || function(e3) {
                return e3 && i.indexOf(Object.prototype.toString.call(e3)) > -1;
              };
            function o(e3) {
              if ("string" != typeof e3 && (e3 = String(e3)), /[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e3) || "" === e3)
                throw new TypeError(
                  'Invalid character in header field name: "' + e3 + '"'
                );
              return e3.toLowerCase();
            }
            function c(e3) {
              return "string" != typeof e3 && (e3 = String(e3)), e3;
            }
            function d(e3) {
              var t3 = {
                next: function() {
                  var t4 = e3.shift();
                  return { done: void 0 === t4, value: t4 };
                }
              };
              return s.iterable && (t3[Symbol.iterator] = function() {
                return t3;
              }), t3;
            }
            function l(e3) {
              this.map = {}, e3 instanceof l ? e3.forEach(function(e4, t3) {
                this.append(t3, e4);
              }, this) : Array.isArray(e3) ? e3.forEach(function(e4) {
                if (2 != e4.length)
                  throw new TypeError(
                    "Headers constructor: expected name/value pair to be length 2, found" + e4.length
                  );
                this.append(e4[0], e4[1]);
              }, this) : e3 && Object.getOwnPropertyNames(e3).forEach(function(t3) {
                this.append(t3, e3[t3]);
              }, this);
            }
            function u(e3) {
              if (!e3._noBody)
                return e3.bodyUsed ? Promise.reject(new TypeError("Already read")) : void (e3.bodyUsed = true);
            }
            function p(e3) {
              return new Promise(function(t3, r3) {
                e3.onload = function() {
                  t3(e3.result);
                }, e3.onerror = function() {
                  r3(e3.error);
                };
              });
            }
            function h(e3) {
              var t3 = new FileReader(), r3 = p(t3);
              return t3.readAsArrayBuffer(e3), r3;
            }
            function m(e3) {
              if (e3.slice) return e3.slice(0);
              var t3 = new Uint8Array(e3.byteLength);
              return t3.set(new Uint8Array(e3)), t3.buffer;
            }
            function f() {
              return this.bodyUsed = false, this._initBody = function(e3) {
                var t3;
                this.bodyUsed = this.bodyUsed, this._bodyInit = e3, e3 ? "string" == typeof e3 ? this._bodyText = e3 : s.blob && Blob.prototype.isPrototypeOf(e3) ? this._bodyBlob = e3 : s.formData && FormData.prototype.isPrototypeOf(e3) ? this._bodyFormData = e3 : s.searchParams && URLSearchParams.prototype.isPrototypeOf(e3) ? this._bodyText = e3.toString() : s.arrayBuffer && s.blob && (t3 = e3) && DataView.prototype.isPrototypeOf(t3) ? (this._bodyArrayBuffer = m(e3.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : s.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(e3) || a(e3)) ? this._bodyArrayBuffer = m(e3) : this._bodyText = e3 = Object.prototype.toString.call(e3) : (this._noBody = true, this._bodyText = ""), this.headers.get("content-type") || ("string" == typeof e3 ? this.headers.set(
                  "content-type",
                  "text/plain;charset=UTF-8"
                ) : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : s.searchParams && URLSearchParams.prototype.isPrototypeOf(e3) && this.headers.set(
                  "content-type",
                  "application/x-www-form-urlencoded;charset=UTF-8"
                ));
              }, s.blob && (this.blob = function() {
                var e3 = u(this);
                if (e3) return e3;
                if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                if (this._bodyArrayBuffer)
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as blob");
                return Promise.resolve(new Blob([this._bodyText]));
              }), this.arrayBuffer = function() {
                if (this._bodyArrayBuffer) {
                  var e3 = u(this);
                  return e3 || (ArrayBuffer.isView(this._bodyArrayBuffer) ? Promise.resolve(
                    this._bodyArrayBuffer.buffer.slice(
                      this._bodyArrayBuffer.byteOffset,
                      this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                    )
                  ) : Promise.resolve(this._bodyArrayBuffer));
                }
                if (s.blob) return this.blob().then(h);
                throw new Error("could not read as ArrayBuffer");
              }, this.text = function() {
                var e3, t3, r3, n3, s2, i2 = u(this);
                if (i2) return i2;
                if (this._bodyBlob)
                  return e3 = this._bodyBlob, t3 = new FileReader(), r3 = p(t3), n3 = /charset=([A-Za-z0-9_-]+)/.exec(e3.type), s2 = n3 ? n3[1] : "utf-8", t3.readAsText(e3, s2), r3;
                if (this._bodyArrayBuffer)
                  return Promise.resolve(
                    function(e4) {
                      for (var t4 = new Uint8Array(e4), r4 = new Array(t4.length), n4 = 0; n4 < t4.length; n4++)
                        r4[n4] = String.fromCharCode(t4[n4]);
                      return r4.join("");
                    }(this._bodyArrayBuffer)
                  );
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as text");
                return Promise.resolve(this._bodyText);
              }, s.formData && (this.formData = function() {
                return this.text().then(_);
              }), this.json = function() {
                return this.text().then(JSON.parse);
              }, this;
            }
            l.prototype.append = function(e3, t3) {
              e3 = o(e3), t3 = c(t3);
              var r3 = this.map[e3];
              this.map[e3] = r3 ? r3 + ", " + t3 : t3;
            }, l.prototype.delete = function(e3) {
              delete this.map[o(e3)];
            }, l.prototype.get = function(e3) {
              return e3 = o(e3), this.has(e3) ? this.map[e3] : null;
            }, l.prototype.has = function(e3) {
              return this.map.hasOwnProperty(o(e3));
            }, l.prototype.set = function(e3, t3) {
              this.map[o(e3)] = c(t3);
            }, l.prototype.forEach = function(e3, t3) {
              for (var r3 in this.map)
                this.map.hasOwnProperty(r3) && e3.call(t3, this.map[r3], r3, this);
            }, l.prototype.keys = function() {
              var e3 = [];
              return this.forEach(function(t3, r3) {
                e3.push(r3);
              }), d(e3);
            }, l.prototype.values = function() {
              var e3 = [];
              return this.forEach(function(t3) {
                e3.push(t3);
              }), d(e3);
            }, l.prototype.entries = function() {
              var e3 = [];
              return this.forEach(function(t3, r3) {
                e3.push([r3, t3]);
              }), d(e3);
            }, s.iterable && (l.prototype[Symbol.iterator] = l.prototype.entries);
            var g = [
              "CONNECT",
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT",
              "TRACE"
            ];
            function v(e3, t3) {
              if (!(this instanceof v))
                throw new TypeError(
                  'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
                );
              var r3, s2, i2 = (t3 = t3 || {}).body;
              if (e3 instanceof v) {
                if (e3.bodyUsed) throw new TypeError("Already read");
                this.url = e3.url, this.credentials = e3.credentials, t3.headers || (this.headers = new l(e3.headers)), this.method = e3.method, this.mode = e3.mode, this.signal = e3.signal, i2 || null == e3._bodyInit || (i2 = e3._bodyInit, e3.bodyUsed = true);
              } else this.url = String(e3);
              if (this.credentials = t3.credentials || this.credentials || "same-origin", !t3.headers && this.headers || (this.headers = new l(t3.headers)), this.method = (r3 = t3.method || this.method || "GET", s2 = r3.toUpperCase(), g.indexOf(s2) > -1 ? s2 : r3), this.mode = t3.mode || this.mode || null, this.signal = t3.signal || this.signal || function() {
                if ("AbortController" in n2)
                  return new AbortController().signal;
              }(), this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && i2)
                throw new TypeError("Body not allowed for GET or HEAD requests");
              if (this._initBody(i2), !("GET" !== this.method && "HEAD" !== this.method || "no-store" !== t3.cache && "no-cache" !== t3.cache)) {
                var a2 = /([?&])_=[^&]*/;
                if (a2.test(this.url))
                  this.url = this.url.replace(a2, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
                else {
                  this.url += (/\?/.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
                }
              }
            }
            function _(e3) {
              var t3 = new FormData();
              return e3.trim().split("&").forEach(function(e4) {
                if (e4) {
                  var r3 = e4.split("="), n3 = r3.shift().replace(/\+/g, " "), s2 = r3.join("=").replace(/\+/g, " ");
                  t3.append(decodeURIComponent(n3), decodeURIComponent(s2));
                }
              }), t3;
            }
            function y(e3, t3) {
              if (!(this instanceof y))
                throw new TypeError(
                  'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
                );
              if (t3 || (t3 = {}), this.type = "default", this.status = void 0 === t3.status ? 200 : t3.status, this.status < 200 || this.status > 599)
                throw new RangeError(
                  "Failed to construct 'Response': The status provided (0) is outside the range [200, 599]."
                );
              this.ok = this.status >= 200 && this.status < 300, this.statusText = void 0 === t3.statusText ? "" : "" + t3.statusText, this.headers = new l(t3.headers), this.url = t3.url || "", this._initBody(e3);
            }
            v.prototype.clone = function() {
              return new v(this, { body: this._bodyInit });
            }, f.call(v.prototype), f.call(y.prototype), y.prototype.clone = function() {
              return new y(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new l(this.headers),
                url: this.url
              });
            }, y.error = function() {
              var e3 = new y(null, { status: 200, statusText: "" });
              return e3.ok = false, e3.status = 0, e3.type = "error", e3;
            };
            var b = [301, 302, 303, 307, 308];
            y.redirect = function(e3, t3) {
              if (-1 === b.indexOf(t3))
                throw new RangeError("Invalid status code");
              return new y(null, { status: t3, headers: { location: e3 } });
            };
            var w = n2.DOMException;
            try {
              new w();
            } catch (e3) {
              (w = function(e4, t3) {
                this.message = e4, this.name = t3;
                var r3 = Error(e4);
                this.stack = r3.stack;
              }).prototype = Object.create(Error.prototype), w.prototype.constructor = w;
            }
            function S(e3, t3) {
              return new Promise(function(r3, i2) {
                var a2 = new v(e3, t3);
                if (a2.signal && a2.signal.aborted)
                  return i2(new w("Aborted", "AbortError"));
                var d2 = new XMLHttpRequest();
                function u2() {
                  d2.abort();
                }
                if (d2.onload = function() {
                  var e4, t4, n3 = {
                    statusText: d2.statusText,
                    headers: (e4 = d2.getAllResponseHeaders() || "", t4 = new l(), e4.replace(/\r?\n[\t ]+/g, " ").split("\r").map(function(e5) {
                      return 0 === e5.indexOf("\n") ? e5.substr(1, e5.length) : e5;
                    }).forEach(function(e5) {
                      var r4 = e5.split(":"), n4 = r4.shift().trim();
                      if (n4) {
                        var s3 = r4.join(":").trim();
                        try {
                          t4.append(n4, s3);
                        } catch (e6) {
                          console.warn("Response " + e6.message);
                        }
                      }
                    }), t4)
                  };
                  0 === a2.url.indexOf("file://") && (d2.status < 200 || d2.status > 599) ? n3.status = 200 : n3.status = d2.status, n3.url = "responseURL" in d2 ? d2.responseURL : n3.headers.get("X-Request-URL");
                  var s2 = "response" in d2 ? d2.response : d2.responseText;
                  setTimeout(function() {
                    r3(new y(s2, n3));
                  }, 0);
                }, d2.onerror = function() {
                  setTimeout(function() {
                    i2(new TypeError("Network request failed"));
                  }, 0);
                }, d2.ontimeout = function() {
                  setTimeout(function() {
                    i2(new TypeError("Network request timed out"));
                  }, 0);
                }, d2.onabort = function() {
                  setTimeout(function() {
                    i2(new w("Aborted", "AbortError"));
                  }, 0);
                }, d2.open(
                  a2.method,
                  function(e4) {
                    try {
                      return "" === e4 && n2.location.href ? n2.location.href : e4;
                    } catch (t4) {
                      return e4;
                    }
                  }(a2.url),
                  true
                ), "include" === a2.credentials ? d2.withCredentials = true : "omit" === a2.credentials && (d2.withCredentials = false), "responseType" in d2 && (s.blob ? d2.responseType = "blob" : s.arrayBuffer && (d2.responseType = "arraybuffer")), t3 && "object" == typeof t3.headers && !(t3.headers instanceof l || n2.Headers && t3.headers instanceof n2.Headers)) {
                  var p2 = [];
                  Object.getOwnPropertyNames(t3.headers).forEach(function(e4) {
                    p2.push(o(e4)), d2.setRequestHeader(e4, c(t3.headers[e4]));
                  }), a2.headers.forEach(function(e4, t4) {
                    -1 === p2.indexOf(t4) && d2.setRequestHeader(t4, e4);
                  });
                } else
                  a2.headers.forEach(function(e4, t4) {
                    d2.setRequestHeader(t4, e4);
                  });
                a2.signal && (a2.signal.addEventListener("abort", u2), d2.onreadystatechange = function() {
                  4 === d2.readyState && a2.signal.removeEventListener("abort", u2);
                }), d2.send(void 0 === a2._bodyInit ? null : a2._bodyInit);
              });
            }
            S.polyfill = true, n2.fetch || (n2.fetch = S, n2.Headers = l, n2.Request = v, n2.Response = y);
          },
          8633: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Edge11 = void 0;
            const a = r2(2994), o = r2(4893), c = i(r2(1765)), d = i(r2(8046)), l = i(r2(8751)), u = r2(521), p = new a.Logger("Edge11");
            class h extends u.HandlerInterface {
              static createFactory() {
                return () => new h();
              }
              constructor() {
                super(), this._rtpSenders = /* @__PURE__ */ new Map(), this._rtpReceivers = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._transportReady = false;
              }
              get name() {
                return "Edge11";
              }
              close() {
                p.debug("close()");
                try {
                  this._iceGatherer.close();
                } catch (e3) {
                }
                try {
                  this._iceTransport.stop();
                } catch (e3) {
                }
                try {
                  this._dtlsTransport.stop();
                } catch (e3) {
                }
                for (const e3 of this._rtpSenders.values())
                  try {
                    e3.stop();
                  } catch (e4) {
                  }
                for (const e3 of this._rtpReceivers.values())
                  try {
                    e3.stop();
                  } catch (e4) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                return p.debug("getNativeRtpCapabilities()"), l.getCapabilities();
              }
              async getNativeSctpCapabilities() {
                return p.debug("getNativeSctpCapabilities()"), { numStreams: { OS: 0, MIS: 0 } };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: l2,
                extendedRtpCapabilities: u2
              }) {
                p.debug("run()"), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", u2),
                  video: d.getSendingRtpParameters("video", u2)
                }, this._remoteIceParameters = t3, this._remoteIceCandidates = r3, this._remoteDtlsParameters = n3, this._cname = `CNAME-${c.generateRandomNumber()}`, this.setIceGatherer({ iceServers: i2, iceTransportPolicy: a2 }), this.setIceTransport(), this.setDtlsTransport();
              }
              async updateIceServers(e3) {
                throw new o.UnsupportedError("not supported");
              }
              async restartIce(e3) {
                if (p.debug("restartIce()"), this._remoteIceParameters = e3, this._transportReady) {
                  p.debug("restartIce() | calling iceTransport.start()"), this._iceTransport.start(this._iceGatherer, e3, "controlling");
                  for (const e4 of this._remoteIceCandidates)
                    this._iceTransport.addRemoteCandidate(e4);
                  this._iceTransport.addRemoteCandidate({});
                }
              }
              async getTransportStats() {
                return this._iceTransport.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                p.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), this._transportReady || await this.setupTransport({ localDtlsRole: "server" }), p.debug("send() | calling new RTCRtpSender()");
                const s2 = new RTCRtpSender(e3, this._dtlsTransport), i2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                i2.codecs = d.reduceCodecs(i2.codecs, n3);
                const a2 = i2.codecs.some((e4) => /.+\/rtx$/i.test(e4.mimeType));
                t3 || (t3 = [{}]);
                for (const e4 of t3)
                  e4.ssrc = c.generateRandomNumber(), a2 && (e4.rtx = { ssrc: c.generateRandomNumber() });
                i2.encodings = t3, i2.rtcp = { cname: this._cname, reducedSize: true, mux: true };
                const o2 = l.mangleRtpParameters(i2);
                p.debug("send() | calling rtpSender.send() [params:%o]", o2), await s2.send(o2);
                const u2 = String(this._nextSendLocalId);
                return this._nextSendLocalId++, this._rtpSenders.set(u2, s2), { localId: u2, rtpParameters: i2, rtpSender: s2 };
              }
              async stopSending(e3) {
                p.debug("stopSending() [localId:%s]", e3);
                const t3 = this._rtpSenders.get(e3);
                if (!t3) throw new Error("RTCRtpSender not found");
                this._rtpSenders.delete(e3);
                try {
                  p.debug("stopSending() | calling rtpSender.stop()"), t3.stop();
                } catch (e4) {
                  throw p.warn("stopSending() | rtpSender.stop() failed:%o", e4), e4;
                }
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                t3 ? p.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : p.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._rtpSenders.get(e3);
                if (!r3) throw new Error("RTCRtpSender not found");
                r3.setTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                p.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._rtpSenders.get(e3);
                if (!r3) throw new Error("RTCRtpSender not found");
                const n3 = r3.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.setParameters(n3);
              }
              async setRtpEncodingParameters(e3, t3) {
                p.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._rtpSenders.get(e3);
                if (!r3) throw new Error("RTCRtpSender not found");
                const n3 = r3.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  n3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.setParameters(n3);
              }
              async getSenderStats(e3) {
                const t3 = this._rtpSenders.get(e3);
                if (!t3) throw new Error("RTCRtpSender not found");
                return t3.getStats();
              }
              async sendDataChannel(e3) {
                throw new o.UnsupportedError("not implemented");
              }
              async receive(e3) {
                const t3 = [];
                for (const t4 of e3) {
                  const { trackId: e4, kind: r3 } = t4;
                  p.debug("receive() [trackId:%s, kind:%s]", e4, r3);
                }
                this._transportReady || await this.setupTransport({ localDtlsRole: "server" });
                for (const r3 of e3) {
                  const { trackId: e4, kind: n3, rtpParameters: s2 } = r3;
                  p.debug("receive() | calling new RTCRtpReceiver()");
                  const i2 = new RTCRtpReceiver(this._dtlsTransport, n3);
                  i2.addEventListener("error", (e5) => {
                    p.error('rtpReceiver "error" event [event:%o]', e5);
                  });
                  const a2 = l.mangleRtpParameters(s2);
                  p.debug(
                    "receive() | calling rtpReceiver.receive() [params:%o]",
                    a2
                  ), await i2.receive(a2);
                  const o2 = e4;
                  this._rtpReceivers.set(o2, i2), t3.push({ localId: o2, track: i2.track, rtpReceiver: i2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                for (const t3 of e3) {
                  p.debug("stopReceiving() [localId:%s]", t3);
                  const e4 = this._rtpReceivers.get(t3);
                  if (!e4) throw new Error("RTCRtpReceiver not found");
                  this._rtpReceivers.delete(t3);
                  try {
                    p.debug("stopReceiving() | calling rtpReceiver.stop()"), e4.stop();
                  } catch (e5) {
                    p.warn("stopReceiving() | rtpReceiver.stop() failed:%o", e5);
                  }
                }
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                const t3 = this._rtpReceivers.get(e3);
                if (!t3) throw new Error("RTCRtpReceiver not found");
                return t3.getStats();
              }
              async receiveDataChannel(e3) {
                throw new o.UnsupportedError("not implemented");
              }
              setIceGatherer({ iceServers: e3, iceTransportPolicy: t3 }) {
                const r3 = new RTCIceGatherer({
                  iceServers: e3 || [],
                  gatherPolicy: t3 || "all"
                });
                r3.addEventListener("error", (e4) => {
                  p.error('iceGatherer "error" event [event:%o]', e4);
                });
                try {
                  r3.gather();
                } catch (e4) {
                  p.debug(
                    "setIceGatherer() | iceGatherer.gather() failed: %s",
                    e4.toString()
                  );
                }
                this._iceGatherer = r3;
              }
              setIceTransport() {
                const e3 = new RTCIceTransport(this._iceGatherer);
                e3.addEventListener("statechange", () => {
                  switch (e3.state) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                }), e3.addEventListener("icestatechange", () => {
                  switch (e3.state) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                }), e3.addEventListener("candidatepairchange", (e4) => {
                  p.debug(
                    'iceTransport "candidatepairchange" event [pair:%o]',
                    e4.pair
                  );
                }), this._iceTransport = e3;
              }
              setDtlsTransport() {
                const e3 = new RTCDtlsTransport(this._iceTransport);
                e3.addEventListener("statechange", () => {
                  p.debug(
                    'dtlsTransport "statechange" event [state:%s]',
                    e3.state
                  );
                }), e3.addEventListener("dtlsstatechange", () => {
                  p.debug(
                    'dtlsTransport "dtlsstatechange" event [state:%s]',
                    e3.state
                  ), "closed" === e3.state && this.emit("@connectionstatechange", "closed");
                }), e3.addEventListener("error", (e4) => {
                  p.error('dtlsTransport "error" event [event:%o]', e4);
                }), this._dtlsTransport = e3;
              }
              async setupTransport({ localDtlsRole: e3 }) {
                p.debug("setupTransport()");
                const t3 = this._dtlsTransport.getLocalParameters();
                t3.role = e3, await new Promise((e4, r3) => {
                  this.safeEmit("@connect", { dtlsParameters: t3 }, e4, r3);
                }), this._iceTransport.start(
                  this._iceGatherer,
                  this._remoteIceParameters,
                  "controlling"
                );
                for (const e4 of this._remoteIceCandidates)
                  this._iceTransport.addRemoteCandidate(e4);
                this._iceTransport.addRemoteCandidate({}), this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints.filter(
                  (e4) => "sha-256" === e4.algorithm || "sha-384" === e4.algorithm || "sha-512" === e4.algorithm
                ), this._dtlsTransport.start(this._remoteDtlsParameters), this._transportReady = true;
              }
            }
            t2.Edge11 = h;
          },
          8751: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.mangleRtpParameters = t2.getCapabilities = void 0;
            const a = i(r2(1765));
            t2.getCapabilities = function() {
              const e3 = RTCRtpReceiver.getCapabilities(), t3 = a.clone(e3);
              for (const e4 of t3.codecs ?? []) {
                if (e4.channels = e4.numChannels, delete e4.numChannels, e4.mimeType = e4.mimeType || `${e4.kind}/${e4.name}`, e4.parameters) {
                  const t4 = e4.parameters;
                  t4.apt && (t4.apt = Number(t4.apt)), t4["packetization-mode"] && (t4["packetization-mode"] = Number(t4["packetization-mode"]));
                }
                for (const t4 of e4.rtcpFeedback || [])
                  t4.parameter || (t4.parameter = "");
              }
              return t3;
            }, t2.mangleRtpParameters = function(e3) {
              const t3 = a.clone(e3);
              t3.mid && (t3.muxId = t3.mid, delete t3.mid);
              for (const e4 of t3.codecs)
                e4.channels && (e4.numChannels = e4.channels, delete e4.channels), e4.mimeType && !e4.name && (e4.name = e4.mimeType.split("/")[1]), delete e4.mimeType;
              return t3;
            };
          },
          8876: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.AwaitQueueRemovedTaskError = t2.AwaitQueueStoppedError = t2.AwaitQueue = void 0;
            var n2 = r2(9275);
            Object.defineProperty(t2, "AwaitQueue", {
              enumerable: true,
              get: function() {
                return n2.AwaitQueue;
              }
            });
            var s = r2(4253);
            Object.defineProperty(t2, "AwaitQueueStoppedError", {
              enumerable: true,
              get: function() {
                return s.AwaitQueueStoppedError;
              }
            }), Object.defineProperty(t2, "AwaitQueueRemovedTaskError", {
              enumerable: true,
              get: function() {
                return s.AwaitQueueRemovedTaskError;
              }
            });
          },
          9021: function(e2, t2, r2) {
            var n2;
            e2.exports = (n2 = n2 || function(e3, t3) {
              var n3;
              if ("undefined" != typeof window && window.crypto && (n3 = window.crypto), "undefined" != typeof self && self.crypto && (n3 = self.crypto), "undefined" != typeof globalThis && globalThis.crypto && (n3 = globalThis.crypto), !n3 && "undefined" != typeof window && window.msCrypto && (n3 = window.msCrypto), !n3 && void 0 !== r2.g && r2.g.crypto && (n3 = r2.g.crypto), !n3)
                try {
                  n3 = r2(477);
                } catch (e4) {
                }
              var s = function() {
                if (n3) {
                  if ("function" == typeof n3.getRandomValues)
                    try {
                      return n3.getRandomValues(new Uint32Array(1))[0];
                    } catch (e4) {
                    }
                  if ("function" == typeof n3.randomBytes)
                    try {
                      return n3.randomBytes(4).readInt32LE();
                    } catch (e4) {
                    }
                }
                throw new Error(
                  "Native crypto module could not be used to get secure random number."
                );
              }, i = Object.create || /* @__PURE__ */ function() {
                function e4() {
                }
                return function(t4) {
                  var r3;
                  return e4.prototype = t4, r3 = new e4(), e4.prototype = null, r3;
                };
              }(), a = {}, o = a.lib = {}, c = o.Base = {
                extend: function(e4) {
                  var t4 = i(this);
                  return e4 && t4.mixIn(e4), t4.hasOwnProperty("init") && this.init !== t4.init || (t4.init = function() {
                    t4.$super.init.apply(this, arguments);
                  }), t4.init.prototype = t4, t4.$super = this, t4;
                },
                create: function() {
                  var e4 = this.extend();
                  return e4.init.apply(e4, arguments), e4;
                },
                init: function() {
                },
                mixIn: function(e4) {
                  for (var t4 in e4) e4.hasOwnProperty(t4) && (this[t4] = e4[t4]);
                  e4.hasOwnProperty("toString") && (this.toString = e4.toString);
                },
                clone: function() {
                  return this.init.prototype.extend(this);
                }
              }, d = o.WordArray = c.extend({
                init: function(e4, r3) {
                  e4 = this.words = e4 || [], this.sigBytes = r3 != t3 ? r3 : 4 * e4.length;
                },
                toString: function(e4) {
                  return (e4 || u).stringify(this);
                },
                concat: function(e4) {
                  var t4 = this.words, r3 = e4.words, n4 = this.sigBytes, s2 = e4.sigBytes;
                  if (this.clamp(), n4 % 4)
                    for (var i2 = 0; i2 < s2; i2++) {
                      var a2 = r3[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                      t4[n4 + i2 >>> 2] |= a2 << 24 - (n4 + i2) % 4 * 8;
                    }
                  else
                    for (var o2 = 0; o2 < s2; o2 += 4)
                      t4[n4 + o2 >>> 2] = r3[o2 >>> 2];
                  return this.sigBytes += s2, this;
                },
                clamp: function() {
                  var t4 = this.words, r3 = this.sigBytes;
                  t4[r3 >>> 2] &= 4294967295 << 32 - r3 % 4 * 8, t4.length = e3.ceil(r3 / 4);
                },
                clone: function() {
                  var e4 = c.clone.call(this);
                  return e4.words = this.words.slice(0), e4;
                },
                random: function(e4) {
                  for (var t4 = [], r3 = 0; r3 < e4; r3 += 4) t4.push(s());
                  return new d.init(t4, e4);
                }
              }), l = a.enc = {}, u = l.Hex = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r3 = e4.sigBytes, n4 = [], s2 = 0; s2 < r3; s2++) {
                    var i2 = t4[s2 >>> 2] >>> 24 - s2 % 4 * 8 & 255;
                    n4.push((i2 >>> 4).toString(16)), n4.push((15 & i2).toString(16));
                  }
                  return n4.join("");
                },
                parse: function(e4) {
                  for (var t4 = e4.length, r3 = [], n4 = 0; n4 < t4; n4 += 2)
                    r3[n4 >>> 3] |= parseInt(e4.substr(n4, 2), 16) << 24 - n4 % 8 * 4;
                  return new d.init(r3, t4 / 2);
                }
              }, p = l.Latin1 = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r3 = e4.sigBytes, n4 = [], s2 = 0; s2 < r3; s2++) {
                    var i2 = t4[s2 >>> 2] >>> 24 - s2 % 4 * 8 & 255;
                    n4.push(String.fromCharCode(i2));
                  }
                  return n4.join("");
                },
                parse: function(e4) {
                  for (var t4 = e4.length, r3 = [], n4 = 0; n4 < t4; n4++)
                    r3[n4 >>> 2] |= (255 & e4.charCodeAt(n4)) << 24 - n4 % 4 * 8;
                  return new d.init(r3, t4);
                }
              }, h = l.Utf8 = {
                stringify: function(e4) {
                  try {
                    return decodeURIComponent(escape(p.stringify(e4)));
                  } catch (e5) {
                    throw new Error("Malformed UTF-8 data");
                  }
                },
                parse: function(e4) {
                  return p.parse(unescape(encodeURIComponent(e4)));
                }
              }, m = o.BufferedBlockAlgorithm = c.extend({
                reset: function() {
                  this._data = new d.init(), this._nDataBytes = 0;
                },
                _append: function(e4) {
                  "string" == typeof e4 && (e4 = h.parse(e4)), this._data.concat(e4), this._nDataBytes += e4.sigBytes;
                },
                _process: function(t4) {
                  var r3, n4 = this._data, s2 = n4.words, i2 = n4.sigBytes, a2 = this.blockSize, o2 = i2 / (4 * a2), c2 = (o2 = t4 ? e3.ceil(o2) : e3.max((0 | o2) - this._minBufferSize, 0)) * a2, l2 = e3.min(4 * c2, i2);
                  if (c2) {
                    for (var u2 = 0; u2 < c2; u2 += a2)
                      this._doProcessBlock(s2, u2);
                    r3 = s2.splice(0, c2), n4.sigBytes -= l2;
                  }
                  return new d.init(r3, l2);
                },
                clone: function() {
                  var e4 = c.clone.call(this);
                  return e4._data = this._data.clone(), e4;
                },
                _minBufferSize: 0
              }), f = (o.Hasher = m.extend({
                cfg: c.extend(),
                init: function(e4) {
                  this.cfg = this.cfg.extend(e4), this.reset();
                },
                reset: function() {
                  m.reset.call(this), this._doReset();
                },
                update: function(e4) {
                  return this._append(e4), this._process(), this;
                },
                finalize: function(e4) {
                  return e4 && this._append(e4), this._doFinalize();
                },
                blockSize: 16,
                _createHelper: function(e4) {
                  return function(t4, r3) {
                    return new e4.init(r3).finalize(t4);
                  };
                },
                _createHmacHelper: function(e4) {
                  return function(t4, r3) {
                    return new f.HMAC.init(e4, r3).finalize(t4);
                  };
                }
              }), a.algo = {});
              return a;
            }(Math), n2);
          },
          9027: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { $: () => n2 });
            var n2 = {
              networkPriorities: {
                audio: "high",
                dominatingVideo: "high",
                otherVideos: "medium",
                screenShare: "medium"
              },
              aspectRatios: {
                fourThree: { label: "fourThree", value: 1.333 },
                oneSixNine: { label: "oneSixNine", value: 1.777 }
              },
              audioProfiles: {
                speech_low_quality: {
                  sampleRate: 16e3,
                  bitRate: 24,
                  sampleSize: 16,
                  stereo: false,
                  dtx: true,
                  fec: true,
                  maxPlaybackRate: 16e3,
                  packetTime: 20,
                  autoGainControl: true,
                  echoCancellation: true,
                  noiseSuppression: true,
                  channelCount: 1
                },
                speech_standard: {
                  sampleRate: 32e3,
                  bitRate: 24,
                  sampleSize: 24,
                  stereo: false,
                  dtx: true,
                  fec: true,
                  maxPlaybackRate: 32e3,
                  packetTime: 30,
                  autoGainControl: true,
                  echoCancellation: true,
                  noiseSuppression: true,
                  channelCount: 1
                },
                music_standard: {
                  sampleRate: 48e3,
                  bitRate: 40,
                  sampleSize: 32,
                  stereo: false,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 40,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 1
                },
                standard_stereo: {
                  sampleRate: 48e3,
                  sampleSize: 32,
                  bitRate: 64,
                  stereo: true,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 40,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 2
                },
                high_quality: {
                  sampleRate: 48e3,
                  sampleSize: 32,
                  bitRate: 128,
                  stereo: false,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 60,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 1
                },
                high_quality_stereo: {
                  sampleRate: 48e3,
                  sampleSize: 32,
                  bitRate: 192,
                  stereo: true,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 60,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 2
                }
              },
              videoProfiles: {
                h90p_w160p: {
                  width: 160,
                  height: 90,
                  bitRate: 6e4,
                  frameRate: 15,
                  aspectRatio: "oneSixNine"
                },
                h180p_w320p: {
                  width: 320,
                  height: 180,
                  bitRate: 12e4,
                  frameRate: 15,
                  aspectRatio: "oneSixNine"
                },
                h216p_w384p: {
                  width: 384,
                  height: 216,
                  bitRate: 18e4,
                  frameRate: 15,
                  aspectRatio: "oneSixNine"
                },
                h360p_w640p: {
                  width: 640,
                  height: 360,
                  bitRate: 3e5,
                  frameRate: 20,
                  aspectRatio: "oneSixNine"
                },
                h540p_w960p: {
                  width: 960,
                  height: 540,
                  bitRate: 6e5,
                  frameRate: 25,
                  aspectRatio: "oneSixNine"
                },
                h720p_w1280p: {
                  width: 1280,
                  height: 720,
                  bitRate: 2e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h1080p_w1920p: {
                  width: 1920,
                  height: 1080,
                  bitRate: 3e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h1440p_w2560p: {
                  width: 2560,
                  height: 1440,
                  bitRate: 5e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h2160p_w3840p: {
                  width: 3840,
                  height: 2160,
                  bitRate: 8e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h120p_w160p: {
                  width: 160,
                  height: 120,
                  bitRate: 8e4,
                  frameRate: 15,
                  aspectRatio: "fourThree"
                },
                h180p_w240p: {
                  width: 240,
                  height: 180,
                  bitRate: 1e5,
                  frameRate: 15,
                  aspectRatio: "fourThree"
                },
                h240p_w320p: {
                  width: 320,
                  height: 240,
                  bitRate: 15e4,
                  frameRate: 15,
                  aspectRatio: "fourThree"
                },
                h360p_w480p: {
                  width: 480,
                  height: 360,
                  bitRate: 225e3,
                  frameRate: 20,
                  aspectRatio: "fourThree"
                },
                h480p_w640p: {
                  width: 640,
                  height: 480,
                  bitRate: 3e5,
                  frameRate: 25,
                  aspectRatio: "fourThree"
                },
                h540p_w720p: {
                  width: 720,
                  height: 540,
                  bitRate: 45e4,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                },
                h720p_w960p: {
                  width: 960,
                  height: 720,
                  bitRate: 15e5,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                },
                h1080p_w1440p: {
                  width: 1440,
                  height: 1080,
                  bitRate: 25e5,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                },
                h1440p_w1920p: {
                  width: 1920,
                  height: 1440,
                  bitRate: 35e5,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                }
              },
              screenShareProfiles: {
                h360p_30fps: {
                  resolution: { width: 640, height: 360 },
                  frameRate: 30,
                  bitrates: { high: 4e5, medium: 2e5, low: 1e5 }
                },
                h480p_15fps: {
                  resolution: { width: 854, height: 480 },
                  frameRate: 15,
                  bitrates: { high: 3e5, medium: 15e4, low: 75e3 }
                },
                h480p_30fps: {
                  resolution: { width: 854, height: 480 },
                  frameRate: 30,
                  bitrates: { high: 5e5, medium: 25e4, low: 125e3 }
                },
                h720p_5fps: {
                  resolution: { width: 1280, height: 720 },
                  frameRate: 5,
                  bitrates: { high: 4e5, medium: 2e5, low: 1e5 }
                },
                h720p_15fps: {
                  resolution: { width: 1280, height: 720 },
                  frameRate: 15,
                  bitrates: { high: 1e6, medium: 5e5, low: 25e4 }
                },
                h720p_30fps: {
                  resolution: { width: 1280, height: 720 },
                  frameRate: 30,
                  bitrates: { high: 15e5, medium: 75e4, low: 375e3 }
                },
                h1080p_15fps: {
                  resolution: { width: 1920, height: 1080 },
                  frameRate: 15,
                  bitrates: { high: 15e5, medium: 75e4, low: 3e5 }
                },
                h1080p_30fps: {
                  resolution: { width: 1920, height: 1080 },
                  frameRate: 30,
                  bitrates: { high: 2e6, medium: 1e6, low: 5e5 }
                }
              },
              simulcastProfiles: {
                3840: [
                  { scaleResolutionDownBy: 12, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 6, maxBitRate: 5e5 },
                  { scaleResolutionDownBy: 1, maxBitRate: 1e7 }
                ],
                1920: [
                  { scaleResolutionDownBy: 6, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 3, maxBitRate: 5e5 },
                  { scaleResolutionDownBy: 1, maxBitRate: 35e5 }
                ],
                1280: [
                  { scaleResolutionDownBy: 4, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 2, maxBitRate: 5e5 },
                  { scaleResolutionDownBy: 1, maxBitRate: 12e5 }
                ],
                640: [
                  { scaleResolutionDownBy: 2, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 1, maxBitRate: 5e5 }
                ],
                320: [{ scaleResolutionDownBy: 1, maxBitRate: 15e4 }]
              },
              requestTimeout: 2e4,
              requestRetries: 3,
              transportOptions: { tcp: true },
              videoKSVCEncodings: [{ scalabilityMode: "S3T3_KEY" }],
              videoSVCEncodings: [{ scalabilityMode: "S3T3", dtx: true }]
            };
          },
          9166: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.DataConsumer = void 0;
            const n2 = r2(2994), s = r2(2010), i = new n2.Logger("DataConsumer");
            class a extends s.EnhancedEventEmitter {
              constructor({
                id: e3,
                dataProducerId: t3,
                dataChannel: r3,
                sctpStreamParameters: n3,
                appData: a2
              }) {
                super(), this._closed = false, this._observer = new s.EnhancedEventEmitter(), i.debug("constructor()"), this._id = e3, this._dataProducerId = t3, this._dataChannel = r3, this._sctpStreamParameters = n3, this._appData = a2 || {}, this.handleDataChannel();
              }
              get id() {
                return this._id;
              }
              get dataProducerId() {
                return this._dataProducerId;
              }
              get closed() {
                return this._closed;
              }
              get sctpStreamParameters() {
                return this._sctpStreamParameters;
              }
              get readyState() {
                return this._dataChannel.readyState;
              }
              get label() {
                return this._dataChannel.label;
              }
              get protocol() {
                return this._dataChannel.protocol;
              }
              get binaryType() {
                return this._dataChannel.binaryType;
              }
              set binaryType(e3) {
                this._dataChannel.binaryType = e3;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (i.debug("close()"), this._closed = true, this._dataChannel.close(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (i.debug("transportClosed()"), this._closed = true, this._dataChannel.close(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              handleDataChannel() {
                this._dataChannel.addEventListener("open", () => {
                  this._closed || (i.debug('DataChannel "open" event'), this.safeEmit("open"));
                }), this._dataChannel.addEventListener("error", (e3) => {
                  if (this._closed) return;
                  let { error: t3 } = e3;
                  t3 || (t3 = new Error("unknown DataChannel error")), "sctp-failure" === t3.errorDetail ? i.error(
                    "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                    t3.sctpCauseCode,
                    t3.message
                  ) : i.error('DataChannel "error" event: %o', t3), this.safeEmit("error", t3);
                }), this._dataChannel.addEventListener("close", () => {
                  this._closed || (i.warn('DataChannel "close" event'), this._closed = true, this.emit("@close"), this.safeEmit("close"), this._observer.safeEmit("close"));
                }), this._dataChannel.addEventListener("message", (e3) => {
                  this._closed || this.safeEmit("message", e3.data);
                });
              }
            }
            t2.DataConsumer = a;
          },
          9275: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.AwaitQueue = void 0;
            const n2 = r2(8274), s = r2(4253), i = new n2.Logger("AwaitQueue");
            t2.AwaitQueue = class {
              constructor() {
                __publicField(this, "pendingTasks", /* @__PURE__ */ new Map());
                __publicField(this, "nextTaskId", 0);
                __publicField(this, "stopping", false);
                i.debug("constructor()");
              }
              get size() {
                return this.pendingTasks.size;
              }
              async push(e3, t3) {
                if (t3 = t3 ?? e3.name, i.debug(`push() [name:${t3}]`), "function" != typeof e3)
                  throw new TypeError("given task is not a function");
                if (t3)
                  try {
                    Object.defineProperty(e3, "name", { value: t3 });
                  } catch (e4) {
                  }
                return new Promise((r3, n3) => {
                  const s2 = {
                    id: this.nextTaskId++,
                    task: e3,
                    name: t3,
                    enqueuedAt: Date.now(),
                    executedAt: void 0,
                    completed: false,
                    resolve: (e4) => {
                      if (s2.completed) return;
                      s2.completed = true, this.pendingTasks.delete(s2.id), i.debug(`resolving task [name:${s2.name}]`), r3(e4);
                      const [t4] = this.pendingTasks.values();
                      t4 && !t4.executedAt && this.execute(t4);
                    },
                    reject: (e4) => {
                      if (!s2.completed && (s2.completed = true, this.pendingTasks.delete(s2.id), i.debug(`rejecting task [name:${s2.name}]: %s`, String(e4)), n3(e4), !this.stopping)) {
                        const [e5] = this.pendingTasks.values();
                        e5 && !e5.executedAt && this.execute(e5);
                      }
                    }
                  };
                  this.pendingTasks.set(s2.id, s2), 1 === this.pendingTasks.size && this.execute(s2);
                });
              }
              stop() {
                i.debug("stop()"), this.stopping = true;
                for (const e3 of this.pendingTasks.values())
                  i.debug(`stop() | stopping task [name:${e3.name}]`), e3.reject(new s.AwaitQueueStoppedError());
                this.stopping = false;
              }
              remove(e3) {
                i.debug(`remove() [taskIdx:${e3}]`);
                const t3 = Array.from(this.pendingTasks.values())[e3];
                t3 ? t3.reject(new s.AwaitQueueRemovedTaskError()) : i.debug(`stop() | no task with given idx [taskIdx:${e3}]`);
              }
              dump() {
                const e3 = Date.now();
                let t3 = 0;
                return Array.from(this.pendingTasks.values()).map((r3) => ({
                  idx: t3++,
                  task: r3.task,
                  name: r3.name,
                  enqueuedTime: r3.executedAt ? r3.executedAt - r3.enqueuedAt : e3 - r3.enqueuedAt,
                  executionTime: r3.executedAt ? e3 - r3.executedAt : 0
                }));
              }
              async execute(e3) {
                if (i.debug(`execute() [name:${e3.name}]`), e3.executedAt)
                  throw new Error("task already being executed");
                e3.executedAt = Date.now();
                try {
                  const t3 = await e3.task();
                  e3.resolve(t3);
                } catch (t3) {
                  e3.reject(t3);
                }
              }
            };
          },
          9352: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.ReactNative = void 0;
            const a = i(r2(7363)), o = r2(2994), c = r2(4893), d = i(r2(1765)), l = i(r2(8046)), u = i(r2(5544)), p = i(r2(4496)), h = r2(521), m = r2(1305), f = new o.Logger("ReactNative"), g = { OS: 1024, MIS: 1024 };
            class v extends h.HandlerInterface {
              static createFactory() {
                return () => new v();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdTrack = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "ReactNative";
              }
              close() {
                if (f.debug("close()"), this._sendStream.release(false), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                f.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = a.parse(t3.sdp);
                  return u.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                f.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d2),
                  video: l.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d2),
                  video: l.getSendingRemoteRtpParameters("video", d2)
                }, n3.role && "auto" !== n3.role && (this._forcedLocalDtlsRole = "server" === n3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (f.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                f.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (f.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                this.assertSendDirection(), f.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), n3 && f.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addStream(this._sendStream);
                let s2, i2 = await this._pc.createOffer(), o2 = a.parse(i2.sdp);
                const c2 = d.clone(this._sendingRtpParametersByKind[e3.kind]);
                c2.codecs = l.reduceCodecs(c2.codecs);
                const h2 = d.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                if (h2.codecs = l.reduceCodecs(h2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: o2
                }), "video" === e3.kind && t3 && t3.length > 1 && (f.debug("send() | enabling simulcast"), o2 = a.parse(i2.sdp), s2 = o2.media.find((e4) => "video" === e4.type), p.addLegacySimulcast({
                  offerMediaObject: s2,
                  track: e3,
                  numStreams: t3.length
                }), i2 = { type: "offer", sdp: a.write(o2) }), f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  i2
                ), await this._pc.setLocalDescription(i2), o2 = a.parse(this._pc.localDescription.sdp), s2 = o2.media.find((t4) => t4.type === e3.kind), c2.rtcp.cname = u.getCname({ offerMediaObject: s2 }), c2.encodings = p.getRtpEncodings({
                  offerMediaObject: s2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < c2.encodings.length; ++e4)
                    t3[e4] && Object.assign(c2.encodings[e4], t3[e4]);
                if (c2.encodings.length > 1 && ("video/vp8" === c2.codecs[0].mimeType.toLowerCase() || "video/h264" === c2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of c2.encodings) e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: s2,
                  offerRtpParameters: c2,
                  answerRtpParameters: h2,
                  codecOptions: r3
                });
                const m2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  m2
                ), await this._pc.setRemoteDescription(m2);
                const g2 = String(this._nextSendLocalId);
                return this._nextSendLocalId++, this._mapSendLocalIdTrack.set(g2, e3), { localId: g2, rtpParameters: c2 };
              }
              async stopSending(e3) {
                this.assertSendDirection(), f.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapSendLocalIdTrack.get(e3);
                if (!t3) throw new Error("track not found");
                this._mapSendLocalIdTrack.delete(e3), this._sendStream.removeTrack(t3), this._pc.addStream(this._sendStream);
                const r3 = await this._pc.createOffer();
                f.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void f.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState) return;
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async setMaxSpatialLayer(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async setRtpEncodingParameters(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async getSenderStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                f.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const { trackId: e4, kind: n4, rtpParameters: s3 } = t4;
                  f.debug("receive() [trackId:%s, kind:%s]", e4, n4);
                  const i3 = n4;
                  let a2 = t4.streamId || s3.rtcp.cname;
                  f.debug(
                    "receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc"
                  ), a2 += `-hack-${d.generateRandomNumber()}`, r3.set(e4, a2), this._remoteSdp.receive({
                    mid: i3,
                    kind: n4,
                    offerRtpParameters: s3,
                    streamId: a2,
                    trackId: e4
                  });
                }
                const n3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
                let s2 = await this._pc.createAnswer();
                const i2 = a.parse(s2.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, n4 = e4, s3 = i2.media.find((e5) => String(e5.mid) === n4);
                  u.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: s3
                  });
                }
                s2 = { type: "answer", sdp: a.write(i2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: i2
                }), f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2);
                for (const n4 of e3) {
                  const { kind: e4, trackId: s3, rtpParameters: i3 } = n4, a2 = s3, o2 = e4, c2 = r3.get(s3), d2 = this._pc.getRemoteStreams().find((e5) => e5.id === c2).getTrackById(a2);
                  if (!d2) throw new Error("remote track not found");
                  this._mapRecvLocalIdInfo.set(a2, { mid: o2, rtpParameters: i3 }), t3.push({ localId: a2, track: d2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  f.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                f.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmitTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                f.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = u.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.ReactNative = v;
          },
          9506: function(e2, t2, r2) {
            var n2, s, i, a, o, c, d, l;
            e2.exports = (l = r2(9021), r2(5471), r2(1025), s = (n2 = l).lib, i = s.Base, a = s.WordArray, o = n2.algo, c = o.MD5, d = o.EvpKDF = i.extend({
              cfg: i.extend({ keySize: 4, hasher: c, iterations: 1 }),
              init: function(e3) {
                this.cfg = this.cfg.extend(e3);
              },
              compute: function(e3, t3) {
                for (var r3, n3 = this.cfg, s2 = n3.hasher.create(), i2 = a.create(), o2 = i2.words, c2 = n3.keySize, d2 = n3.iterations; o2.length < c2; ) {
                  r3 && s2.update(r3), r3 = s2.update(e3).finalize(t3), s2.reset();
                  for (var l2 = 1; l2 < d2; l2++) r3 = s2.finalize(r3), s2.reset();
                  i2.concat(r3);
                }
                return i2.sigBytes = 4 * c2, i2;
              }
            }), n2.EvpKDF = function(e3, t3, r3) {
              return d.create(r3).compute(e3, t3);
            }, l.EvpKDF);
          },
          9557: function(e2, t2, r2) {
            var n2, s, i, a, o, c, d, l;
            e2.exports = (l = r2(9021), r2(3240), r2(1380), s = (n2 = l).x64, i = s.Word, a = s.WordArray, o = n2.algo, c = o.SHA512, d = o.SHA384 = c.extend({
              _doReset: function() {
                this._hash = new a.init([
                  new i.init(3418070365, 3238371032),
                  new i.init(1654270250, 914150663),
                  new i.init(2438529370, 812702999),
                  new i.init(355462360, 4144912697),
                  new i.init(1731405415, 4290775857),
                  new i.init(2394180231, 1750603025),
                  new i.init(3675008525, 1694076839),
                  new i.init(1203062813, 3204075428)
                ]);
              },
              _doFinalize: function() {
                var e3 = c._doFinalize.call(this);
                return e3.sigBytes -= 16, e3;
              }
            }), n2.SHA384 = c._createHelper(d), n2.HmacSHA384 = c._createHmacHelper(d), l.SHA384);
          },
          9596: (e2, t2, r2) => {
            let n2;
            e2.exports = "function" == typeof queueMicrotask ? queueMicrotask.bind("undefined" != typeof window ? window : r2.g) : (e3) => (n2 || (n2 = Promise.resolve())).then(e3).catch(
              (e4) => setTimeout(() => {
                throw e4;
              }, 0)
            );
          },
          9633: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { l: () => v });
            var n2 = r2(467), s = r2(3029), i = r2(2901), a = r2(388), o = r2(3954), c = r2(5501), d = r2(4756), l = r2.n(d), u = r2(7007), p = r2(1806), h = r2(6746), m = r2(8278);
            function f(e3, t3, r3) {
              return t3 = (0, o.A)(t3), (0, a.A)(
                e3,
                g() ? Reflect.construct(t3, r3 || [], (0, o.A)(e3).constructor) : t3.apply(e3, r3)
              );
            }
            function g() {
              try {
                var e3 = !Boolean.prototype.valueOf.call(
                  Reflect.construct(Boolean, [], function() {
                  })
                );
              } catch (e4) {
              }
              return (g = function() {
                return !!e3;
              })();
            }
            var v = function(e3) {
              function t3() {
                var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                return (0, s.A)(this, t3), f(this, t3, [
                  Object.assign(Object.assign({}, e4), {
                    sharedKey: true,
                    ratchetWindowSize: 0,
                    failureTolerance: -1
                  })
                ]);
              }
              return (0, c.A)(t3, e3), (0, i.A)(t3, [
                {
                  key: "setSharedKey",
                  value: (r3 = (0, n2.A)(
                    l().mark(function e4(t4) {
                      var r4;
                      return l().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if ("string" != typeof t4) {
                                  e5.next = 6;
                                  break;
                                }
                                return e5.next = 3, (0, m.sn)(t4);
                              case 3:
                                e5.t0 = e5.sent, e5.next = 9;
                                break;
                              case 6:
                                return e5.next = 8, (0, m.tr)(t4);
                              case 8:
                                e5.t0 = e5.sent;
                              case 9:
                                r4 = e5.t0, this.onSetEncryptionKey(r4);
                              case 11:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function(e4) {
                    return r3.apply(this, arguments);
                  })
                }
              ]);
              var r3;
            }(
              function(e3) {
                function t3() {
                  var e4, r3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                  return (0, s.A)(this, t3), (e4 = f(this, t3)).onKeyRatcheted = function(e5, t4) {
                    console.debug("key ratcheted event received", {
                      material: e5,
                      keyIndex: t4
                    });
                  }, e4.keyInfoMap = /* @__PURE__ */ new Map(), e4.options = Object.assign(Object.assign({}, p.T4), r3), e4.on(h.fo.KeyRatcheted, e4.onKeyRatcheted), e4;
                }
                return (0, c.A)(t3, e3), (0, i.A)(t3, [
                  {
                    key: "onSetEncryptionKey",
                    value: function(e4, t4, r3) {
                      var n3 = { key: e4, participantIdentity: t4, keyIndex: r3 };
                      if (!this.options.sharedKey && !t4)
                        throw new Error(
                          "participant identity needs to be passed for encryption key if sharedKey option is false"
                        );
                      this.keyInfoMap.set(
                        "".concat(null != t4 ? t4 : "shared", "-").concat(null != r3 ? r3 : 0),
                        n3
                      ), this.emit(h.fo.SetKey, n3);
                    }
                  },
                  {
                    key: "getKeys",
                    value: function() {
                      return Array.from(this.keyInfoMap.values());
                    }
                  },
                  {
                    key: "getOptions",
                    value: function() {
                      return this.options;
                    }
                  },
                  {
                    key: "ratchetKey",
                    value: function(e4, t4) {
                      this.emit(h.fo.RatchetRequest, e4, t4);
                    }
                  }
                ]);
              }(u.EventEmitter)
            );
          },
          9676: function(e2, t2, r2) {
            "use strict";
            var n2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3);
              var s2 = Object.getOwnPropertyDescriptor(t3, r3);
              s2 && !("get" in s2 ? !t3.__esModule : s2.writable || s2.configurable) || (s2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n3, s2);
            } : function(e3, t3, r3, n3) {
              void 0 === n3 && (n3 = r3), e3[n3] = t3[r3];
            }), s = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(t3, e3, r3);
              return s(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Safari11 = void 0;
            const a = i(r2(7363)), o = r2(2994), c = i(r2(1765)), d = i(r2(8046)), l = i(r2(5544)), u = i(r2(4496)), p = r2(521), h = r2(1305), m = new o.Logger("Safari11"), f = { OS: 1024, MIS: 1024 };
            class g extends p.HandlerInterface {
              static createFactory() {
                return () => new g();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdRtpSender = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Safari11";
              }
              close() {
                if (m.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                m.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = a.parse(t3.sdp);
                  return l.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n3,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: a2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                m.debug("run()"), this._direction = e3, this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n3,
                  sctpParameters: s2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, n3.role && "auto" !== n3.role && (this._forcedLocalDtlsRole = "server" === n3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: a2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (m.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                m.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (m.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n3 }) {
                this.assertSendDirection(), m.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), n3 && m.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addTrack(e3, this._sendStream);
                let s2, i2 = await this._pc.createOffer(), o2 = a.parse(i2.sdp);
                const p2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                p2.codecs = d.reduceCodecs(p2.codecs);
                const h2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                if (h2.codecs = d.reduceCodecs(h2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: o2
                }), "video" === e3.kind && t3 && t3.length > 1 && (m.debug("send() | enabling simulcast"), o2 = a.parse(i2.sdp), s2 = o2.media.find((e4) => "video" === e4.type), u.addLegacySimulcast({
                  offerMediaObject: s2,
                  track: e3,
                  numStreams: t3.length
                }), i2 = { type: "offer", sdp: a.write(o2) }), m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  i2
                ), await this._pc.setLocalDescription(i2), o2 = a.parse(this._pc.localDescription.sdp), s2 = o2.media.find((t4) => t4.type === e3.kind), p2.rtcp.cname = l.getCname({ offerMediaObject: s2 }), p2.encodings = u.getRtpEncodings({
                  offerMediaObject: s2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < p2.encodings.length; ++e4)
                    t3[e4] && Object.assign(p2.encodings[e4], t3[e4]);
                if (p2.encodings.length > 1 && "video/vp8" === p2.codecs[0].mimeType.toLowerCase())
                  for (const e4 of p2.encodings) e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: s2,
                  offerRtpParameters: p2,
                  answerRtpParameters: h2,
                  codecOptions: r3
                });
                const f2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  f2
                ), await this._pc.setRemoteDescription(f2);
                const g2 = String(this._nextSendLocalId);
                this._nextSendLocalId++;
                const v = this._pc.getSenders().find((t4) => t4.track === e3);
                return this._mapSendLocalIdRtpSender.set(g2, v), { localId: g2, rtpParameters: p2, rtpSender: v };
              }
              async stopSending(e3) {
                this.assertSendDirection();
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3) throw new Error("associated RTCRtpSender not found");
                t3.track && this._sendStream.removeTrack(t3.track), this._mapSendLocalIdRtpSender.delete(e3);
                const r3 = await this._pc.createOffer();
                m.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void m.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState) return;
                const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n3
                ), await this._pc.setRemoteDescription(n3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : m.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const n3 = r3.track;
                await r3.replaceTrack(t3), n3 && this._sendStream.removeTrack(n3), t3 && this._sendStream.addTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const n3 = r3.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.setParameters(n3);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const n3 = r3.getParameters();
                n3.encodings.forEach((e4, r4) => {
                  n3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.setParameters(n3);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3) throw new Error("associated RTCRtpSender not found");
                return t3.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n3,
                protocol: s2
              }) {
                this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: s2
                };
                m.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n3, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % f.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = a.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n4
                  ), await this._pc.setRemoteDescription(n4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [];
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: n4,
                    streamId: s3
                  } = t4;
                  m.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const i2 = r4;
                  this._remoteSdp.receive({
                    mid: i2,
                    kind: r4,
                    offerRtpParameters: n4,
                    streamId: s3 || n4.rtcp.cname,
                    trackId: e4
                  });
                }
                const r3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  r3
                ), await this._pc.setRemoteDescription(r3);
                let n3 = await this._pc.createAnswer();
                const s2 = a.parse(n3.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, n4 = e4, i2 = s2.media.find((e5) => String(e5.mid) === n4);
                  l.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: i2
                  });
                }
                n3 = { type: "answer", sdp: a.write(s2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: s2
                }), m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n3
                ), await this._pc.setLocalDescription(n3);
                for (const r4 of e3) {
                  const { kind: e4, trackId: n4, rtpParameters: s3 } = r4, i2 = e4, a2 = n4, o2 = this._pc.getReceivers().find((e5) => e5.track && e5.track.id === a2);
                  if (!o2) throw new Error("new RTCRtpReceiver not");
                  this._mapRecvLocalIdInfo.set(a2, {
                    mid: i2,
                    rtpParameters: s3,
                    rtpReceiver: o2
                  }), t3.push({ localId: a2, track: o2.track, rtpReceiver: o2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  m.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                m.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const { rtpReceiver: t3 } = this._mapRecvLocalIdInfo.get(e3) || {};
                if (!t3) throw new Error("associated RTCRtpReceiver not found");
                return t3.getStats();
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n3,
                  ordered: s2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                m.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = a.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = a.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Safari11 = g;
          },
          9792: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Producer = void 0;
            const n2 = r2(2994), s = r2(2010), i = r2(4893), a = new n2.Logger("Producer");
            class o extends s.EnhancedEventEmitter {
              constructor({
                id: e3,
                localId: t3,
                rtpSender: r3,
                track: n3,
                rtpParameters: i2,
                stopTracks: o2,
                disableTrackOnPause: c,
                zeroRtpOnPause: d,
                appData: l
              }) {
                super(), this._closed = false, this._observer = new s.EnhancedEventEmitter(), a.debug("constructor()"), this._id = e3, this._localId = t3, this._rtpSender = r3, this._track = n3, this._kind = n3.kind, this._rtpParameters = i2, this._paused = !!c && !n3.enabled, this._maxSpatialLayer = void 0, this._stopTracks = o2, this._disableTrackOnPause = c, this._zeroRtpOnPause = d, this._appData = l || {}, this.onTrackEnded = this.onTrackEnded.bind(this), this.handleTrack();
              }
              get id() {
                return this._id;
              }
              get localId() {
                return this._localId;
              }
              get closed() {
                return this._closed;
              }
              get kind() {
                return this._kind;
              }
              get rtpSender() {
                return this._rtpSender;
              }
              get track() {
                return this._track;
              }
              get rtpParameters() {
                return this._rtpParameters;
              }
              get paused() {
                return this._paused;
              }
              get maxSpatialLayer() {
                return this._maxSpatialLayer;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (a.debug("close()"), this._closed = true, this.destroyTrack(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (a.debug("transportClosed()"), this._closed = true, this.destroyTrack(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              async getStats() {
                if (this._closed) throw new i.InvalidStateError("closed");
                return new Promise((e3, t3) => {
                  this.safeEmit("@getstats", e3, t3);
                });
              }
              pause() {
                a.debug("pause()"), this._closed ? a.error("pause() | Producer closed") : (this._paused = true, this._track && this._disableTrackOnPause && (this._track.enabled = false), this._zeroRtpOnPause && new Promise((e3, t3) => {
                  this.safeEmit("@pause", e3, t3);
                }).catch(() => {
                }), this._observer.safeEmit("pause"));
              }
              resume() {
                a.debug("resume()"), this._closed ? a.error("resume() | Producer closed") : (this._paused = false, this._track && this._disableTrackOnPause && (this._track.enabled = true), this._zeroRtpOnPause && new Promise((e3, t3) => {
                  this.safeEmit("@resume", e3, t3);
                }).catch(() => {
                }), this._observer.safeEmit("resume"));
              }
              async replaceTrack({ track: e3 }) {
                if (a.debug("replaceTrack() [track:%o]", e3), this._closed) {
                  if (e3 && this._stopTracks)
                    try {
                      e3.stop();
                    } catch (e4) {
                    }
                  throw new i.InvalidStateError("closed");
                }
                if (e3 && "ended" === e3.readyState)
                  throw new i.InvalidStateError("track ended");
                e3 !== this._track ? (await new Promise((t3, r3) => {
                  this.safeEmit("@replacetrack", e3, t3, r3);
                }), this.destroyTrack(), this._track = e3, this._track && this._disableTrackOnPause && (this._paused ? this._paused && (this._track.enabled = false) : this._track.enabled = true), this.handleTrack()) : a.debug("replaceTrack() | same track, ignored");
              }
              async setMaxSpatialLayer(e3) {
                if (this._closed) throw new i.InvalidStateError("closed");
                if ("video" !== this._kind)
                  throw new i.UnsupportedError("not a video Producer");
                if ("number" != typeof e3)
                  throw new TypeError("invalid spatialLayer");
                e3 !== this._maxSpatialLayer && (await new Promise((t3, r3) => {
                  this.safeEmit("@setmaxspatiallayer", e3, t3, r3);
                }).catch(() => {
                }), this._maxSpatialLayer = e3);
              }
              async setRtpEncodingParameters(e3) {
                if (this._closed) throw new i.InvalidStateError("closed");
                if ("object" != typeof e3) throw new TypeError("invalid params");
                await new Promise((t3, r3) => {
                  this.safeEmit("@setrtpencodingparameters", e3, t3, r3);
                });
              }
              onTrackEnded() {
                a.debug('track "ended" event'), this.safeEmit("trackended"), this._observer.safeEmit("trackended");
              }
              handleTrack() {
                this._track && this._track.addEventListener("ended", this.onTrackEnded);
              }
              destroyTrack() {
                if (this._track)
                  try {
                    this._track.removeEventListener("ended", this.onTrackEnded), this._stopTracks && this._track.stop();
                  } catch (e3) {
                  }
              }
            }
            t2.Producer = o;
          }
        }, t = {};
        function r(n2) {
          var s = t[n2];
          if (void 0 !== s) return s.exports;
          var i = t[n2] = { exports: {} };
          return e[n2].call(i.exports, i, i.exports, r), i.exports;
        }
        r.amdO = {}, r.n = (e2) => {
          var t2 = e2 && e2.__esModule ? () => e2.default : () => e2;
          return r.d(t2, { a: t2 }), t2;
        }, r.d = (e2, t2) => {
          for (var n2 in t2)
            r.o(t2, n2) && !r.o(e2, n2) && Object.defineProperty(e2, n2, { enumerable: true, get: t2[n2] });
        }, r.g = function() {
          if ("object" == typeof globalThis) return globalThis;
          try {
            return this || new Function("return this")();
          } catch (e2) {
            if ("object" == typeof window) return window;
          }
        }(), r.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r.r = (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        };
        var n = {};
        return (() => {
          "use strict";
          r.r(n), r.d(n, {
            CameraDeviceInfo: () => pr,
            DeviceInfo: () => ur,
            ExternalE2EEKeyProvider: () => Bi.l,
            MicrophoneDeviceInfo: () => hr,
            VideoSDK: () => Vi,
            ZujoSDK: () => Gi
          });
          var e2 = r(2284), t2 = r(467), s = r(3029), i = r(2901), a = r(4467), o = r(4756), c = r.n(o), d = r(6880), l = r.n(d);
          function u(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function p(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? u(Object(r2), true).forEach(function(t4) {
                (0, a.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : u(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          function h(e3) {
            return "Minified Redux error #" + e3 + "; visit https://redux.js.org/Errors?code=" + e3 + " for the full message or use the non-minified dev environment for full errors. ";
          }
          var m = "function" == typeof Symbol && Symbol.observable || "@@observable", f = function() {
            return Math.random().toString(36).substring(7).split("").join(".");
          }, g = {
            INIT: "@@redux/INIT" + f(),
            REPLACE: "@@redux/REPLACE" + f(),
            PROBE_UNKNOWN_ACTION: function() {
              return "@@redux/PROBE_UNKNOWN_ACTION" + f();
            }
          };
          function v(e3) {
            if ("object" != typeof e3 || null === e3) return false;
            for (var t3 = e3; null !== Object.getPrototypeOf(t3); )
              t3 = Object.getPrototypeOf(t3);
            return Object.getPrototypeOf(e3) === t3;
          }
          function _(e3, t3, r2) {
            var n2;
            if ("function" == typeof t3 && "function" == typeof r2 || "function" == typeof r2 && "function" == typeof arguments[3])
              throw new Error(h(0));
            if ("function" == typeof t3 && void 0 === r2 && (r2 = t3, t3 = void 0), void 0 !== r2) {
              if ("function" != typeof r2) throw new Error(h(1));
              return r2(_)(e3, t3);
            }
            if ("function" != typeof e3) throw new Error(h(2));
            var s2 = e3, i2 = t3, a2 = [], o2 = a2, c2 = false;
            function d2() {
              o2 === a2 && (o2 = a2.slice());
            }
            function l2() {
              if (c2) throw new Error(h(3));
              return i2;
            }
            function u2(e4) {
              if ("function" != typeof e4) throw new Error(h(4));
              if (c2) throw new Error(h(5));
              var t4 = true;
              return d2(), o2.push(e4), function() {
                if (t4) {
                  if (c2) throw new Error(h(6));
                  t4 = false, d2();
                  var r3 = o2.indexOf(e4);
                  o2.splice(r3, 1), a2 = null;
                }
              };
            }
            function p2(e4) {
              if (!v(e4)) throw new Error(h(7));
              if (void 0 === e4.type) throw new Error(h(8));
              if (c2) throw new Error(h(9));
              try {
                c2 = true, i2 = s2(i2, e4);
              } finally {
                c2 = false;
              }
              for (var t4 = a2 = o2, r3 = 0; r3 < t4.length; r3++) {
                (0, t4[r3])();
              }
              return e4;
            }
            return p2({ type: g.INIT }), (n2 = {
              dispatch: p2,
              subscribe: u2,
              getState: l2,
              replaceReducer: function(e4) {
                if ("function" != typeof e4) throw new Error(h(10));
                s2 = e4, p2({ type: g.REPLACE });
              }
            })[m] = function() {
              var e4, t4 = u2;
              return (e4 = {
                subscribe: function(e5) {
                  if ("object" != typeof e5 || null === e5)
                    throw new Error(h(11));
                  function r3() {
                    e5.next && e5.next(l2());
                  }
                  return r3(), { unsubscribe: t4(r3) };
                }
              })[m] = function() {
                return this;
              }, e4;
            }, n2;
          }
          function y() {
            for (var e3 = arguments.length, t3 = new Array(e3), r2 = 0; r2 < e3; r2++)
              t3[r2] = arguments[r2];
            return 0 === t3.length ? function(e4) {
              return e4;
            } : 1 === t3.length ? t3[0] : t3.reduce(function(e4, t4) {
              return function() {
                return e4(t4.apply(void 0, arguments));
              };
            });
          }
          function b() {
            for (var e3 = arguments.length, t3 = new Array(e3), r2 = 0; r2 < e3; r2++)
              t3[r2] = arguments[r2];
            return function(e4) {
              return function() {
                var r3 = e4.apply(void 0, arguments), n2 = function() {
                  throw new Error(h(15));
                }, s2 = {
                  getState: r3.getState,
                  dispatch: function() {
                    return n2.apply(void 0, arguments);
                  }
                }, i2 = t3.map(function(e5) {
                  return e5(s2);
                });
                return n2 = y.apply(void 0, i2)(r3.dispatch), p(p({}, r3), {}, { dispatch: n2 });
              };
            };
          }
          function w(e3) {
            return function(t3) {
              var r2 = t3.dispatch, n2 = t3.getState;
              return function(t4) {
                return function(s2) {
                  return "function" == typeof s2 ? s2(r2, n2, e3) : t4(s2);
                };
              };
            };
          }
          var S = w();
          S.withExtraArgument = w;
          const R = S;
          var k = r(2211), E = r.n(k);
          function C(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function T(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? C(Object(r2), true).forEach(function(t4) {
                (0, a.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : C(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var P = {
            url: null,
            state: "new",
            activeSpeakerId: null,
            statsPeerId: null,
            faceDetection: false
          };
          const O = function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : P, t3 = arguments.length > 1 ? arguments[1] : void 0;
            switch (t3.type) {
              case "SET_ROOM_URL":
                var r2 = t3.payload.url;
                return T(T({}, e3), {}, { url: r2 });
              case "SET_ROOM_STATE":
                var n2 = t3.payload.state;
                return T(
                  T({}, e3),
                  {},
                  "connected" === n2 ? { state: n2 } : { state: n2, activeSpeakerId: null, statsPeerId: null }
                );
              case "SET_ROOM_ACTIVE_SPEAKER":
                var s2 = t3.payload.peerId;
                return T(T({}, e3), {}, { activeSpeakerId: s2 });
              case "SET_ROOM_STATS_PEER_ID":
                var i2 = t3.payload.peerId;
                return e3.statsPeerId === i2 ? T(T({}, e3), {}, { statsPeerId: null }) : T(T({}, e3), {}, { statsPeerId: i2 });
              case "SET_FACE_DETECTION":
                var a2 = t3.payload;
                return T(T({}, e3), {}, { faceDetection: a2 });
              case "REMOVE_PEER":
                var o2 = t3.payload.peerId, c2 = T({}, e3);
                return o2 && o2 === e3.activeSpeakerId && (c2.activeSpeakerId = null), o2 && o2 === e3.statsPeerId && (c2.statsPeerId = null), c2;
              default:
                return e3;
            }
          };
          function x(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function D(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? x(Object(r2), true).forEach(function(t4) {
                (0, a.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : x(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var I = {
            id: null,
            displayName: null,
            displayNameSet: false,
            device: null,
            canSendMic: false,
            canSendWebcam: false,
            canChangeWebcam: false,
            webcamInProgress: false,
            shareInProgress: false,
            audioOnly: false,
            audioOnlyInProgress: false,
            audioMuted: false,
            restartIceInProgress: false
          };
          const A = function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I, t3 = arguments.length > 1 ? arguments[1] : void 0;
            switch (t3.type) {
              case "SET_ROOM_STATE":
                return "closed" === t3.payload.state ? D(
                  D({}, e3),
                  {},
                  {
                    webcamInProgress: false,
                    shareInProgress: false,
                    audioOnly: false,
                    audioOnlyInProgress: false,
                    audioMuted: false,
                    restartIceInProgress: false
                  }
                ) : e3;
              case "SET_ME":
                var r2 = t3.payload, n2 = r2.peerId, s2 = r2.displayName, i2 = r2.displayNameSet, a2 = r2.device;
                return D(
                  D({}, e3),
                  {},
                  { id: n2, displayName: s2, displayNameSet: i2, device: a2 }
                );
              case "SET_MEDIA_CAPABILITIES":
                var o2 = t3.payload, c2 = o2.canSendMic, d2 = o2.canSendWebcam;
                return D(D({}, e3), {}, { canSendMic: c2, canSendWebcam: d2 });
              case "SET_CAN_CHANGE_WEBCAM":
                var l2 = t3.payload;
                return D(D({}, e3), {}, { canChangeWebcam: l2 });
              case "SET_WEBCAM_IN_PROGRESS":
                var u2 = t3.payload.flag;
                return D(D({}, e3), {}, { webcamInProgress: u2 });
              case "SET_SHARE_IN_PROGRESS":
                var p2 = t3.payload.flag;
                return D(D({}, e3), {}, { shareInProgress: p2 });
              case "SET_DISPLAY_NAME":
                var h2 = t3.payload.displayName;
                return h2 || (h2 = e3.displayName), D(D({}, e3), {}, { displayName: h2, displayNameSet: true });
              case "SET_AUDIO_ONLY_STATE":
                var m2 = t3.payload.enabled;
                return D(D({}, e3), {}, { audioOnly: m2 });
              case "SET_AUDIO_ONLY_IN_PROGRESS":
                var f2 = t3.payload.flag;
                return D(D({}, e3), {}, { audioOnlyInProgress: f2 });
              case "SET_AUDIO_MUTED_STATE":
                var g2 = t3.payload.enabled;
                return D(D({}, e3), {}, { audioMuted: g2 });
              case "SET_RESTART_ICE_IN_PROGRESS":
                var v2 = t3.payload.flag;
                return D(D({}, e3), {}, { restartIceInProgress: v2 });
              default:
                return e3;
            }
          };
          function M(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function L(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? M(Object(r2), true).forEach(function(t4) {
                (0, a.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : M(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var N = {};
          const j = function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : N, t3 = arguments.length > 1 ? arguments[1] : void 0;
            switch (t3.type) {
              case "SET_ROOM_STATE":
                return "closed" === t3.payload.state ? {} : e3;
              case "ADD_PRODUCER":
                var r2 = t3.payload.producer;
                return L(L({}, e3), {}, (0, a.A)({}, r2.id, r2));
              case "REMOVE_PRODUCER":
                var n2 = t3.payload.producerId, s2 = L({}, e3);
                return delete s2[n2], s2;
              case "SET_PRODUCER_PAUSED":
                var i2 = t3.payload.producerId, o2 = L(L({}, e3[i2]), {}, { paused: true });
                return L(L({}, e3), {}, (0, a.A)({}, i2, o2));
              case "SET_PRODUCER_RESUMED":
                var c2 = t3.payload.producerId, d2 = L(L({}, e3[c2]), {}, { paused: false });
                return L(L({}, e3), {}, (0, a.A)({}, c2, d2));
              case "SET_PRODUCER_TRACK":
                var l2 = t3.payload, u2 = l2.producerId, p2 = l2.track, h2 = L(L({}, e3[u2]), {}, { track: p2 });
                return L(L({}, e3), {}, (0, a.A)({}, u2, h2));
              case "SET_PRODUCER_SCORE":
                var m2 = t3.payload, f2 = m2.producerId, g2 = m2.score, v2 = e3[f2];
                if (!v2) return e3;
                var _2 = L(L({}, v2), {}, { score: g2 });
                return L(L({}, e3), {}, (0, a.A)({}, f2, _2));
              default:
                return e3;
            }
          };
          function B(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function F(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? B(Object(r2), true).forEach(function(t4) {
                (0, a.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : B(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var U = {};
          const W = function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : U, t3 = arguments.length > 1 ? arguments[1] : void 0;
            switch (t3.type) {
              case "SET_ROOM_STATE":
                return "closed" === t3.payload.state ? {} : e3;
              case "ADD_DATA_PRODUCER":
                var r2 = t3.payload.dataProducer;
                return F(F({}, e3), {}, (0, a.A)({}, r2.id, r2));
              case "REMOVE_DATA_PRODUCER":
                var n2 = t3.payload.dataProducerId, s2 = F({}, e3);
                return delete s2[n2], s2;
              default:
                return e3;
            }
          };
          var q = r(5458);
          function V(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function H(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? V(Object(r2), true).forEach(function(t4) {
                (0, a.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : V(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var z = {};
          function G(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function K(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? G(Object(r2), true).forEach(function(t4) {
                (0, a.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : G(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var $ = {};
          function J(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function Q(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? J(Object(r2), true).forEach(function(t4) {
                (0, a.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : J(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var Y = {};
          var X = [];
          const Z = function(e3) {
            for (var t3 = Object.keys(e3), r2 = {}, n2 = 0; n2 < t3.length; n2++) {
              var s2 = t3[n2];
              0, "function" == typeof e3[s2] && (r2[s2] = e3[s2]);
            }
            var i2, a2 = Object.keys(r2);
            try {
              !function(e4) {
                Object.keys(e4).forEach(function(t4) {
                  var r3 = e4[t4];
                  if (void 0 === r3(void 0, { type: g.INIT }))
                    throw new Error(h(12));
                  if (void 0 === r3(void 0, { type: g.PROBE_UNKNOWN_ACTION() }))
                    throw new Error(h(13));
                });
              }(r2);
            } catch (e4) {
              i2 = e4;
            }
            return function(e4, t4) {
              if (void 0 === e4 && (e4 = {}), i2) throw i2;
              for (var n3 = false, s3 = {}, o2 = 0; o2 < a2.length; o2++) {
                var c2 = a2[o2], d2 = r2[c2], l2 = e4[c2], u2 = d2(l2, t4);
                if (void 0 === u2) {
                  t4 && t4.type;
                  throw new Error(h(14));
                }
                s3[c2] = u2, n3 = n3 || u2 !== l2;
              }
              return (n3 = n3 || a2.length !== Object.keys(e4).length) ? s3 : e4;
            };
          }({
            room: O,
            me: A,
            producers: j,
            dataProducers: W,
            peers: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : z, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "SET_ROOM_STATE":
                  return "closed" === t3.payload.state ? {} : e3;
                case "ADD_PEER":
                  var r2 = t3.payload.peer;
                  return H(H({}, e3), {}, (0, a.A)({}, r2.id, r2));
                case "REMOVE_PEER":
                  var n2 = t3.payload.peerId, s2 = H({}, e3);
                  return delete s2[n2], s2;
                case "SET_PEER_DISPLAY_NAME":
                  var i2 = t3.payload, o2 = i2.displayName, c2 = e3[i2.peerId];
                  if (!c2) throw new Error("no Peer found");
                  var d2 = H(H({}, c2), {}, { displayName: o2 });
                  return H(H({}, e3), {}, (0, a.A)({}, d2.id, d2));
                case "ADD_CONSUMER":
                  var l2 = t3.payload, u2 = l2.consumer, p2 = e3[l2.peerId];
                  if (!p2) return H({}, e3);
                  var h2 = [].concat((0, q.A)(p2.consumers), [u2.id]), m2 = H(H({}, p2), {}, { consumers: h2 });
                  return H(H({}, e3), {}, (0, a.A)({}, m2.id, m2));
                case "REMOVE_CONSUMER":
                  var f2 = t3.payload, g2 = f2.consumerId, v2 = e3[f2.peerId];
                  if (!v2) return e3;
                  var _2 = v2.consumers.indexOf(g2);
                  if (-1 === _2) return H({}, e3);
                  var y2 = v2.consumers.slice();
                  y2.splice(_2, 1);
                  var b2 = H(H({}, v2), {}, { consumers: y2 });
                  return H(H({}, e3), {}, (0, a.A)({}, b2.id, b2));
                case "ADD_DATA_CONSUMER":
                  var w2 = t3.payload, S2 = w2.dataConsumer, R2 = w2.peerId;
                  if (!R2) return e3;
                  var k2 = e3[R2];
                  if (!k2) return H({}, e3);
                  var E2 = [].concat((0, q.A)(k2.dataConsumers), [S2.id]), C2 = H(H({}, k2), {}, { dataConsumers: E2 });
                  return H(H({}, e3), {}, (0, a.A)({}, C2.id, C2));
                case "REMOVE_DATA_CONSUMER":
                  var T2 = t3.payload, P2 = T2.dataConsumerId, O2 = T2.peerId;
                  if (!O2) return e3;
                  var x2 = e3[O2];
                  if (!x2) return e3;
                  var D2 = x2.dataConsumers.indexOf(P2);
                  if (-1 === D2) return H({}, e3);
                  var I2 = x2.dataConsumers.slice();
                  I2.splice(D2, 1);
                  var A2 = H(H({}, x2), {}, { dataConsumers: I2 });
                  return H(H({}, e3), {}, (0, a.A)({}, A2.id, A2));
                default:
                  return e3;
              }
            },
            consumers: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "SET_ROOM_STATE":
                  return "closed" === t3.payload.state ? {} : e3;
                case "ADD_CONSUMER":
                  var r2 = t3.payload.consumer;
                  return K(K({}, e3), {}, (0, a.A)({}, r2.id, r2));
                case "REMOVE_CONSUMER":
                  var n2 = t3.payload.consumerId, s2 = K({}, e3);
                  return delete s2[n2], s2;
                case "SET_CONSUMER_PAUSED":
                  var i2, o2 = t3.payload, c2 = o2.consumerId, d2 = o2.originator, l2 = e3[c2];
                  return i2 = K(
                    K({}, l2),
                    {},
                    "local" === d2 ? { locallyPaused: true, paused: true } : { remotelyPaused: true, paused: true }
                  ), K(K({}, e3), {}, (0, a.A)({}, c2, i2));
                case "SET_CONSUMER_RESUMED":
                  var u2, p2 = t3.payload, h2 = p2.consumerId, m2 = p2.originator, f2 = e3[h2];
                  return u2 = K(
                    K({}, f2),
                    {},
                    "local" === m2 ? { locallyPaused: false, paused: false } : { remotelyPaused: false, paused: false }
                  ), K(K({}, e3), {}, (0, a.A)({}, h2, u2));
                case "SET_CONSUMER_CURRENT_LAYERS":
                  var g2 = t3.payload, v2 = g2.consumerId, _2 = g2.spatialLayer, y2 = g2.temporalLayer, b2 = K(
                    K({}, e3[v2]),
                    {},
                    { currentSpatialLayer: _2, currentTemporalLayer: y2 }
                  );
                  return K(K({}, e3), {}, (0, a.A)({}, v2, b2));
                case "SET_CONSUMER_PREFERRED_LAYERS":
                  var w2 = t3.payload, S2 = w2.consumerId, R2 = w2.spatialLayer, k2 = w2.temporalLayer, E2 = K(
                    K({}, e3[S2]),
                    {},
                    { preferredSpatialLayer: R2, preferredTemporalLayer: k2 }
                  );
                  return K(K({}, e3), {}, (0, a.A)({}, S2, E2));
                case "SET_CONSUMER_PRIORITY":
                  var C2 = t3.payload, T2 = C2.consumerId, P2 = C2.priority, O2 = K(K({}, e3[T2]), {}, { priority: P2 });
                  return K(K({}, e3), {}, (0, a.A)({}, T2, O2));
                case "SET_CONSUMER_TRACK":
                  var x2 = t3.payload, D2 = x2.consumerId, I2 = x2.track, A2 = K(K({}, e3[D2]), {}, { track: I2 });
                  return K(K({}, e3), {}, (0, a.A)({}, D2, A2));
                case "SET_CONSUMER_SCORE":
                  var M2 = t3.payload, L2 = M2.consumerId, N2 = M2.score, j2 = e3[L2];
                  if (!j2) return e3;
                  var B2 = K(K({}, j2), {}, { score: N2 });
                  return K(K({}, e3), {}, (0, a.A)({}, L2, B2));
                default:
                  return e3;
              }
            },
            dataConsumers: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Y, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "SET_ROOM_STATE":
                  return "closed" === t3.payload.state ? {} : e3;
                case "ADD_DATA_CONSUMER":
                  var r2 = t3.payload.dataConsumer;
                  return Q(Q({}, e3), {}, (0, a.A)({}, r2.id, r2));
                case "REMOVE_DATA_CONSUMER":
                  var n2 = t3.payload.dataConsumerId, s2 = Q({}, e3);
                  return delete s2[n2], s2;
                default:
                  return e3;
              }
            },
            notifications: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : X, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "ADD_NOTIFICATION":
                  var r2 = t3.payload.notification;
                  return [].concat((0, q.A)(e3), [r2]);
                case "REMOVE_NOTIFICATION":
                  var n2 = t3.payload.notificationId;
                  return e3.filter(function(e4) {
                    return e4.id !== n2;
                  });
                case "REMOVE_ALL_NOTIFICATIONS":
                  return [];
                default:
                  return e3;
              }
            }
          });
          var ee = r(1919);
          var te = r(7007), re = r(296), ne = (r(1919).default, (0, i.A)(function e3() {
            (0, s.A)(this, e3), this.roomClient = null;
          })), se = new (function() {
            function e3() {
              (0, s.A)(this, e3), e3.instance || (e3.instance = new ne());
            }
            return (0, i.A)(e3, [
              {
                key: "getInstance",
                value: function() {
                  return e3.instance;
                }
              }
            ]);
          }())();
          Object.freeze(se);
          var ie = se.getInstance(), ae = function() {
            return (0, i.A)(
              function e3(t3) {
                (0, s.A)(this, e3), (0, a.A)(this, "pausedBy", void 0), this.id = t3.id, this.kind = t3.track.kind, this.codec = t3.codec, this.track = t3.track, this.producerOrConsumer = t3.instance, t3.appData && true === t3.appData.share && "video" === t3.track.kind && (this.kind = "share"), t3.appData && true === t3.appData.share && "audio" === t3.track.kind && (this.kind = "shareAudio"), this.rtpSender = t3.rtpSender, this.rtpReceiver = t3.rtpReceiver;
              },
              [
                {
                  key: "pause",
                  value: function() {
                    ie.roomClient._pauseConsumer(this.producerOrConsumer);
                  }
                },
                {
                  key: "resume",
                  value: function() {
                    ie.roomClient._resumeConsumer(this.producerOrConsumer);
                  }
                },
                {
                  key: "paused",
                  get: function() {
                    return this.producerOrConsumer.paused;
                  }
                }
              ]
            );
          }(), oe = r(1803);
          function ce(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function de(e3, t3) {
            var r2 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
            if (!r2) {
              if (Array.isArray(e3) || (r2 = function(e4, t4) {
                if (e4) {
                  if ("string" == typeof e4) return le(e4, t4);
                  var r3 = {}.toString.call(e4).slice(8, -1);
                  return "Object" === r3 && e4.constructor && (r3 = e4.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e4) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? le(e4, t4) : void 0;
                }
              }(e3)) || t3 && e3 && "number" == typeof e3.length) {
                r2 && (e3 = r2);
                var n2 = 0, s2 = function() {
                };
                return {
                  s: s2,
                  n: function() {
                    return n2 >= e3.length ? { done: true } : { done: false, value: e3[n2++] };
                  },
                  e: function(e4) {
                    throw e4;
                  },
                  f: s2
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var i2, a2 = true, o2 = false;
            return {
              s: function() {
                r2 = r2.call(e3);
              },
              n: function() {
                var e4 = r2.next();
                return a2 = e4.done, e4;
              },
              e: function(e4) {
                o2 = true, i2 = e4;
              },
              f: function() {
                try {
                  a2 || null == r2.return || r2.return();
                } finally {
                  if (o2) throw i2;
                }
              }
            };
          }
          function le(e3, t3) {
            (null == t3 || t3 > e3.length) && (t3 = e3.length);
            for (var r2 = 0, n2 = Array(t3); r2 < t3; r2++) n2[r2] = e3[r2];
            return n2;
          }
          var ue = "stream-enabled", pe = "stream-disabled", he = "media-status-changed", me = "video-quality-changed", fe = "stream-paused", ge = "stream-resumed", ve = "producer-added", _e = "producer-removed", ye = "consumer-added", be = "consumer-removed", we = "e2ee-state-change", Se = function() {
            return (0, i.A)(
              function e4(r3) {
                var n3 = this;
                (0, s.A)(this, e4), (0, a.A)(
                  this,
                  "captureImage",
                  (0, t2.A)(
                    c().mark(function e5() {
                      var r4, s2, i2, a2, o3, d3, l2, u2, p2 = arguments;
                      return c().wrap(
                        function(e6) {
                          for (; ; )
                            switch (e6.prev = e6.next) {
                              case 0:
                                s2 = (r4 = p2.length > 0 && void 0 !== p2[0] ? p2[0] : {}).height, i2 = r4.width, e6.prev = 1, a2 = (0, q.A)(n3.streams.values()), o3 = de(a2), e6.prev = 4, l2 = c().mark(function e7() {
                                  var r5, n4, a3, o4, l3;
                                  return c().wrap(
                                    function(e8) {
                                      for (; ; )
                                        switch (e8.prev = e8.next) {
                                          case 0:
                                            if ("video" != (r5 = d3.value).kind) {
                                              e8.next = 19;
                                              break;
                                            }
                                            return e8.prev = 2, (n4 = new MediaStream()).addTrack(
                                              r5.track
                                            ), (a3 = document.createElement(
                                              "video"
                                            )).srcObject = n4, a3.playsInline = true, (o4 = document.createElement(
                                              "canvas"
                                            )).id = "canvasId", e8.next = 12, new Promise(function(e9, r6) {
                                              a3.addEventListener(
                                                "loadeddata",
                                                (0, t2.A)(
                                                  c().mark(function t3() {
                                                    var n5, d4, l4, u3, p3, h2;
                                                    return c().wrap(
                                                      function(t4) {
                                                        for (; ; )
                                                          switch (t4.prev = t4.next) {
                                                            case 0:
                                                              return n5 = a3.videoWidth, d4 = a3.videoHeight, l4 = 16 / 9, null == s2 && null == i2 && (s2 = d4, i2 = n5), null == s2 && null == s2 || (s2 <= 0 || s2 > d4) && (s2 = d4), null == i2 && null == i2 || (i2 <= 0 || i2 > n5) && (i2 = n5), null == s2 && (s2 = i2 / l4), null == i2 && (i2 = s2 * l4), o4.width = i2, o4.height = s2, t4.prev = 9, t4.next = 12, a3.play();
                                                            case 12:
                                                              document.body.appendChild(
                                                                a3
                                                              ), u3 = (o4.width - n5 * l4) / 2, p3 = (o4.height - d4 * l4) / 2, o4.getContext(
                                                                "2d"
                                                              ).clearRect(
                                                                0,
                                                                0,
                                                                u3 / 2,
                                                                p3 / 2
                                                              ), o4.getContext(
                                                                "2d"
                                                              ).drawImage(
                                                                a3,
                                                                0,
                                                                0
                                                              ), h2 = o4.toDataURL(
                                                                "image/jpeg"
                                                              ).split(
                                                                ";base64,"
                                                              )[1], document.body.appendChild(
                                                                o4
                                                              ), document.body.removeChild(
                                                                o4
                                                              ), document.body.removeChild(
                                                                a3
                                                              ), e9(h2), t4.next = 28;
                                                              break;
                                                            case 24:
                                                              t4.prev = 24, t4.t0 = t4.catch(
                                                                9
                                                              ), r6(t4.t0), console.log(
                                                                "error in video",
                                                                t4.t0
                                                              );
                                                            case 28:
                                                            case "end":
                                                              return t4.stop();
                                                          }
                                                      },
                                                      t3,
                                                      null,
                                                      [[9, 24]]
                                                    );
                                                  })
                                                )
                                              );
                                            });
                                          case 12:
                                            return l3 = e8.sent, e8.abrupt("return", { v: l3 });
                                          case 16:
                                            e8.prev = 16, e8.t0 = e8.catch(2), console.error(
                                              "err on image capture",
                                              e8.t0
                                            );
                                          case 19:
                                          case "end":
                                            return e8.stop();
                                        }
                                    },
                                    e7,
                                    null,
                                    [[2, 16]]
                                  );
                                }), o3.s();
                              case 7:
                                if ((d3 = o3.n()).done) {
                                  e6.next = 14;
                                  break;
                                }
                                return e6.delegateYield(l2(), "t0", 9);
                              case 9:
                                if (!(u2 = e6.t0)) {
                                  e6.next = 12;
                                  break;
                                }
                                return e6.abrupt("return", u2.v);
                              case 12:
                                e6.next = 7;
                                break;
                              case 14:
                                e6.next = 19;
                                break;
                              case 16:
                                e6.prev = 16, e6.t1 = e6.catch(4), o3.e(e6.t1);
                              case 19:
                                return e6.prev = 19, o3.f(), e6.finish(19);
                              case 22:
                                throw new Error(
                                  "Camera must be on to capture an image"
                                );
                              case 25:
                                e6.prev = 25, e6.t2 = e6.catch(1), console.error(
                                  "Error in captureImage::",
                                  e6.t2
                                ), ie.roomClient._videosdkLogs && ie.roomClient._videosdkLogs.pushLogs({
                                  logText: "Error on image capture",
                                  logType: "ERROR",
                                  attributes: { error: e6.t2.message }
                                });
                              case 29:
                              case "end":
                                return e6.stop();
                            }
                        },
                        e5,
                        null,
                        [
                          [1, 25],
                          [4, 16, 19, 22]
                        ]
                      );
                    })
                  )
                ), this.id = r3.id, this.displayName = r3.displayName, this.streams = /* @__PURE__ */ new Map(), this.quality = "low", this.screenShareQuality = "high", this.local = r3.local || false, this.pinState = { cam: false, share: false }, this.webcamOn = false, this.micOn = false, this.mode = r3.mode, this.metaData = r3.metaData, this.eventEmitter = new te.EventEmitter(), this.participantVideoElements = /* @__PURE__ */ new Map(), this.participantAudioElements = /* @__PURE__ */ new Map(), this.videoVisible = false, this.height = null, this.width = null, this.resizeObserver = null;
              },
              [
                {
                  key: "_setPinState",
                  value: function(e4) {
                    null != e4.cam && (this.pinState.cam = e4.cam), null != e4.share && (this.pinState.share = e4.share);
                  }
                },
                {
                  key: "remove",
                  value: function() {
                    ie.roomClient.removePeer(this.id);
                  }
                },
                {
                  key: "enableMic",
                  value: function() {
                    ie.roomClient.enablePeerMic(this.id);
                  }
                },
                {
                  key: "disableMic",
                  value: function() {
                    ie.roomClient.disablePeerMic(this.id);
                  }
                },
                {
                  key: "enableWebcam",
                  value: function() {
                    ie.roomClient.enablePeerWebcam(this.id);
                  }
                },
                {
                  key: "disableWebcam",
                  value: function() {
                    ie.roomClient.disablePeerWebcam(this.id);
                  }
                },
                {
                  key: "addStream",
                  value: function(e4) {
                    if (e4) {
                      this.streams.set(e4.id, e4), "video" !== e4.kind || this.local || ie.roomClient.setConsumerQuality(e4.id, this.quality);
                      var t3 = new MediaStream();
                      t3.addTrack(e4.track);
                      try {
                        if (["video", "share"].includes(e4.kind)) {
                          var r3 = this.participantVideoElements.get(e4.kind);
                          if (r3) {
                            var n3 = {
                              display: "block",
                              objectFit: "share" === e4.kind ? "contain" : "cover",
                              width: "100%"
                            };
                            Object.assign(r3.style, n3), r3.srcObject = t3, r3.play().catch(function(t4) {
                              console.error(
                                "Failed to play ".concat(e4.kind, " stream:"),
                                t4
                              );
                            }), ("share" === e4.kind || "video" === e4.kind && this.videoVisible) && e4.resume();
                          }
                        }
                        if (("audio" === e4.kind || "shareAudio" === e4.kind) && !this.local) {
                          var s2 = this.participantAudioElements.get(e4.kind);
                          s2 && (s2.srcObject = t3, s2.play().catch(function(t4) {
                            console.error(
                              "Failed to play ".concat(e4.kind, " audio:"),
                              t4
                            );
                          }));
                        }
                        this.eventEmitter.emit(ue, e4), "video" === e4.kind && !this.local && this.height && this.width && this.setViewPort(this.width, this.height);
                      } catch (e5) {
                        console.error("Error in addStream:", e5);
                      }
                    } else
                      console.warn("Attempted to add null/undefined stream");
                  }
                },
                {
                  key: "updateStream",
                  value: function(e4) {
                    this.streams.set(e4.id, e4), this.eventEmitter.emit(ue, e4);
                  }
                },
                {
                  key: "deleteStream",
                  value: function(e4) {
                    var t3 = this.streams.get(e4);
                    if (null != t3) {
                      this.streams.delete(e4);
                      var r3 = {
                        video: {
                          collection: this.participantVideoElements,
                          type: "video"
                        },
                        share: {
                          collection: this.participantVideoElements,
                          type: "share"
                        },
                        audio: {
                          collection: this.participantAudioElements,
                          type: "audio"
                        },
                        shareAudio: {
                          collection: this.participantAudioElements,
                          type: "shareAudio"
                        }
                      }[t3.kind];
                      if (r3) {
                        var n3 = r3.collection.get(r3.type);
                        n3 && (n3.style.display = "none");
                      }
                      return this.eventEmitter.emit(pe, t3), t3;
                    }
                  }
                },
                {
                  key: "streamResumed",
                  value: function(e4) {
                    var t3 = this.streams.get(e4);
                    if (null != t3 && "video" === t3.kind && this.participantVideoElements.get("video")) {
                      var r3, n3 = null === (r3 = this.participantVideoElements.get("video")) || void 0 === r3 ? void 0 : r3.parentElement.getBoundingClientRect();
                      !!n3 && (0, oe.Iy)(n3) || (this.videoVisible = false, t3.pause());
                    }
                  }
                },
                {
                  key: "streamPaused",
                  value: function(e4) {
                    this.streams.get(e4);
                  }
                },
                {
                  key: "updateParticipantMediaState",
                  value: function(e4, t3) {
                    "audio" == e4 ? this.micOn = t3 : "video" == e4 && (this.webcamOn = t3), this.eventEmitter.emit(he, {
                      peerId: this.id,
                      kind: e4,
                      newStatus: t3
                    });
                  }
                },
                {
                  key: "handleParticipantPause",
                  value: function(e4) {
                    if (null != e4 && e4.consumerId) {
                      var t3 = this.streams.get(e4.consumerId);
                      t3 ? t3.pausedBy = "SUB_MANAGER" : console.warn(
                        "Stream with consumerId ".concat(
                          e4.consumerId,
                          " not found."
                        )
                      );
                    }
                    this.eventEmitter.emit(fe, {
                      kind: null == e4 ? void 0 : e4.kind,
                      reason: null == e4 ? void 0 : e4.reason
                    });
                  }
                },
                {
                  key: "handleParticipantResume",
                  value: function(e4) {
                    if (null != e4 && e4.consumerId) {
                      var t3 = this.streams.get(e4.consumerId);
                      t3 ? t3.pausedBy = void 0 : console.warn(
                        "Stream with consumerId ".concat(
                          e4.consumerId,
                          " not found."
                        )
                      );
                    }
                    this.eventEmitter.emit(ge, {
                      kind: null == e4 ? void 0 : e4.kind,
                      reason: null == e4 ? void 0 : e4.reason
                    });
                  }
                },
                {
                  key: "handleE2EEStateChange",
                  value: function(e4) {
                    this.eventEmitter.emit(we, e4);
                  }
                },
                {
                  key: "videoQualityChanged",
                  value: function(e4, t3) {
                    this.eventEmitter.emit(me, {
                      peerId: this.id,
                      prevQuality: e4,
                      currentQuality: t3
                    });
                  }
                },
                {
                  key: "setQuality",
                  value: function(e4) {
                    if (!this.local) {
                      var t3 = document.querySelector("#f-".concat(this.id));
                      t3 && this.resizeObserver && this.resizeObserver.unobserve(t3), this.quality = e4, (0, q.A)(this.streams.entries()).forEach(function(t4) {
                        var r3 = t4[1];
                        "video" === r3.kind && ie.roomClient.setConsumerQuality(r3.id, e4);
                      });
                    }
                  }
                },
                {
                  key: "setScreenShareQuality",
                  value: function(e4) {
                    this.local || (this.screenShareQuality = e4, this.streams.forEach(function(t3) {
                      "share" === t3.kind && ie.roomClient.setConsumerScreenShareQuality(t3.id, e4);
                    }));
                  }
                },
                {
                  key: "setViewPort",
                  value: function(e4, t3) {
                    (0, q.A)(this.streams.entries()).forEach(function(r3) {
                      var n3 = r3[1];
                      "video" === n3.kind && ie.roomClient.setViewPort(n3.producerOrConsumer, e4, t3);
                    });
                  }
                },
                {
                  key: "pin",
                  value: function(e4) {
                    switch (e4) {
                      case "SHARE_AND_CAM":
                      case void 0:
                        this._setPinState({ cam: true, share: true });
                        break;
                      case "CAM":
                        this._setPinState({ cam: true });
                        break;
                      case "SHARE":
                        this._setPinState({ share: true });
                        break;
                      default:
                        throw new Error("Unknown pin type");
                    }
                    ie.roomClient.pinStateChange({
                      peerId: this.id,
                      state: this.pinState
                    });
                  }
                },
                {
                  key: "unpin",
                  value: function(e4) {
                    switch (e4) {
                      case "SHARE_AND_CAM":
                      case void 0:
                        this._setPinState({ cam: false, share: false });
                        break;
                      case "CAM":
                        this._setPinState({ cam: false });
                        break;
                      case "SHARE":
                        this._setPinState({ share: false });
                        break;
                      default:
                        throw new Error("Unknown unpin type");
                    }
                    ie.roomClient.pinStateChange({
                      peerId: this.id,
                      state: this.pinState
                    });
                  }
                },
                {
                  key: "switchTo",
                  value: (d2 = (0, t2.A)(
                    c().mark(function e4(t3) {
                      var r3, n3, s2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return r3 = t3.meetingId, n3 = t3.payload, s2 = t3.token, e5.next = 3, ie.roomClient.switchPeerRoom({
                                  peerId: this.id,
                                  roomId: r3,
                                  payload: n3,
                                  token: s2
                                });
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function(e4) {
                    return d2.apply(this, arguments);
                  })
                },
                {
                  key: "getVideoStats",
                  value: (o2 = (0, t2.A)(
                    c().mark(function e4() {
                      var t3, r3, n3, s2, i2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (!this.local) {
                                  e5.next = 6;
                                  break;
                                }
                                return e5.next = 3, ie.roomClient.getVideoRemoteStats();
                              case 3:
                                return e5.abrupt("return", e5.sent);
                              case 6:
                                t3 = (0, q.A)(this.streams.entries()), r3 = de(t3), e5.prev = 8, r3.s();
                              case 10:
                                if ((n3 = r3.n()).done) {
                                  e5.next = 18;
                                  break;
                                }
                                if (s2 = (0, re.A)(n3.value, 2), i2 = s2[0], "video" != s2[1].kind) {
                                  e5.next = 16;
                                  break;
                                }
                                return e5.next = 15, ie.roomClient.getConsumerRemoteStats(i2);
                              case 15:
                                return e5.abrupt("return", e5.sent);
                              case 16:
                                e5.next = 10;
                                break;
                              case 18:
                                e5.next = 23;
                                break;
                              case 20:
                                e5.prev = 20, e5.t0 = e5.catch(8), r3.e(e5.t0);
                              case 23:
                                return e5.prev = 23, r3.f(), e5.finish(23);
                              case 26:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[8, 20, 23, 26]]
                      );
                    })
                  ), function() {
                    return o2.apply(this, arguments);
                  })
                },
                {
                  key: "getShareStats",
                  value: (n2 = (0, t2.A)(
                    c().mark(function e4() {
                      var t3, r3, n3, s2, i2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (!this.local) {
                                  e5.next = 6;
                                  break;
                                }
                                return e5.next = 3, ie.roomClient.getShareRemoteStats();
                              case 3:
                                return e5.abrupt("return", e5.sent);
                              case 6:
                                t3 = (0, q.A)(this.streams.entries()), r3 = de(t3), e5.prev = 8, r3.s();
                              case 10:
                                if ((n3 = r3.n()).done) {
                                  e5.next = 18;
                                  break;
                                }
                                if (s2 = (0, re.A)(n3.value, 2), i2 = s2[0], "share" != s2[1].kind) {
                                  e5.next = 16;
                                  break;
                                }
                                return e5.next = 15, ie.roomClient.getConsumerRemoteStats(i2);
                              case 15:
                                return e5.abrupt("return", e5.sent);
                              case 16:
                                e5.next = 10;
                                break;
                              case 18:
                                e5.next = 23;
                                break;
                              case 20:
                                e5.prev = 20, e5.t0 = e5.catch(8), r3.e(e5.t0);
                              case 23:
                                return e5.prev = 23, r3.f(), e5.finish(23);
                              case 26:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[8, 20, 23, 26]]
                      );
                    })
                  ), function() {
                    return n2.apply(this, arguments);
                  })
                },
                {
                  key: "getShareAudioStats",
                  value: (r2 = (0, t2.A)(
                    c().mark(function e4() {
                      var t3, r3, n3, s2, i2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (!this.local) {
                                  e5.next = 6;
                                  break;
                                }
                                return e5.next = 3, ie.roomClient.getShareAudioRemoteStats();
                              case 3:
                                return e5.abrupt("return", e5.sent);
                              case 6:
                                t3 = (0, q.A)(this.streams.entries()), r3 = de(t3), e5.prev = 8, r3.s();
                              case 10:
                                if ((n3 = r3.n()).done) {
                                  e5.next = 18;
                                  break;
                                }
                                if (s2 = (0, re.A)(n3.value, 2), i2 = s2[0], "shareAudio" != s2[1].kind) {
                                  e5.next = 16;
                                  break;
                                }
                                return e5.next = 15, ie.roomClient.getConsumerRemoteStats(i2);
                              case 15:
                                return e5.abrupt("return", e5.sent);
                              case 16:
                                e5.next = 10;
                                break;
                              case 18:
                                e5.next = 23;
                                break;
                              case 20:
                                e5.prev = 20, e5.t0 = e5.catch(8), r3.e(e5.t0);
                              case 23:
                                return e5.prev = 23, r3.f(), e5.finish(23);
                              case 26:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[8, 20, 23, 26]]
                      );
                    })
                  ), function() {
                    return r2.apply(this, arguments);
                  })
                },
                {
                  key: "getAudioStats",
                  value: (e3 = (0, t2.A)(
                    c().mark(function e4() {
                      var t3, r3, n3, s2, i2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (this.micOn) {
                                  e5.next = 2;
                                  break;
                                }
                                return e5.abrupt("return", []);
                              case 2:
                                if (!this.local) {
                                  e5.next = 8;
                                  break;
                                }
                                return e5.next = 5, ie.roomClient.getAudioRemoteStats();
                              case 5:
                                return e5.abrupt("return", e5.sent);
                              case 8:
                                t3 = (0, q.A)(this.streams.entries()), r3 = de(t3), e5.prev = 10, r3.s();
                              case 12:
                                if ((n3 = r3.n()).done) {
                                  e5.next = 20;
                                  break;
                                }
                                if (s2 = (0, re.A)(n3.value, 2), i2 = s2[0], "audio" != s2[1].kind) {
                                  e5.next = 18;
                                  break;
                                }
                                return e5.next = 17, ie.roomClient.getConsumerRemoteStats(i2);
                              case 17:
                                return e5.abrupt("return", e5.sent);
                              case 18:
                                e5.next = 12;
                                break;
                              case 20:
                                e5.next = 25;
                                break;
                              case 22:
                                e5.prev = 22, e5.t0 = e5.catch(10), r3.e(e5.t0);
                              case 25:
                                return e5.prev = 25, r3.f(), e5.finish(25);
                              case 28:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[10, 22, 25, 28]]
                      );
                    })
                  ), function() {
                    return e3.apply(this, arguments);
                  })
                },
                {
                  key: "consumeMicStreams",
                  value: function() {
                    ie.roomClient.consumeMicStreams(this.id);
                  }
                },
                {
                  key: "consumeWebcamStreams",
                  value: function() {
                    ie.roomClient.consumeWebcamStreams(this.id);
                  }
                },
                {
                  key: "stopConsumingWebcamStreams",
                  value: function() {
                    ie.roomClient.stopConsumingWebcamStreams(this.id);
                  }
                },
                {
                  key: "stopConsumingMicStreams",
                  value: function() {
                    ie.roomClient.stopConsumingMicStreams(this.id);
                  }
                },
                {
                  key: "renderVideo",
                  value: function(e4) {
                    for (var t3, r3 = this, n3 = e4.type, s2 = void 0 === n3 ? "video" : n3, i2 = e4.maxQuality, o3 = void 0 === i2 ? "auto" : i2, c2 = e4.videostyle, d3 = void 0 === c2 ? {} : c2, l2 = e4.containerStyle, u2 = void 0 === l2 ? {} : l2, p2 = 0, h2 = (0, q.A)(this.streams.values()); p2 < h2.length; p2++) {
                      var m2 = h2[p2];
                      m2.kind == s2 && (t3 = new MediaStream()).addTrack(m2.track);
                    }
                    if (this.participantVideoElements.get(s2)) {
                      if (t3) {
                        var f2 = this.participantVideoElements.get(s2);
                        f2 && (f2.srcObject = t3, f2.play().catch(function(e5) {
                          return console.error("videoElem.play() failed", e5);
                        }));
                      }
                      return this.participantVideoElements.get(s2);
                    }
                    try {
                      var g2 = document.createElement("div");
                      g2.classList.add(
                        "video-container",
                        "participant-video-".concat(this.id)
                      ), g2.setAttribute(
                        "id",
                        "f-".concat(this.id).concat("share" === s2 ? "-share" : "")
                      ), g2.style.setProperty("position", "relative"), Object.assign(g2.style, u2);
                      var v2 = document.createElement("video");
                      if (v2.setAttribute(
                        "id",
                        "v-".concat(this.id).concat("share" === s2 ? "-share" : "")
                      ), v2.setAttribute("playsinline", ""), v2.setAttribute("webkit-playsinline", ""), v2.setAttribute("x5-playsinline", ""), v2.playsinline = true, v2.muted = true, v2.autoplay = true, v2.onerror = function(e5) {
                        console.log(e5, "participant video error");
                      }, Object.assign(
                        v2.style,
                        function(e5) {
                          for (var t4 = 1; t4 < arguments.length; t4++) {
                            var r4 = null != arguments[t4] ? arguments[t4] : {};
                            t4 % 2 ? ce(Object(r4), true).forEach(function(t5) {
                              (0, a.A)(e5, t5, r4[t5]);
                            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                              e5,
                              Object.getOwnPropertyDescriptors(r4)
                            ) : ce(Object(r4)).forEach(function(t5) {
                              Object.defineProperty(
                                e5,
                                t5,
                                Object.getOwnPropertyDescriptor(r4, t5)
                              );
                            });
                          }
                          return e5;
                        }(
                          {
                            width: "100%",
                            height: "100%",
                            objectFit: "share" === s2 ? "contain" : "cover"
                          },
                          d3
                        )
                      ), t3 && (v2.srcObject = t3, v2.play().then(function(e5) {
                        console.log("videoElem.play() success", e5);
                      }).catch(function(e5) {
                        return console.error(
                          "videoElem.play() failed",
                          e5
                        );
                      })), g2.appendChild(v2), this.participantVideoElements.set(s2, v2), this.videoVisible = false, !this.local && "video" === s2) {
                        var _2 = (0, oe.sg)(function(e5) {
                          var t4, n4 = de(e5);
                          try {
                            for (n4.s(); !(t4 = n4.n()).done; ) {
                              if (t4.value.intersectionRatio > 0) {
                                r3.videoVisible = true;
                                for (var s3 = 0, i3 = (0, q.A)(r3.streams.values()); s3 < i3.length; s3++) {
                                  var a2 = i3[s3];
                                  "video" == a2.kind && "SUB_MANAGER" !== a2.pausedBy && a2.resume();
                                }
                              } else {
                                r3.videoVisible = false;
                                for (var o4 = 0, c3 = (0, q.A)(r3.streams.values()); o4 < c3.length; o4++) {
                                  var d4 = c3[o4];
                                  "video" == d4.kind && d4.pause();
                                }
                              }
                            }
                          } catch (e6) {
                            n4.e(e6);
                          } finally {
                            n4.f();
                          }
                        }, 500);
                        if (new IntersectionObserver(_2, {
                          root: null,
                          rootMargin: "0px",
                          threshold: 0
                        }).observe(g2), "auto" == o3 && "video" === s2) {
                          var y2 = (0, oe.sg)(function(e5) {
                            var t4 = e5[0].contentRect, n4 = t4.width, s3 = t4.height;
                            n4 > 0 && s3 > 0 && (r3.height = s3, r3.width = n4, r3.setViewPort(n4, s3));
                          }, 500), b2 = new ResizeObserver(y2);
                          b2.observe(g2), this.resizeObserver = b2;
                        }
                      }
                      return "video" !== s2 || "auto" === o3 || this.local || this.setQuality(o3), g2;
                    } catch (e5) {
                      console.log("Render video Exception", e5);
                    }
                  }
                },
                {
                  key: "renderAudio",
                  value: function(e4) {
                    var t3 = e4.type, r3 = void 0 === t3 ? "audio" : t3;
                    if (this.local) return null;
                    try {
                      if (this.participantAudioElements.get(r3)) {
                        var n3 = this.participantAudioElements.get(r3), s2 = this.getAudioStream(r3);
                        return s2 && n3 && (n3.srcObject = s2, n3.play().catch(function(e5) {
                          return console.error(
                            "Failed to play existing audio:",
                            e5
                          );
                        })), n3;
                      }
                      var i2 = document.createElement("audio");
                      i2.setAttribute("id", "a-".concat(this.id, "-").concat(r3)), i2.autoplay = false, i2.playsInline = true, i2.controls = false, i2.style.display = "none", i2.onerror = function(e5) {
                        return console.log("Audio element error:", e5);
                      };
                      var a2 = this.getAudioStream(r3);
                      return a2 && (i2.srcObject = a2, i2.play().catch(function(e5) {
                        return console.error(
                          "Failed to play new audio:",
                          e5
                        );
                      })), this.participantAudioElements.set(r3, i2), i2;
                    } catch (e5) {
                      return console.error("Render audio exception:", e5), null;
                    }
                  }
                },
                {
                  key: "getAudioStream",
                  value: function() {
                    var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "audio", t3 = (0, q.A)(this.streams.values()).find(function(t4) {
                      return t4.kind === e4;
                    });
                    if (t3) {
                      var r3 = new MediaStream();
                      return r3.addTrack(t3.track), t3.resume(), r3;
                    }
                    return null;
                  }
                },
                {
                  key: "addProducer",
                  value: function(e4) {
                    this.eventEmitter.emit(ve, e4);
                  }
                },
                {
                  key: "removeProducer",
                  value: function(e4) {
                    this.eventEmitter.emit(_e, e4);
                  }
                },
                {
                  key: "addConsumer",
                  value: function(e4) {
                    this.eventEmitter.emit(ye, e4);
                  }
                },
                {
                  key: "removeConsumer",
                  value: function(e4) {
                    this.eventEmitter.emit(be, e4);
                  }
                },
                {
                  key: "on",
                  value: function(e4, t3) {
                    switch (e4) {
                      case ue:
                      case pe:
                      case he:
                      case me:
                      case fe:
                      case ge:
                      case ve:
                      case _e:
                      case ye:
                      case be:
                      case we:
                        this.eventEmitter.on(e4, t3);
                        break;
                      default:
                        throw new Error(
                          "Invalid event type from participant onn"
                        );
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e4, t3) {
                    switch (e4) {
                      case ue:
                      case pe:
                      case he:
                      case me:
                      case fe:
                      case ge:
                      case ve:
                      case _e:
                      case ye:
                      case be:
                      case we:
                        this.eventEmitter.off(e4, t3);
                        break;
                      default:
                        throw new Error(
                          "Invalid event type from participant off"
                        );
                    }
                  }
                }
              ]
            );
            var e3, r2, n2, o2, d2;
          }(), Re = r(388), ke = r(3954), Ee = r(5501), Ce = {
            CHARACTER_SPEAKING: "CHARACTER_SPEAKING",
            CHARACTER_THINKING: "CHARACTER_THINKING",
            CHARACTER_LISTENING: "CHARACTER_LISTENING"
          }, Te = r(2107);
          function Pe() {
            try {
              var e3 = !Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {
                })
              );
            } catch (e4) {
            }
            return (Pe = function() {
              return !!e3;
            })();
          }
          function Oe(e3, t3, r2) {
            xe(e3, t3), t3.set(e3, r2);
          }
          function xe(e3, t3) {
            if (t3.has(e3))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          }
          function De(e3, t3) {
            return e3.get(Ae(e3, t3));
          }
          function Ie(e3, t3, r2) {
            return e3.set(Ae(e3, t3), r2), r2;
          }
          function Ae(e3, t3, r2) {
            if ("function" == typeof e3 ? e3 === t3 : e3.has(t3))
              return arguments.length < 3 ? t3 : r2;
            throw new TypeError("Private element is not present on this object");
          }
          var Me = "stream-enabled", Le = "stream-disabled", Ne = "character-joined", je = "character-left", Be = "media-status-changed", Fe = "video-quality-changed", Ue = "character-state-changed", We = "character-message", qe = "user-message", Ve = "data", He = /* @__PURE__ */ new WeakMap(), ze = /* @__PURE__ */ new WeakMap(), Ge = /* @__PURE__ */ new WeakMap(), Ke = /* @__PURE__ */ new WeakMap(), $e = /* @__PURE__ */ new WeakMap(), Je = /* @__PURE__ */ new WeakMap(), Qe = /* @__PURE__ */ new WeakMap(), Ye = /* @__PURE__ */ new WeakSet(), Xe = function(e3) {
            function r2(e4) {
              var n3, i2, o3, d3;
              return (0, s.A)(this, r2), i2 = this, o3 = r2, d3 = [
                {
                  id: e4.id,
                  displayName: e4.displayName,
                  mode: Te.nI.SEND_AND_RECV,
                  metaData: e4.metaData
                }
              ], o3 = (0, ke.A)(o3), function(e5, t3) {
                xe(e5, t3), t3.add(e5);
              }(
                n3 = (0, Re.A)(
                  i2,
                  Pe() ? Reflect.construct(o3, d3 || [], (0, ke.A)(i2).constructor) : o3.apply(i2, d3)
                ),
                Ye
              ), Oe(n3, He, void 0), Oe(n3, ze, void 0), Oe(n3, Ge, void 0), Oe(n3, Ke, void 0), Oe(n3, $e, void 0), Oe(n3, Je, void 0), Oe(n3, Qe, void 0), (0, a.A)(
                n3,
                "captureImage",
                (0, t2.A)(
                  c().mark(function e5() {
                    var t3, r3 = arguments;
                    return c().wrap(function(e6) {
                      for (; ; )
                        switch (e6.prev = e6.next) {
                          case 0:
                            throw (t3 = r3.length > 0 && void 0 !== r3[0] ? r3[0] : {}).height, t3.width, new Error(
                              "captureImage method is not supported on character"
                            );
                          case 2:
                          case "end":
                            return e6.stop();
                        }
                    }, e5);
                  })
                )
              ), Ie($e, n3, e4.interactionId || null), n3.id = e4.id || null, Ie(He, n3, e4.characterRole), Ie(ze, n3, e4.characterMode), Ie(Ge, n3, e4.knowledgeBases || []), n3.displayName = e4.displayName, Ie(Ke, n3, e4.language), Ie(Je, n3, e4.state || Ce.CHARACTER_LISTENING), Ie(Qe, n3, e4.roomClient), n3;
            }
            return (0, Ee.A)(r2, e3), (0, i.A)(r2, [
              {
                key: "join",
                value: (p2 = (0, t2.A)(
                  c().mark(function e4() {
                    var t3;
                    return c().wrap(
                      function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return e5.next = 2, De(Qe, this).joinCharacter({
                                interactionId: De($e, this),
                                characterId: this.id,
                                characterRole: De(He, this),
                                displayName: this.displayName,
                                characterMode: De(ze, this),
                                knowledgeBases: De(Ge, this),
                                language: De(Ke, this),
                                metaData: this.metaData
                              });
                            case 2:
                              (t3 = e5.sent) && (this.id = t3.characterId, this.displayName = t3.displayName, Ie(ze, this, t3.characterMode), Ie(He, this, t3.characterRole), Ie($e, this, t3.interactionId), Ie(Ge, this, t3.knowledgeBases), Ie(Ke, this, t3.language), De(Qe, this)._eventEmitter.emit(
                                "INIT_CHARACTER",
                                this
                              ));
                            case 4:
                            case "end":
                              return e5.stop();
                          }
                      },
                      e4,
                      this
                    );
                  })
                ), function() {
                  return p2.apply(this, arguments);
                })
              },
              {
                key: "leave",
                value: (u2 = (0, t2.A)(
                  c().mark(function e4() {
                    return c().wrap(
                      function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return e5.next = 2, De(Qe, this).removeCharacter();
                            case 2:
                            case "end":
                              return e5.stop();
                          }
                      },
                      e4,
                      this
                    );
                  })
                ), function() {
                  return u2.apply(this, arguments);
                })
              },
              {
                key: "remove",
                value: (l2 = (0, t2.A)(
                  c().mark(function e4() {
                    return c().wrap(function(e5) {
                      for (; ; )
                        switch (e5.prev = e5.next) {
                          case 0:
                            throw new Error(
                              "remove method is not supported on character"
                            );
                          case 1:
                          case "end":
                            return e5.stop();
                        }
                    }, e4);
                  })
                ), function() {
                  return l2.apply(this, arguments);
                })
              },
              {
                key: "sendMessage",
                value: (d2 = (0, t2.A)(
                  c().mark(function e4(t3) {
                    return c().wrap(
                      function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return e5.next = 2, De(Qe, this).sendCharacterMessage({
                                interactionId: De($e, this),
                                text: t3
                              });
                            case 2:
                            case "end":
                              return e5.stop();
                          }
                      },
                      e4,
                      this
                    );
                  })
                ), function(e4) {
                  return d2.apply(this, arguments);
                })
              },
              {
                key: "handleCharacterStateChanged",
                value: function(e4) {
                  Object.keys(Ce).includes(e4.status) && (Ae(Ye, this, Ze).call(this, e4.status), this.eventEmitter.emit(Ue, e4));
                }
              },
              {
                key: "handleCharacterMessage",
                value: function(e4) {
                  this.eventEmitter.emit(We, e4);
                }
              },
              {
                key: "interrupt",
                value: (o2 = (0, t2.A)(
                  c().mark(function e4() {
                    return c().wrap(
                      function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return e5.next = 2, De(Qe, this).interruptCharacter({
                                interactionId: De($e, this)
                              });
                            case 2:
                            case "end":
                              return e5.stop();
                          }
                      },
                      e4,
                      this
                    );
                  })
                ), function() {
                  return o2.apply(this, arguments);
                })
              },
              {
                key: "handleUserMessage",
                value: function(e4) {
                  this.eventEmitter.emit(qe, e4);
                }
              },
              {
                key: "handleCharacterData",
                value: function(e4) {
                  var t3 = e4.topic, r3 = e4.data;
                  this.eventEmitter.emit(Ve, t3, r3);
                }
              },
              {
                key: "enableMic",
                value: function() {
                  De(Qe, this).enablePeerMic(this.id);
                }
              },
              {
                key: "disableMic",
                value: function() {
                  De(Qe, this).disablePeerMic(this.id);
                }
              },
              {
                key: "enableWebcam",
                value: function() {
                  De(Qe, this).enablePeerWebcam(this.id);
                }
              },
              {
                key: "disableWebcam",
                value: function() {
                  De(Qe, this).disablePeerWebcam(this.id);
                }
              },
              {
                key: "updateStream",
                value: function(e4) {
                  throw new Error(
                    "updateStream method is not supported on character"
                  );
                }
              },
              {
                key: "switchTo",
                value: (n2 = (0, t2.A)(
                  c().mark(function e4(t3) {
                    return c().wrap(function(e5) {
                      for (; ; )
                        switch (e5.prev = e5.next) {
                          case 0:
                            throw t3.meetingId, t3.payload, t3.token, new Error(
                              "switchTo method is not supported on character"
                            );
                          case 2:
                          case "end":
                            return e5.stop();
                        }
                    }, e4);
                  })
                ), function(e4) {
                  return n2.apply(this, arguments);
                })
              },
              {
                key: "pin",
                value: function(e4) {
                  throw new Error("pin method is not supported on character");
                }
              },
              {
                key: "on",
                value: function(e4, t3) {
                  switch (e4) {
                    case Me:
                    case Le:
                    case Ne:
                    case je:
                    case Be:
                    case Fe:
                    case Ue:
                    case We:
                    case qe:
                    case Ve:
                      this.eventEmitter.on(e4, t3);
                      break;
                    default:
                      throw new Error("Invalid event type");
                  }
                }
              },
              {
                key: "off",
                value: function(e4, t3) {
                  switch (e4) {
                    case Me:
                    case Le:
                    case Ne:
                    case je:
                    case Be:
                    case Fe:
                    case Ue:
                    case We:
                    case qe:
                    case Ve:
                      this.eventEmitter.off(e4, t3);
                      break;
                    default:
                      throw new Error("Invalid event type");
                  }
                }
              },
              {
                key: "state",
                get: function() {
                  return De(Je, this);
                }
              },
              {
                key: "knowledgeBases",
                get: function() {
                  return De(Ge, this);
                }
              },
              {
                key: "characterMode",
                get: function() {
                  return De(ze, this);
                }
              },
              {
                key: "characterRole",
                get: function() {
                  return De(He, this);
                }
              },
              {
                key: "interactionId",
                get: function() {
                  return De($e, this);
                }
              },
              {
                key: "language",
                get: function() {
                  return De(Ke, this);
                }
              }
            ]);
            var n2, o2, d2, l2, u2, p2;
          }(Se);
          function Ze(e3) {
            Ie(Je, this, e3);
          }
          function et(e3, t3, r2) {
            (function(e4, t4) {
              if (t4.has(e4))
                throw new TypeError(
                  "Cannot initialize the same private elements twice on an object"
                );
            })(e3, t3), t3.set(e3, r2);
          }
          function tt(e3, t3, r2) {
            if ("function" == typeof e3 ? e3 === t3 : e3.has(t3))
              return arguments.length < 3 ? t3 : r2;
            throw new TypeError("Private element is not present on this object");
          }
          var rt = /* @__PURE__ */ new WeakMap(), nt = function() {
            return (0, i.A)(
              function e4(t3, r2) {
                var n2, i2, a2, o2 = t3.id, c2 = t3.displayName;
                (0, s.A)(this, e4), et(this, rt, void 0), this.id = o2, this.displayName = c2, i2 = this, a2 = r2, (n2 = rt).set(tt(n2, i2), a2);
              },
              [
                {
                  key: "switchTo",
                  value: (e3 = (0, t2.A)(
                    c().mark(function e4(t3) {
                      var r2, n2, s2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return r2 = t3.meetingId, n2 = t3.payload, s2 = t3.token, e5.next = 3, ie.roomClient.connectionSwitchPeerRoom({
                                  roomId: r2,
                                  connectionRoomId: (i2 = rt, a2 = this, i2.get(tt(i2, a2))),
                                  payload: n2,
                                  peerId: this.id,
                                  token: s2
                                });
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                          var i2, a2;
                        },
                        e4,
                        this
                      );
                    })
                  ), function(t3) {
                    return e3.apply(this, arguments);
                  })
                }
              ]
            );
            var e3;
          }(), st = "participant-joined", it = "participant-left", at = "chat-message", ot = function() {
            return (0, i.A)(
              function e4(t3, r2) {
                var n2 = this;
                (0, s.A)(this, e4), this.eventEmitter = new te.EventEmitter(), this.id = t3, this.participants = /* @__PURE__ */ new Map(), r2.forEach(function(e5) {
                  n2.participants.set(e5.id, new nt(e5, n2.id));
                });
              },
              [
                {
                  key: "participantJoin",
                  value: function(e4) {
                    var t3 = new nt(e4, this.id);
                    this.participants.set(e4.id, t3), this.eventEmitter.emit(st, t3);
                  }
                },
                {
                  key: "participantLeft",
                  value: function(e4) {
                    this.participants.delete(e4), this.eventEmitter.emit(it, e4);
                  }
                },
                {
                  key: "sendChatMessage",
                  value: function(e4) {
                    ie.roomClient.connectionSendChatMessage({
                      roomId: this.id,
                      message: e4
                    });
                  }
                },
                {
                  key: "sendChatMessageEvent",
                  value: function(e4) {
                    var t3 = e4.participantId, r2 = e4.message;
                    this.eventEmitter.emit(at, {
                      participantId: t3,
                      message: r2
                    });
                  }
                },
                {
                  key: "end",
                  value: (e3 = (0, t2.A)(
                    c().mark(function e4() {
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return e5.next = 2, ie.roomClient.connectionEndMeeting({
                                  roomId: this.id
                                });
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function() {
                    return e3.apply(this, arguments);
                  })
                },
                {
                  key: "on",
                  value: function(e4, t3) {
                    switch (e4) {
                      case st:
                      case it:
                      case at:
                        this.eventEmitter.on(e4, t3);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e4, t3) {
                    switch (e4) {
                      case st:
                      case it:
                      case at:
                        this.eventEmitter.off(e4, t3);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                }
              ]
            );
            var e3;
          }(), ct = function() {
            return (0, i.A)(
              function e3(t3) {
                var r2 = t3.roomId, n2 = t3.peers, i2 = t3.payload;
                (0, s.A)(this, e3), this.id = r2, this.payload = i2, this.meeting = new ot(r2, n2);
              },
              [
                {
                  key: "close",
                  value: function() {
                    ie.roomClient.closeConnection(this.id);
                  }
                }
              ]
            );
          }();
          function dt(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function lt(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? dt(Object(r2), true).forEach(function(t4) {
                (0, a.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : dt(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          function ut(e3, t3) {
            if (t3.has(e3))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          }
          function pt(e3, t3) {
            return e3.get(ht(e3, t3));
          }
          function ht(e3, t3, r2) {
            if ("function" == typeof e3 ? e3 === t3 : e3.has(t3))
              return arguments.length < 3 ? t3 : r2;
            throw new TypeError("Private element is not present on this object");
          }
          var mt = "error", ft = "meeting-joined", gt = "meeting-left", vt = "participant-mode-changed", _t = "participant-joined", yt = "participant-left", bt = "speaker-changed", wt = "presenter-changed", St = "main-participant-changed", Rt = "chat-message", kt = "entry-requested", Et = "entry-responded", Ct = "recording-state-changed", Tt = "recording-started", Pt = "recording-stopped", Ot = "livestream-state-changed", xt = "livestream-started", Dt = "livestream-stopped", It = "hls-state-changed", At = "hls-started", Mt = "hls-stopped", Lt = "whiteboard-started", Nt = "whiteboard-stopped", jt = "video-state-changed", Bt = "video-seeked", Ft = "mic-requested", Ut = "webcam-requested", Wt = "stream-enabled", qt = "stream-disabled", Vt = "pin-state-changed", Ht = "connection-open", zt = "connection-close", Gt = "switch-meeting", Kt = "meeting-state-changed", $t = "paused-all-streams", Jt = "resumed-all-streams", Qt = "transcription-state-changed", Yt = "transcription-text", Xt = "character-joined", Zt = "character-left", er = /* @__PURE__ */ new WeakMap(), tr = /* @__PURE__ */ new WeakSet(), rr = function() {
            return (0, i.A)(
              function r3(n3, i2, o3) {
                var d3, l3, u3, p3, h3, m3 = this;
                (0, s.A)(this, r3), ut(d3 = this, l3 = tr), l3.add(d3), function(e3, t3, r4) {
                  ut(e3, t3), t3.set(e3, r4);
                }(this, er, void 0), (0, a.A)(this, "pubSub", {
                  publish: (h3 = (0, t2.A)(
                    c().mark(function t3(r4, n4, s2, i3) {
                      return c().wrap(function(t4) {
                        for (; ; )
                          switch (t4.prev = t4.next) {
                            case 0:
                              if (null == i3) {
                                t4.next = 3;
                                break;
                              }
                              if ("object" == (0, e2.A)(i3)) {
                                t4.next = 3;
                                break;
                              }
                              throw new Error(
                                '"payload" can only be object.'
                              );
                            case 3:
                              return t4.next = 5, m3.roomClient.pubsubPublish(r4, n4, s2, i3);
                            case 5:
                            case "end":
                              return t4.stop();
                          }
                      }, t3);
                    })
                  ), function(e3, t3, r4, n4) {
                    return h3.apply(this, arguments);
                  }),
                  subscribe: (p3 = (0, t2.A)(
                    c().mark(function e3(t3, r4) {
                      var n4;
                      return c().wrap(function(e4) {
                        for (; ; )
                          switch (e4.prev = e4.next) {
                            case 0:
                              if (!pt(er, m3).listeners(t3).includes(r4)) {
                                e4.next = 2;
                                break;
                              }
                              return e4.abrupt("return");
                            case 2:
                              return e4.next = 4, m3.roomClient.pubsubSubscribe(t3);
                            case 4:
                              return n4 = e4.sent, pt(er, m3).on(t3, r4), e4.abrupt("return", n4);
                            case 7:
                            case "end":
                              return e4.stop();
                          }
                      }, e3);
                    })
                  ), function(e3, t3) {
                    return p3.apply(this, arguments);
                  }),
                  unsubscribe: (u3 = (0, t2.A)(
                    c().mark(function e3(t3, r4) {
                      return c().wrap(function(e4) {
                        for (; ; )
                          switch (e4.prev = e4.next) {
                            case 0:
                              if (pt(er, m3).off(t3, r4), 0 != pt(er, m3).listeners(t3).length) {
                                e4.next = 4;
                                break;
                              }
                              return e4.next = 4, m3.roomClient.pubsubUnsubscribe(t3);
                            case 4:
                            case "end":
                              return e4.stop();
                          }
                      }, e3);
                    })
                  ), function(e3, t3) {
                    return u3.apply(this, arguments);
                  })
                }), (0, a.A)(
                  this,
                  "uploadBase64File",
                  function() {
                    var e3 = (0, t2.A)(
                      c().mark(function e4(t3) {
                        var r4, n4, s2, i3, a2, o4, d4;
                        return c().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r4 = t3.base64Data, n4 = t3.token, s2 = t3.fileName, e5.prev = 1, r4 && n4 && s2) {
                                    e5.next = 4;
                                    break;
                                  }
                                  throw new Error(
                                    "please provide base64Data, token and fileName"
                                  );
                                case 4:
                                  return i3 = "https://".concat(
                                    m3.baseUrl,
                                    "/base64-upload?roomId="
                                  ).concat(m3.id), a2 = { fileName: s2, base64Data: r4 }, e5.next = 8, fetch(i3, {
                                    method: "POST",
                                    body: JSON.stringify(a2),
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: n4
                                    }
                                  });
                                case 8:
                                  return o4 = e5.sent, e5.next = 11, o4.json();
                                case 11:
                                  return d4 = e5.sent, e5.abrupt("return", d4.url);
                                case 15:
                                  e5.prev = 15, e5.t0 = e5.catch(1), console.error(
                                    "Error while Uploading Base64 File::",
                                    e5.t0
                                  ), m3.roomClient._videosdkLogs && m3.roomClient._videosdkLogs.pushLogs({
                                    logText: "Error while Uploading Base64 File",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 19:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          null,
                          [[1, 15]]
                        );
                      })
                    );
                    return function(t3) {
                      return e3.apply(this, arguments);
                    };
                  }()
                ), (0, a.A)(
                  this,
                  "fetchBase64File",
                  function() {
                    var e3 = (0, t2.A)(
                      c().mark(function e4(t3) {
                        var r4, n4, s2, i3, a2;
                        return c().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r4 = t3.url, n4 = t3.token, e5.prev = 1, r4 && n4) {
                                    e5.next = 4;
                                    break;
                                  }
                                  throw new Error(
                                    "please provide url and token"
                                  );
                                case 4:
                                  return e5.next = 6, fetch(r4, {
                                    headers: { Authorization: n4 }
                                  });
                                case 6:
                                  return s2 = e5.sent, e5.next = 9, s2.arrayBuffer();
                                case 9:
                                  return i3 = e5.sent, a2 = window.btoa(
                                    new Uint8Array(i3).reduce(
                                      function(e6, t4) {
                                        return e6 + String.fromCharCode(t4);
                                      },
                                      ""
                                    )
                                  ), e5.abrupt("return", a2);
                                case 14:
                                  e5.prev = 14, e5.t0 = e5.catch(1), console.error(
                                    "Error while fetching Base64 File::",
                                    e5.t0
                                  ), m3.roomClient._videosdkLogs && m3.roomClient._videosdkLogs.pushLogs({
                                    logText: "Error while fetching Base64 File",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 18:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          null,
                          [[1, 14]]
                        );
                      })
                    );
                    return function(t3) {
                      return e3.apply(this, arguments);
                    };
                  }()
                ), this.id = n3, this.roomClient = o3, this.activeSpeakerId = null, this.activePresenterId = null, this.mainParticipantId = null, this.connections = /* @__PURE__ */ new Map(), this.localParticipant = i2, this.participants = /* @__PURE__ */ new Map(), this.characters = /* @__PURE__ */ new Map(), this.baseUrl = null, this.livestreamState = "LIVESTREAM_STOPPED", this.recordingState = "RECORDING_STOPPED", this.hlsState = "HLS_STOPPED", this.transcriptionState = "TRANSCRIPTION_STOPPED", this.hlsUrls = {
                  downstreamUrl: null,
                  playbackHlsUrl: null,
                  livestreamUrl: null
                }, this.messages = [], this.eventEmitter = new te.EventEmitter(), function(e3, t3, r4) {
                  e3.set(ht(e3, t3), r4);
                }(er, this, new te.EventEmitter()), this.eventEmitter.setMaxListeners(9999), pt(er, this).setMaxListeners(9999), this.roomClient.on("ERROR", function(e3) {
                  return m3.handleError(e3);
                }), this.roomClient.on("ADD_PEER", function(e3) {
                  return m3.handlePeerAdd(e3);
                }), this.roomClient.on("REMOVE_PEER", function(e3) {
                  return m3.handlePeerRemove(e3);
                }), this.roomClient.on("ADD_PRODUCER", function(e3) {
                  return m3.handleProducerAdd(e3);
                }), this.roomClient.on("UPDATE_PRODUCER", function(e3) {
                  return m3.handleUpdateProducer(e3);
                }), this.roomClient.on("REMOVE_PRODUCER", function(e3) {
                  return m3.handleProducerRemove(e3);
                }), this.roomClient.on("ADD_CONSUMER", function(e3) {
                  return m3.handleConsumerAdd(e3);
                }), this.roomClient.on("REMOVE_CONSUMER", function(e3) {
                  return m3.handleConsumerRemove(e3);
                }), this.roomClient.on("CONSUMER_RESUMED", function(e3) {
                  return m3.handleConsumerResume(e3);
                }), this.roomClient.on("CONSUMER_PAUSED", function(e3) {
                  return m3.handleConsumerPause(e3);
                }), this.roomClient.on(
                  "PARTICIPANT_MEDIA_STATE_CHANGED",
                  function(e3) {
                    return m3.handleParticipantMediaStateChanged(e3);
                  }
                ), this.roomClient.on("CHAT_MESSAGE", function(e3) {
                  return m3.handleNewChatMessage(e3);
                }), this.roomClient.on("SET_ROOM_ACTIVE_SPEAKER", function(e3) {
                  return m3.handleSpeakerChange(e3);
                }), this.roomClient.on("ENTRY_REQUESTED", function(e3) {
                  return m3.handleEntryRequested(e3);
                }), this.roomClient.on("ENTRY_RESPONDED", function(e3) {
                  return m3.handleEntryResponded(e3);
                }), this.roomClient.on("MEETING_JOINED", function(e3) {
                  return m3.handleMeetingJoined(e3);
                }), this.roomClient.on("MEETING_LEFT", function(e3) {
                  return m3.handleMeetingLeft(e3);
                }), this.roomClient.on("RECORDING_STATE_CHANGED", function(e3) {
                  m3.handleRecordingStateChanged(e3);
                }), this.roomClient.on("RECORDING_STARTED", function(e3) {
                  return m3.handleRecordingStarted(e3);
                }), this.roomClient.on("RECORDING_STOPPED", function(e3) {
                  return m3.handleRecordingStopped(e3);
                }), this.roomClient.on("LIVESTREAM_STATE_CHANGED", function(e3) {
                  m3.handleLivestreamStateChanged(e3);
                }), this.roomClient.on("LIVESTREAM_STARTED", function(e3) {
                  return m3.handleLivestreamStarted(e3);
                }), this.roomClient.on("LIVESTREAM_STOPPED", function(e3) {
                  return m3.handleLivestreamStopped(e3);
                }), this.roomClient.on("HLS_STATE_CHANGED", function(e3) {
                  m3.handleHlsStateChanged(e3);
                }), this.roomClient.on("HLS_STARTED", function(e3) {
                  m3.handleHlsStarted(e3);
                }), this.roomClient.on("HLS_STOPPED", function(e3) {
                  m3.handleHlsStopped(e3);
                }), this.roomClient.on(
                  "TRANSCRIPTION_STATE_CHANGED",
                  function(e3) {
                    m3.handleTranscriptionStateChanged(e3);
                  }
                ), this.roomClient.on("TRANSCRIPTION_TEXT", function(e3) {
                  m3.handleTranscriptionText(e3);
                }), this.roomClient.on("SUB_MANAGER_RESUMED", function(e3) {
                  m3.handleParticipantResumeBySubManager(e3);
                }), this.roomClient.on("SUB_MANAGER_PAUSED", function(e3) {
                  m3.handleParticipantPausedBySubManager(e3);
                }), this.roomClient.on("WHITEBOARD_STARTED", function(e3) {
                  return m3.handleWhiteboardStarted(e3);
                }), this.roomClient.on("WHITEBOARD_STOPPED", function(e3) {
                  return m3.handleWhiteboardStopped(e3);
                }), this.roomClient.on("VIDEO_STATE_CHANGED", function(e3) {
                  return m3.handleVideoStateChanged(e3);
                }), this.roomClient.on("VIDEO_SEEKED", function(e3) {
                  return m3.handleVideoSeeked(e3);
                }), this.roomClient.on("PIN_STATE_CHANGED", function(e3) {
                  m3.handlePinStateChanged(e3);
                }), this.roomClient.on("MIC_REQUESTED", function(e3) {
                  return m3.handleMicRequested(e3);
                }), this.roomClient.on("WEBCAM_REQUESTED", function(e3) {
                  return m3.handleWebcamRequested(e3);
                }), this.roomClient.on("CONNECTION_OPEN", function(e3) {
                  return m3.handleConnectionOpen(e3);
                }), this.roomClient.on("CONNECTION_CLOSE", function(e3) {
                  return m3.handleConnectionClose(e3);
                }), this.roomClient.on(
                  "CONNECTION_PARTICIPANT_JOIN",
                  function(e3) {
                    return m3.handleConnectionParticipantJoin(e3);
                  }
                ), this.roomClient.on("SWITCH_ROOM", function(e3) {
                  return m3.handleSwitchMeeting(e3);
                }), this.roomClient.on("CONNECTION_CHAT_MESSAGE", function(e3) {
                  return m3.handleConnectionChatMessage(e3);
                }), this.roomClient.on(
                  "CONNECTION_PARTICIPANT_LEFT",
                  function(e3) {
                    m3.handleConnectionParticipantLeft(e3);
                  }
                ), this.roomClient.on("PUBSUB_MESSAGE", function(e3) {
                  return ht(tr, m3, nr).call(m3, e3);
                }), this.roomClient.on("PEER_MODE_CHANGED", function(e3) {
                  return ht(tr, m3, sr).call(m3, e3);
                }), this.updateMainParticipant(this.localParticipant.id), this.roomClient.on("MEETING_STATE_CHANGED", function(e3) {
                  return m3.handleMeetingStateChanged(e3);
                }), this.roomClient.on("ALL_CONSUMERS_PAUSED", function(e3) {
                  return m3.handleConsumersPaused(e3);
                }), this.roomClient.on("ALL_CONSUMERS_RESUMED", function(e3) {
                  return m3.handleConsumersResumed(e3);
                }), this.roomClient.on("VIDEO_QUALITY_CHANGED", function(e3) {
                  return m3.handleVideoQualityChanged(e3);
                }), this.roomClient.on("ADD_CHARACTER", function(e3) {
                  return m3.handleAddCharacter(e3);
                }), this.roomClient.on("INIT_CHARACTER", function(e3) {
                  return m3.handleInitCharacter(e3);
                }), this.roomClient.on("REMOVE_CHARACTER", function(e3) {
                  return m3.handleRemoveCharacter(e3);
                }), this.roomClient.on("CHARACTER_STATE_CHANGED", function(e3) {
                  return m3.handleCharacterStateChanged(e3);
                }), this.roomClient.on("CHARACTER_MESSAGE", function(e3) {
                  return m3.handleCharacterMessage(e3);
                }), this.roomClient.on("USER_MESSAGE", function(e3) {
                  return m3.handleUserMessage(e3);
                }), this.roomClient.on("CHARACTER_DATA", function(e3) {
                  return m3.handleOnCharacterData(e3);
                }), this.roomClient.on("E2EE_STATE_CHANGE", function(e3) {
                  return m3.handleE2EEStateChange(e3);
                }), this.roomClient.on(
                  "REMOVE_PARTICIPANTS_FOR_SWITCH_MEETING",
                  function() {
                    return m3.handleOnRemoveCurrentMeetingParticipant();
                  }
                );
              },
              [
                {
                  key: "handleError",
                  value: function(e3) {
                    this.eventEmitter.listenerCount(mt) > 0 && this.eventEmitter.emit(mt, e3);
                  }
                },
                {
                  key: "join",
                  value: function() {
                    this.roomClient.join();
                  }
                },
                {
                  key: "changeMode",
                  value: function(e3) {
                    this.roomClient.changeMode(e3);
                  }
                },
                {
                  key: "leave",
                  value: function() {
                    this.roomClient.close({ sendLeft: true });
                  }
                },
                {
                  key: "end",
                  value: function() {
                    this.roomClient.closeRoom();
                  }
                },
                {
                  key: "respondEntry",
                  value: function(e3, t3) {
                    this.roomClient.respondEntry(e3, t3);
                  }
                },
                {
                  key: "pinnedParticipants",
                  get: function() {
                    return this.roomClient._pinnedParticipants;
                  }
                },
                {
                  key: "muteMic",
                  value: function() {
                    this.roomClient.disableMic();
                  }
                },
                {
                  key: "unmuteMic",
                  value: function() {
                    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableMic(e3);
                  }
                },
                {
                  key: "publishAudio",
                  value: (v2 = (0, t2.A)(
                    c().mark(function e3() {
                      var t3, r3 = arguments;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return t3 = r3.length > 0 && void 0 !== r3[0] ? r3[0] : void 0, e4.next = 3, this.roomClient.enableMic(t3);
                              case 3:
                                return e4.abrupt("return");
                              case 4:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return v2.apply(this, arguments);
                  })
                },
                {
                  key: "unpublishAudio",
                  value: (g2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.disableMic();
                              case 2:
                                return e4.abrupt("return");
                              case 3:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return g2.apply(this, arguments);
                  })
                },
                {
                  key: "disableWebcam",
                  value: function() {
                    this.roomClient.disableWebcam();
                  }
                },
                {
                  key: "enableWebcam",
                  value: function() {
                    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableWebcam(e3);
                  }
                },
                {
                  key: "publishVideo",
                  value: (f2 = (0, t2.A)(
                    c().mark(function e3() {
                      var t3, r3 = arguments;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return t3 = r3.length > 0 && void 0 !== r3[0] ? r3[0] : void 0, this.roomClient.enableWebcam(t3), e4.abrupt("return");
                              case 3:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return f2.apply(this, arguments);
                  })
                },
                {
                  key: "unpublishVideo",
                  value: (m2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return this.roomClient.disableWebcam(), e4.abrupt("return");
                              case 2:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return m2.apply(this, arguments);
                  })
                },
                {
                  key: "disableScreenShare",
                  value: function() {
                    this.roomClient.disableShare();
                  }
                },
                {
                  key: "enableScreenShare",
                  value: function() {
                    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableShare(e3);
                  }
                },
                {
                  key: "pubblishScreenShare",
                  value: function() {
                    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableShare(e3);
                  }
                },
                {
                  key: "unpublishScreenShare",
                  value: function() {
                    this.roomClient.disableShare();
                  }
                },
                {
                  key: "sendChatMessage",
                  value: function(e3) {
                    this.roomClient.sendChatMessage(e3);
                    var t3 = {
                      text: e3,
                      timestamp: (/* @__PURE__ */ new Date()).getTime(),
                      senderId: this.localParticipant.id,
                      senderName: this.localParticipant.displayName
                    };
                    this.handleNewChatMessage(t3);
                  }
                },
                {
                  key: "pauseAllStreams",
                  value: function(e3) {
                    this.roomClient.pauseAllConsumers(e3);
                  }
                },
                {
                  key: "resumeAllStreams",
                  value: function(e3) {
                    this.roomClient.resumeAllConsumers(e3);
                  }
                },
                {
                  key: "startRecording",
                  value: function(e3, t3, r3, n3) {
                    this.roomClient.startRecording(e3, t3, r3, n3);
                  }
                },
                {
                  key: "stopRecording",
                  value: function() {
                    this.roomClient.stopRecording();
                  }
                },
                {
                  key: "startTranscription",
                  value: function(e3) {
                    this.roomClient.startTranscription(e3);
                  }
                },
                {
                  key: "stopTranscription",
                  value: function() {
                    this.roomClient.stopTranscription();
                  }
                },
                {
                  key: "startLivestream",
                  value: function(e3, t3) {
                    this.roomClient.startLivestream(e3, t3);
                  }
                },
                {
                  key: "stopLivestream",
                  value: function() {
                    this.roomClient.stopLivestream();
                  }
                },
                {
                  key: "startHls",
                  value: (h2 = (0, t2.A)(
                    c().mark(function e3(t3, r3) {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.startHls(t3, r3);
                              case 2:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function(e3, t3) {
                    return h2.apply(this, arguments);
                  })
                },
                {
                  key: "stopHls",
                  value: function() {
                    this.roomClient.stopHls();
                  }
                },
                {
                  key: "createCharacter",
                  value: function(e3) {
                    if (!e3.interactionId && !e3.id)
                      throw new Error("InteractionId or id is required");
                    return new Xe(
                      lt(lt({}, e3), {}, { roomClient: this.roomClient })
                    );
                  }
                },
                {
                  key: "getMics",
                  value: (p2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.getMics();
                              case 2:
                                return e4.abrupt("return", e4.sent);
                              case 3:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return p2.apply(this, arguments);
                  })
                },
                {
                  key: "getWebcams",
                  value: (u2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.getWebcams();
                              case 2:
                                return e4.abrupt("return", e4.sent);
                              case 3:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return u2.apply(this, arguments);
                  })
                },
                {
                  key: "changeMic",
                  value: function(e3) {
                    this.roomClient.changeMic(e3);
                  }
                },
                {
                  key: "changeWebcam",
                  value: function(e3) {
                    this.roomClient.changeWebcam(e3);
                  }
                },
                {
                  key: "replaceWebcamStream",
                  value: function(e3) {
                    this.roomClient.replaceWebcamStream(e3);
                  }
                },
                {
                  key: "setWebcamQuality",
                  value: function(e3) {
                    this.roomClient.setWebcamQuality(e3);
                  }
                },
                {
                  key: "startWhiteboard",
                  value: function() {
                    this.roomClient.startWhiteboard();
                  }
                },
                {
                  key: "stopWhiteboard",
                  value: function() {
                    this.roomClient.stopWhiteboard();
                  }
                },
                {
                  key: "startVideo",
                  value: function(e3) {
                    var t3 = e3.link;
                    this.roomClient.startVideo({ link: t3 });
                  }
                },
                {
                  key: "stopVideo",
                  value: function() {
                    this.roomClient.stopVideo();
                  }
                },
                {
                  key: "resumeVideo",
                  value: function() {
                    this.roomClient.resumeVideo();
                  }
                },
                {
                  key: "refreshConnection",
                  value: function() {
                    this.roomClient.restartIce();
                  }
                },
                {
                  key: "pauseVideo",
                  value: function(e3) {
                    var t3 = e3.currentTime;
                    this.roomClient.pauseVideo(t3);
                  }
                },
                {
                  key: "seekVideo",
                  value: function(e3) {
                    var t3 = e3.currentTime;
                    this.roomClient.seekVideo(t3);
                  }
                },
                {
                  key: "handlePeerAdd",
                  value: function(e3) {
                    var t3 = e3.peer, r3 = new Se(t3);
                    this.participants.set(r3.id, r3), this.eventEmitter.emit(_t, r3), 1 === this.participants.size && this.updateMainParticipant(r3.id);
                  }
                },
                {
                  key: "handlePeerRemove",
                  value: function(e3) {
                    var t3 = e3.peerId, r3 = this.participants.get(t3);
                    null != r3 && (this.participants.delete(t3), this.eventEmitter.emit(yt, r3), this.activePresenterId === r3.id && (this.activePresenterId = null, this.eventEmitter.emit(wt, this.activePresenterId)), this.mainParticipantId === r3.id && (this.participants.size > 0 ? this.updateMainParticipant(
                      this.participants.entries().next().value[1].id
                    ) : this.updateMainParticipant(
                      this.localParticipant.id
                    )));
                  }
                },
                {
                  key: "handleProducerAdd",
                  value: function(e3) {
                    var t3 = e3.producer, r3 = { id: t3.id, rtpSender: t3.rtpSender };
                    this.localParticipant.addProducer(r3);
                    var n3 = new ae(t3);
                    this.localParticipant.addStream(n3), "share" === n3.kind && (this.activePresenterId = this.localParticipant.id, this.eventEmitter.emit(wt, this.activePresenterId), this.updateMainParticipant(this.localParticipant.id));
                  }
                },
                {
                  key: "handleUpdateProducer",
                  value: function(e3) {
                    var t3 = e3.producer, r3 = new ae(t3);
                    this.localParticipant.updateStream(r3);
                  }
                },
                {
                  key: "handleProducerRemove",
                  value: function(e3) {
                    var t3 = e3.producerId;
                    this.localParticipant.removeProducer(t3);
                    var r3 = this.localParticipant.deleteStream(t3);
                    if (r3 && "share" === r3.kind) {
                      this.activePresenterId = null, this.eventEmitter.emit(wt, this.activePresenterId);
                      var n3 = this.participants.size > 0 ? this.participants.entries().next().value[1].id : null;
                      this.updateMainParticipant(
                        this.activeSpeakerId || n3 || this.localParticipant.id
                      );
                    }
                    r3 && "audio" === r3.kind && this.activeSpeakerId === this.localParticipant.id && this.handleSpeakerChange({ peerId: null });
                  }
                },
                {
                  key: "handleConsumerAdd",
                  value: function(e3) {
                    var t3 = e3.consumer, r3 = e3.peerId, n3 = this.participants.get(r3) || this.characters.get(r3);
                    if (n3) {
                      var s2 = { id: t3.id, rtpReceiver: t3.rtpReceiver };
                      n3.addConsumer(s2);
                      var i2 = new ae(t3);
                      n3.addStream(i2), this.eventEmitter.emit(Wt, i2), "share" === i2.kind && (this.activePresenterId = n3.id, this.eventEmitter.emit(wt, this.activePresenterId), this.updateMainParticipant(n3.id));
                    }
                  }
                },
                {
                  key: "handleConsumerResume",
                  value: function(e3) {
                    var t3 = e3.consumerId, r3 = e3.peerId, n3 = this.participants.get(r3);
                    n3 && n3.streamResumed(t3);
                  }
                },
                {
                  key: "handleConsumerPause",
                  value: function(e3) {
                    var t3 = e3.consumerId, r3 = e3.peerId, n3 = this.participants.get(r3);
                    n3 && n3.streamPaused(t3);
                  }
                },
                {
                  key: "handleConsumerRemove",
                  value: function(e3) {
                    var t3 = e3.consumerId, r3 = e3.peerId, n3 = this.participants.get(r3) || this.characters.get(r3);
                    if (null != n3 && n3) {
                      n3.removeConsumer(t3);
                      var s2 = n3.deleteStream(t3);
                      if (this.eventEmitter.emit(qt, s2), s2 && "share" === s2.kind) {
                        this.activePresenterId = null, this.eventEmitter.emit(wt, this.activePresenterId);
                        var i2 = this.participants.size > 0 ? this.participants.entries().next().value[1].id : null;
                        this.updateMainParticipant(
                          this.activeSpeakerId || i2 || this.localParticipant.id
                        );
                      }
                    }
                  }
                },
                {
                  key: "handleParticipantMediaStateChanged",
                  value: function(e3) {
                    var t3 = e3.peerId, r3 = e3.kind, n3 = e3.newState, s2 = this.participants.get(t3) || this.characters.get(t3);
                    this.localParticipant.id == t3 && (s2 = this.localParticipant), s2 && s2 && ("audio" == r3 ? s2.micOn = n3 : "video" == r3 && (s2.webcamOn = n3), s2.updateParticipantMediaState(r3, n3));
                  }
                },
                {
                  key: "handleParticipantPausedBySubManager",
                  value: function(e3) {
                    var t3 = this.participants.get(e3.peerId);
                    t3 && t3 && t3.handleParticipantPause(e3);
                  }
                },
                {
                  key: "handleParticipantResumeBySubManager",
                  value: function(e3) {
                    var t3 = this.participants.get(e3.peerId);
                    t3 && t3 && t3.handleParticipantResume(e3);
                  }
                },
                {
                  key: "handleSpeakerChange",
                  value: function(e3) {
                    var t3 = e3.peerId;
                    this.activeSpeakerId !== t3 && (this.activeSpeakerId = t3, this.eventEmitter.emit(bt, t3), t3 && t3 !== this.localParticipant.id && this.activePresenterId !== this.mainParticipantId && t3 !== this.mainParticipantId && this.updateMainParticipant(t3));
                  }
                },
                {
                  key: "handleNewChatMessage",
                  value: function(e3) {
                    var t3 = e3.senderId, r3 = { senderId: t3, text: e3.text, timestamp: e3.timestamp };
                    if (this.localParticipant.id === t3)
                      r3.senderName = this.localParticipant.displayName;
                    else {
                      var n3 = this.participants.get(t3);
                      n3 && (r3.senderName = n3.displayName);
                    }
                    this.messages.push(r3), this.eventEmitter.emit(Rt, r3);
                  }
                },
                {
                  key: "updateMainParticipant",
                  value: function(e3) {
                    this.mainParticipantId = e3;
                    var t3 = null;
                    t3 = e3 === this.localParticipant.id ? this.localParticipant : this.participants.get(this.mainParticipantId), this.eventEmitter.emit(St, t3);
                  }
                },
                {
                  key: "handleEntryRequested",
                  value: function(e3) {
                    var t3 = this, r3 = e3.id, n3 = e3.name;
                    this.eventEmitter.emit(kt, {
                      participantId: r3,
                      name: n3,
                      allow: function() {
                        t3.roomClient.respondEntry(r3, "allowed");
                      },
                      deny: function() {
                        t3.roomClient.respondEntry(r3, "denied");
                      }
                    });
                  }
                },
                {
                  key: "handleEntryResponded",
                  value: function(e3) {
                    var t3 = e3.id, r3 = e3.decision;
                    this.eventEmitter.emit(Et, t3, r3);
                  }
                },
                {
                  key: "handleMeetingJoined",
                  value: function(e3) {
                    var t3 = e3.peers, r3 = e3.poll, n3 = e3.messages, s2 = e3.baseUrl, i2 = e3.switchRoomId;
                    "string" == typeof i2 && (this.id = i2), this.baseUrl = s2, n3.length > 0 && (this.messages = n3), this.eventEmitter.emit(ft, {
                      switchRoomId: i2 || null,
                      peers: t3,
                      poll: r3,
                      messages: n3
                    });
                  }
                },
                {
                  key: "handleMeetingLeft",
                  value: function(e3) {
                    this.eventEmitter.emit(gt, e3);
                  }
                },
                {
                  key: "handleRecordingStateChanged",
                  value: function(e3) {
                    this.recordingState = e3.status, this.eventEmitter.emit(Ct, e3);
                  }
                },
                {
                  key: "handleLivestreamStateChanged",
                  value: function(e3) {
                    this.livestreamState = e3.status, this.eventEmitter.emit(Ot, e3);
                  }
                },
                {
                  key: "handleHlsStateChanged",
                  value: function(e3) {
                    this.hlsState = e3.status, "HLS_PLAYABLE" == e3.status ? this.hlsUrls = {
                      downstreamUrl: e3.downstreamUrl,
                      playbackHlsUrl: e3.playbackHlsUrl,
                      livestreamUrl: e3.livestreamUrl
                    } : "HLS_STOPPED" == e3.status && (this.hlsUrls = {
                      downstreamUrl: null,
                      playbackHlsUrl: null,
                      livestreamUrl: null
                    }), this.eventEmitter.emit(It, e3);
                  }
                },
                {
                  key: "handleTranscriptionStateChanged",
                  value: function(e3) {
                    this.transcriptionState = e3.status, this.eventEmitter.emit(Qt, e3);
                  }
                },
                {
                  key: "handleTranscriptionText",
                  value: function(e3) {
                    this.eventEmitter.emit(Yt, e3);
                  }
                },
                {
                  key: "handleRecordingStarted",
                  value: function() {
                    this.eventEmitter.emit(Tt);
                  }
                },
                {
                  key: "handleRecordingStopped",
                  value: function() {
                    this.eventEmitter.emit(Pt);
                  }
                },
                {
                  key: "handleLivestreamStarted",
                  value: function() {
                    this.eventEmitter.emit(xt);
                  }
                },
                {
                  key: "handleLivestreamStopped",
                  value: function() {
                    this.eventEmitter.emit(Dt);
                  }
                },
                {
                  key: "handleHlsStarted",
                  value: function(e3) {
                    this.eventEmitter.emit(At, e3);
                  }
                },
                {
                  key: "handleHlsStopped",
                  value: function() {
                    this.eventEmitter.emit(Mt);
                  }
                },
                {
                  key: "handleWhiteboardStarted",
                  value: function(e3) {
                    this.eventEmitter.emit(Lt, e3);
                  }
                },
                {
                  key: "handleWhiteboardStopped",
                  value: function(e3) {
                    !function(e4) {
                      if (null == e4)
                        throw new TypeError("Cannot destructure " + e4);
                    }(e3), this.eventEmitter.emit(Nt);
                  }
                },
                {
                  key: "handleAddCharacter",
                  value: function(e3) {
                    var t3, r3 = e3.id, n3 = null !== (t3 = this.characters.get(r3)) && void 0 !== t3 ? t3 : new Xe(
                      lt(
                        lt({}, e3),
                        {},
                        {
                          state: Ce.CHARACTER_LISTENING,
                          roomClient: this.roomClient
                        }
                      )
                    );
                    this.characters.set(r3, n3), this.eventEmitter.emit(Xt, n3), n3.eventEmitter.emit(Xt);
                  }
                },
                {
                  key: "handleInitCharacter",
                  value: function(e3) {
                    this.characters.set(e3.id, e3);
                  }
                },
                {
                  key: "handleRemoveCharacter",
                  value: function(e3) {
                    var t3 = e3.id;
                    if (this.characters.has(t3)) {
                      var r3 = this.characters.get(t3);
                      this.eventEmitter.emit(Zt, r3), r3.eventEmitter.emit(Zt), this.characters.delete(t3);
                    }
                  }
                },
                {
                  key: "handleCharacterStateChanged",
                  value: function(e3) {
                    var t3 = e3.id;
                    this.characters.has(t3) && this.characters.get(t3).handleCharacterStateChanged(e3);
                  }
                },
                {
                  key: "handleCharacterMessage",
                  value: function(e3) {
                    var t3 = e3.id;
                    this.characters.has(t3) && this.characters.get(t3).handleCharacterMessage(e3);
                  }
                },
                {
                  key: "handleUserMessage",
                  value: function(e3) {
                    var t3 = e3.id;
                    this.characters.has(t3) && this.characters.get(t3).handleUserMessage(e3);
                  }
                },
                {
                  key: "handleOnCharacterData",
                  value: function(e3) {
                    var t3 = e3.id;
                    this.characters.has(t3) && this.characters.get(t3).handleCharacterData(e3);
                  }
                },
                {
                  key: "handleOnRemoveCurrentMeetingParticipant",
                  value: function() {
                    var e3 = this;
                    (0, q.A)(this.participants.keys()).forEach(function(t3) {
                      t3 !== e3.localParticipant.id && e3.handlePeerRemove({ peerId: t3 });
                    });
                  }
                },
                {
                  key: "handleVideoStateChanged",
                  value: function(e3) {
                    this.eventEmitter.emit(jt, e3);
                  }
                },
                {
                  key: "handleVideoSeeked",
                  value: function(e3) {
                    var t3 = e3.currentTime;
                    this.eventEmitter.emit(Bt, { currentTime: t3 });
                  }
                },
                {
                  key: "handlePinStateChanged",
                  value: function(e3) {
                    var t3 = e3.peerId, r3 = e3.state, n3 = e3.pinnedBy;
                    this.eventEmitter.emit(Vt, {
                      participantId: t3,
                      state: r3,
                      pinnedBy: n3
                    });
                  }
                },
                {
                  key: "handleMeetingStateChanged",
                  value: function(e3) {
                    var t3 = e3.state;
                    this.eventEmitter.emit(Kt, { state: t3 });
                  }
                },
                {
                  key: "handleConsumersPaused",
                  value: function(e3) {
                    var t3 = e3.kind;
                    this.eventEmitter.emit($t, { kind: t3 });
                  }
                },
                {
                  key: "handleConsumersResumed",
                  value: function(e3) {
                    var t3 = e3.kind;
                    this.eventEmitter.emit(Jt, { kind: t3 });
                  }
                },
                {
                  key: "handleVideoQualityChanged",
                  value: function(e3) {
                    var t3 = e3.peerId, r3 = e3.prevQuality, n3 = e3.currentQuality, s2 = this.participants.get(t3) || this.characters.get(t3);
                    s2 && s2 && s2.videoQualityChanged(r3, n3);
                  }
                },
                {
                  key: "handleMicRequested",
                  value: function(e3) {
                    var t3 = this, r3 = e3.peerId;
                    this.eventEmitter.emit(Ft, {
                      participantId: r3,
                      accept: function() {
                        return t3.unmuteMic();
                      },
                      reject: function() {
                      }
                    });
                  }
                },
                {
                  key: "handleWebcamRequested",
                  value: function(e3) {
                    var t3 = this, r3 = e3.peerId;
                    this.eventEmitter.emit(Ut, {
                      participantId: r3,
                      accept: function() {
                        return t3.enableWebcam();
                      },
                      reject: function() {
                      }
                    });
                  }
                },
                {
                  key: "handleConnectionParticipantJoin",
                  value: function(e3) {
                    var t3 = e3.roomId, r3 = e3.peer, n3 = this.connections.get(t3);
                    null != n3 && n3.meeting.participantJoin(r3);
                  }
                },
                {
                  key: "handleConnectionParticipantLeft",
                  value: function(e3) {
                    var t3 = e3.roomId, r3 = e3.peerId, n3 = this.connections.get(t3);
                    null != n3 && n3.meeting.participantLeft(r3);
                  }
                },
                {
                  key: "handleConnectionOpen",
                  value: function(e3) {
                    var t3 = e3.peers, r3 = e3.roomId, n3 = e3.payload, s2 = new ct({ roomId: r3, peers: t3, payload: n3 });
                    this.connections.set(s2.id, s2), this.eventEmitter.emit(Ht, s2);
                  }
                },
                {
                  key: "handleConnectionClose",
                  value: function(e3) {
                    var t3 = e3.roomId;
                    null != this.connections.get(t3) && (this.connections.delete(t3), this.eventEmitter.emit(zt, t3));
                  }
                },
                {
                  key: "enableAdaptiveSubscription",
                  value: (l2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.enableAdaptiveSubscription();
                              case 2:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return l2.apply(this, arguments);
                  })
                },
                {
                  key: "disableAdaptiveSubscription",
                  value: (d2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.disableAdaptiveSubscription();
                              case 2:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return d2.apply(this, arguments);
                  })
                },
                {
                  key: "enableE2EE",
                  value: (o2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.toggleE2EEEnabled(true);
                              case 2:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return o2.apply(this, arguments);
                  })
                },
                {
                  key: "disableE2EE",
                  value: (n2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.toggleE2EEEnabled(false);
                              case 2:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return n2.apply(this, arguments);
                  })
                },
                {
                  key: "handleSwitchMeeting",
                  value: function(e3) {
                    var t3 = e3.roomId, r3 = e3.token, n3 = e3.payload, s2 = e3.peerId, i2 = e3.connectionPeerId, a2 = e3.connectionRoomId, o3 = s2 ? {
                      meetingId: t3,
                      payload: n3,
                      token: r3,
                      participantId: s2
                    } : {
                      meetingId: t3,
                      payload: n3,
                      token: r3,
                      connectionParticipantId: i2,
                      connectionMeetingId: a2
                    };
                    this.eventEmitter.emit(Gt, o3);
                  }
                },
                {
                  key: "handleConnectionChatMessage",
                  value: function(e3) {
                    var t3 = e3.roomId, r3 = e3.peerId, n3 = e3.message, s2 = this.connections.get(t3);
                    null != s2 && s2.meeting.sendChatMessageEvent({
                      participantId: r3,
                      message: n3
                    });
                  }
                },
                {
                  key: "handleE2EEStateChange",
                  value: function(e3) {
                    var t3 = e3.peerId, r3 = this.localParticipant.id == t3 ? this.localParticipant : this.participants.get(t3) || this.characters.get(t3);
                    r3 && r3 && r3.handleE2EEStateChange(e3);
                  }
                },
                {
                  key: "connectTo",
                  value: (r2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, n3;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return r3 = t3.meetingId, n3 = t3.payload, e4.next = 3, this.roomClient.openConnection({
                                  roomId: r3,
                                  payload: n3
                                });
                              case 3:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function(e3) {
                    return r2.apply(this, arguments);
                  })
                },
                {
                  key: "switchTo",
                  value: function(e3) {
                    var t3 = e3.meetingId, r3 = e3.token;
                    if (!t3 || "string" != typeof t3 || "" === t3.trim())
                      throw new Error(
                        "Invalid meetingId: must be a non-empty string"
                      );
                    this.roomClient.switchTo({
                      meetingId: t3,
                      token: r3,
                      participantId: this.localParticipant.id
                    });
                  }
                },
                {
                  key: "selectedCameraDevice",
                  get: function() {
                    var e3;
                    return null === (e3 = this.roomClient._webcam) || void 0 === e3 ? void 0 : e3.device;
                  }
                },
                {
                  key: "selectedMicrophoneDevice",
                  get: function() {
                    var e3;
                    return null === (e3 = this.roomClient._mic) || void 0 === e3 ? void 0 : e3.device;
                  }
                },
                {
                  key: "on",
                  value: function(e3, t3) {
                    switch (e3) {
                      case _t:
                      case yt:
                      case bt:
                      case wt:
                      case St:
                      case Rt:
                      case kt:
                      case Et:
                      case Ct:
                      case Tt:
                      case Pt:
                      case Ot:
                      case xt:
                      case Dt:
                      case At:
                      case Mt:
                      case It:
                      case Qt:
                      case Yt:
                      case Wt:
                      case qt:
                      case Lt:
                      case Nt:
                      case Xt:
                      case Zt:
                      case ft:
                      case gt:
                      case jt:
                      case Bt:
                      case Ft:
                      case Ut:
                      case Vt:
                      case Ht:
                      case zt:
                      case Gt:
                      case Kt:
                      case vt:
                      case $t:
                      case Jt:
                      case mt:
                        this.eventEmitter.on(e3, t3);
                        break;
                      default:
                        throw new Error("Invalid event type " + e3);
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e3, t3) {
                    switch (e3) {
                      case _t:
                      case yt:
                      case bt:
                      case wt:
                      case St:
                      case Rt:
                      case kt:
                      case Et:
                      case Ct:
                      case Tt:
                      case Pt:
                      case Ot:
                      case xt:
                      case Dt:
                      case It:
                      case At:
                      case Mt:
                      case Qt:
                      case Yt:
                      case Wt:
                      case qt:
                      case Lt:
                      case Nt:
                      case Xt:
                      case Zt:
                      case ft:
                      case gt:
                      case jt:
                      case Bt:
                      case Ft:
                      case Ut:
                      case Vt:
                      case Ht:
                      case zt:
                      case Gt:
                      case Kt:
                      case mt:
                      case vt:
                      case $t:
                      case Jt:
                        this.eventEmitter.off(e3, t3);
                        break;
                      default:
                        throw new Error("Invalid event type.");
                    }
                  }
                }
              ]
            );
            var r2, n2, o2, d2, l2, u2, p2, h2, m2, f2, g2, v2;
          }();
          function nr(e3) {
            var t3 = e3.topic, r2 = e3.message, n2 = e3.senderId, s2 = e3.timestamp, i2 = e3.senderName, a2 = e3.id, o2 = e3.payload;
            t3 && r2 && pt(er, this).emit(t3, {
              message: r2,
              senderId: n2,
              timestamp: s2,
              topic: t3,
              senderName: i2,
              id: a2,
              payload: o2
            });
          }
          function sr(e3) {
            var t3 = e3.peerId, r2 = e3.mode;
            t3 === this.localParticipant.id ? this.localParticipant.mode = r2 : this.participants.get(t3).mode = r2, this.activePresenterId !== this.localParticipant.id || (0, Te.kR)(r2) || (this.activePresenterId = null, this.eventEmitter.emit(wt, this.activePresenterId)), this.eventEmitter.emit(vt, { participantId: t3, mode: r2 });
          }
          var ir = r(7080), ar = r(5071), or = r(4973), cr = r(9027);
          function dr(e3, t3, r2) {
            return t3 = (0, ke.A)(t3), (0, Re.A)(
              e3,
              lr() ? Reflect.construct(t3, r2 || [], (0, ke.A)(e3).constructor) : t3.apply(e3, r2)
            );
          }
          function lr() {
            try {
              var e3 = !Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {
                })
              );
            } catch (e4) {
            }
            return (lr = function() {
              return !!e3;
            })();
          }
          var ur = function(e3) {
            function t3(e4, r2, n2, i2) {
              return (0, s.A)(this, t3), dr(this, t3, [e4, r2, n2, i2]);
            }
            return (0, Ee.A)(t3, e3), (0, i.A)(t3);
          }(
            (0, i.A)(function e3(t3, r2, n2, i2) {
              (0, s.A)(this, e3), this.deviceId = t3, this.groupId = r2, this.kind = n2, this.label = i2;
            })
          ), pr = function(e3) {
            function t3(e4, r2, n2, i2) {
              return (0, s.A)(this, t3), dr(this, t3, [e4, r2, n2, i2]);
            }
            return (0, Ee.A)(t3, e3), (0, i.A)(t3);
          }(ur), hr = function(e3) {
            function t3(e4, r2, n2, i2) {
              return (0, s.A)(this, t3), dr(this, t3, [e4, r2, n2, i2]);
            }
            return (0, Ee.A)(t3, e3), (0, i.A)(t3);
          }(ur), mr = function(e3) {
            function t3(e4, r2, n2, i2) {
              return (0, s.A)(this, t3), dr(this, t3, [e4, r2, n2, i2]);
            }
            return (0, Ee.A)(t3, e3), (0, i.A)(t3);
          }(ur), fr = {
            AUDIO: "audio",
            VIDEO: "video",
            AUDIO_AND_VIDEO: "audio_video"
          }, gr = (r(328), r(7654));
          function vr(e3, t3) {
            return null == e3 || null == t3 ? NaN : e3 < t3 ? -1 : e3 > t3 ? 1 : e3 >= t3 ? 0 : NaN;
          }
          function _r(e3, t3) {
            return null == e3 || null == t3 ? NaN : t3 < e3 ? -1 : t3 > e3 ? 1 : t3 >= e3 ? 0 : NaN;
          }
          function yr(e3) {
            let t3, r2, n2;
            function s2(e4, n3, s3 = 0, i2 = e4.length) {
              if (s3 < i2) {
                if (0 !== t3(n3, n3)) return i2;
                do {
                  const t4 = s3 + i2 >>> 1;
                  r2(e4[t4], n3) < 0 ? s3 = t4 + 1 : i2 = t4;
                } while (s3 < i2);
              }
              return s3;
            }
            return 2 !== e3.length ? (t3 = vr, r2 = (t4, r3) => vr(e3(t4), r3), n2 = (t4, r3) => e3(t4) - r3) : (t3 = e3 === vr || e3 === _r ? e3 : br, r2 = e3, n2 = e3), {
              left: s2,
              center: function(e4, t4, r3 = 0, i2 = e4.length) {
                const a2 = s2(e4, t4, r3, i2 - 1);
                return a2 > r3 && n2(e4[a2 - 1], t4) > -n2(e4[a2], t4) ? a2 - 1 : a2;
              },
              right: function(e4, n3, s3 = 0, i2 = e4.length) {
                if (s3 < i2) {
                  if (0 !== t3(n3, n3)) return i2;
                  do {
                    const t4 = s3 + i2 >>> 1;
                    r2(e4[t4], n3) <= 0 ? s3 = t4 + 1 : i2 = t4;
                  } while (s3 < i2);
                }
                return s3;
              }
            };
          }
          function br() {
            return 0;
          }
          const wr = yr(vr), Sr = wr.right, Rr = (wr.left, yr(function(e3) {
            return null === e3 ? NaN : +e3;
          }).center, Sr);
          function kr(e3, t3) {
            switch (arguments.length) {
              case 0:
                break;
              case 1:
                this.range(e3);
                break;
              default:
                this.range(t3).domain(e3);
            }
            return this;
          }
          function Er() {
            var e3, t3 = [0.5], r2 = [0, 1], n2 = 1;
            function s2(s3) {
              return null != s3 && s3 <= s3 ? r2[Rr(t3, s3, 0, n2)] : e3;
            }
            return s2.domain = function(e4) {
              return arguments.length ? (t3 = Array.from(e4), n2 = Math.min(t3.length, r2.length - 1), s2) : t3.slice();
            }, s2.range = function(e4) {
              return arguments.length ? (r2 = Array.from(e4), n2 = Math.min(t3.length, r2.length - 1), s2) : r2.slice();
            }, s2.invertExtent = function(e4) {
              var n3 = r2.indexOf(e4);
              return [t3[n3 - 1], t3[n3]];
            }, s2.unknown = function(t4) {
              return arguments.length ? (e3 = t4, s2) : e3;
            }, s2.copy = function() {
              return Er().domain(t3).range(r2).unknown(e3);
            }, kr.apply(s2, arguments);
          }
          function Cr(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(e3);
              t3 && (n2 = n2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, n2);
            }
            return r2;
          }
          function Tr(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? Cr(Object(r2), true).forEach(function(t4) {
                Dr(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : Cr(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          function Pr(e3, t3) {
            if (!(e3 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          }
          function Or(e3, t3) {
            for (var r2 = 0; r2 < t3.length; r2++) {
              var n2 = t3[r2];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e3, Gr(n2.key), n2);
            }
          }
          function xr(e3, t3, r2) {
            return t3 && Or(e3.prototype, t3), r2 && Or(e3, r2), Object.defineProperty(e3, "prototype", { writable: false }), e3;
          }
          function Dr(e3, t3, r2) {
            return (t3 = Gr(t3)) in e3 ? Object.defineProperty(e3, t3, {
              value: r2,
              enumerable: true,
              configurable: true,
              writable: true
            }) : e3[t3] = r2, e3;
          }
          function Ir(e3, t3) {
            if ("function" != typeof t3 && null !== t3)
              throw new TypeError(
                "Super expression must either be null or a function"
              );
            e3.prototype = Object.create(t3 && t3.prototype, {
              constructor: { value: e3, writable: true, configurable: true }
            }), Object.defineProperty(e3, "prototype", { writable: false }), t3 && Mr(e3, t3);
          }
          function Ar(e3) {
            return Ar = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            }, Ar(e3);
          }
          function Mr(e3, t3) {
            return Mr = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e4, t4) {
              return e4.__proto__ = t4, e4;
            }, Mr(e3, t3);
          }
          function Lr(e3, t3) {
            if (null == e3) return {};
            var r2, n2, s2 = function(e4, t4) {
              if (null == e4) return {};
              var r3, n3, s3 = {}, i3 = Object.keys(e4);
              for (n3 = 0; n3 < i3.length; n3++)
                r3 = i3[n3], t4.indexOf(r3) >= 0 || (s3[r3] = e4[r3]);
              return s3;
            }(e3, t3);
            if (Object.getOwnPropertySymbols) {
              var i2 = Object.getOwnPropertySymbols(e3);
              for (n2 = 0; n2 < i2.length; n2++)
                r2 = i2[n2], t3.indexOf(r2) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, r2) && (s2[r2] = e3[r2]);
            }
            return s2;
          }
          function Nr(e3) {
            if (void 0 === e3)
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            return e3;
          }
          function jr(e3) {
            var t3 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct) return false;
              if (Reflect.construct.sham) return false;
              if ("function" == typeof Proxy) return true;
              try {
                return Boolean.prototype.valueOf.call(
                  Reflect.construct(Boolean, [], function() {
                  })
                ), true;
              } catch (e4) {
                return false;
              }
            }();
            return function() {
              var r2, n2 = Ar(e3);
              if (t3) {
                var s2 = Ar(this).constructor;
                r2 = Reflect.construct(n2, arguments, s2);
              } else r2 = n2.apply(this, arguments);
              return function(e4, t4) {
                if (t4 && ("object" == typeof t4 || "function" == typeof t4))
                  return t4;
                if (void 0 !== t4)
                  throw new TypeError(
                    "Derived constructors may only return object or undefined"
                  );
                return Nr(e4);
              }(this, r2);
            };
          }
          function Br(e3, t3) {
            for (; !Object.prototype.hasOwnProperty.call(e3, t3) && null !== (e3 = Ar(e3)); ) ;
            return e3;
          }
          function Fr() {
            return Fr = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e3, t3, r2) {
              var n2 = Br(e3, t3);
              if (n2) {
                var s2 = Object.getOwnPropertyDescriptor(n2, t3);
                return s2.get ? s2.get.call(arguments.length < 3 ? e3 : r2) : s2.value;
              }
            }, Fr.apply(this, arguments);
          }
          function Ur(e3, t3, r2, n2) {
            return Ur = "undefined" != typeof Reflect && Reflect.set ? Reflect.set : function(e4, t4, r3, n3) {
              var s2, i2 = Br(e4, t4);
              if (i2) {
                if ((s2 = Object.getOwnPropertyDescriptor(i2, t4)).set)
                  return s2.set.call(n3, r3), true;
                if (!s2.writable) return false;
              }
              if (s2 = Object.getOwnPropertyDescriptor(n3, t4)) {
                if (!s2.writable) return false;
                s2.value = r3, Object.defineProperty(n3, t4, s2);
              } else Dr(n3, t4, r3);
              return true;
            }, Ur(e3, t3, r2, n2);
          }
          function Wr(e3, t3, r2, n2, s2) {
            if (!Ur(e3, t3, r2, n2 || e3) && s2)
              throw new TypeError("failed to set property");
            return r2;
          }
          function qr(e3, t3) {
            return function(e4) {
              if (Array.isArray(e4)) return e4;
            }(e3) || function(e4, t4) {
              var r2 = null == e4 ? null : "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (null != r2) {
                var n2, s2, i2, a2, o2 = [], c2 = true, d2 = false;
                try {
                  if (i2 = (r2 = r2.call(e4)).next, 0 === t4) {
                    if (Object(r2) !== r2) return;
                    c2 = false;
                  } else
                    for (; !(c2 = (n2 = i2.call(r2)).done) && (o2.push(n2.value), o2.length !== t4); c2 = true) ;
                } catch (e5) {
                  d2 = true, s2 = e5;
                } finally {
                  try {
                    if (!c2 && null != r2.return && (a2 = r2.return(), Object(a2) !== a2))
                      return;
                  } finally {
                    if (d2) throw s2;
                  }
                }
                return o2;
              }
            }(e3, t3) || Hr(e3, t3) || function() {
              throw new TypeError(
                "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }();
          }
          function Vr(e3) {
            return function(e4) {
              if (Array.isArray(e4)) return zr(e4);
            }(e3) || function(e4) {
              if ("undefined" != typeof Symbol && null != e4[Symbol.iterator] || null != e4["@@iterator"])
                return Array.from(e4);
            }(e3) || Hr(e3) || function() {
              throw new TypeError(
                "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }();
          }
          function Hr(e3, t3) {
            if (e3) {
              if ("string" == typeof e3) return zr(e3, t3);
              var r2 = Object.prototype.toString.call(e3).slice(8, -1);
              return "Object" === r2 && e3.constructor && (r2 = e3.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e3) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? zr(e3, t3) : void 0;
            }
          }
          function zr(e3, t3) {
            (null == t3 || t3 > e3.length) && (t3 = e3.length);
            for (var r2 = 0, n2 = new Array(t3); r2 < t3; r2++) n2[r2] = e3[r2];
            return n2;
          }
          function Gr(e3) {
            var t3 = function(e4, t4) {
              if ("object" != typeof e4 || null === e4) return e4;
              var r2 = e4[Symbol.toPrimitive];
              if (void 0 !== r2) {
                var n2 = r2.call(e4, t4 || "default");
                if ("object" != typeof n2) return n2;
                throw new TypeError(
                  "@@toPrimitive must return a primitive value."
                );
              }
              return ("string" === t4 ? String : Number)(e4);
            }(e3, "string");
            return "symbol" == typeof t3 ? t3 : String(t3);
          }
          function Kr(e3, t3) {
            return function(e4, t4) {
              if (t4.get) return t4.get.call(e4);
              return t4.value;
            }(e3, Jr(e3, t3, "get"));
          }
          function $r(e3, t3, r2) {
            return function(e4, t4, r3) {
              if (t4.set) t4.set.call(e4, r3);
              else {
                if (!t4.writable)
                  throw new TypeError(
                    "attempted to set read only private field"
                  );
                t4.value = r3;
              }
            }(e3, Jr(e3, t3, "set"), r2), r2;
          }
          function Jr(e3, t3, r2) {
            if (!t3.has(e3))
              throw new TypeError(
                "attempted to " + r2 + " private field on non-instance"
              );
            return t3.get(e3);
          }
          function Qr(e3, t3, r2) {
            if (!t3.has(e3))
              throw new TypeError(
                "attempted to get private field on non-instance"
              );
            return r2;
          }
          function Yr(e3, t3) {
            if (t3.has(e3))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          }
          function Xr(e3, t3, r2) {
            Yr(e3, t3), t3.set(e3, r2);
          }
          function Zr(e3, t3) {
            Yr(e3, t3), t3.add(e3);
          }
          var en = "https://speed.cloudflare.com", tn = {
            autoStart: true,
            downloadApiUrl: "".concat(en, "/__down"),
            uploadApiUrl: "".concat(en, "/__up"),
            logMeasurementApiUrl: null,
            logAimApiUrl: "https://aim.cloudflare.com/__log",
            turnServerUri: "turn.speed.cloudflare.com:50000",
            turnServerCredsApiUrl: "".concat(en, "/turn-creds"),
            turnServerUser: null,
            turnServerPass: null,
            rpkiInvalidHost: "invalid.rpki.cloudflare.com",
            cfTraceUrl: "".concat(en, "/cdn-cgi/trace"),
            includeCredentials: false,
            measurements: [
              { type: "latency", numPackets: 1 },
              { type: "download", bytes: 1e5, count: 1, bypassMinDuration: true },
              { type: "latency", numPackets: 20 },
              { type: "download", bytes: 1e5, count: 9 },
              { type: "download", bytes: 1e6, count: 8 },
              { type: "upload", bytes: 1e5, count: 8 },
              {
                type: "packetLoss",
                numPackets: 1e3,
                batchSize: 10,
                batchWaitTime: 10,
                responsesWaitTime: 3e3
              },
              { type: "upload", bytes: 1e6, count: 6 },
              { type: "download", bytes: 1e7, count: 6 },
              { type: "upload", bytes: 1e7, count: 4 },
              { type: "download", bytes: 25e6, count: 4 },
              { type: "upload", bytes: 25e6, count: 4 },
              { type: "download", bytes: 1e8, count: 3 },
              { type: "upload", bytes: 5e7, count: 3 },
              { type: "download", bytes: 25e7, count: 2 }
            ],
            measureDownloadLoadedLatency: true,
            measureUploadLoadedLatency: true,
            loadedLatencyThrottle: 400,
            bandwidthFinishRequestDuration: 1e3,
            estimatedServerTime: 10,
            latencyPercentile: 0.5,
            bandwidthPercentile: 0.9,
            bandwidthMinRequestDuration: 10,
            loadedRequestMinDuration: 250,
            loadedLatencyMaxPoints: 20
          }, rn = {
            aimMeasurementScoring: {
              packetLoss: Er([0.01, 0.05, 0.25, 0.5], [10, 5, 0, -10, -20]),
              latency: Er([10, 20, 50, 100, 500], [20, 10, 5, 0, -10, -20]),
              loadedLatencyIncrease: Er(
                [10, 20, 50, 100, 500],
                [20, 10, 5, 0, -10, -20]
              ),
              jitter: Er([10, 20, 100, 500], [10, 5, 0, -10, -20]),
              download: Er([1e6, 1e7, 5e7, 1e8], [0, 5, 10, 20, 30]),
              upload: Er([1e6, 1e7, 5e7, 1e8], [0, 5, 10, 20, 30])
            },
            aimExperiencesDefs: {
              streaming: {
                input: [
                  "latency",
                  "packetLoss",
                  "download",
                  "loadedLatencyIncrease"
                ],
                pointThresholds: [15, 20, 40, 60]
              },
              gaming: {
                input: ["latency", "packetLoss", "loadedLatencyIncrease"],
                pointThresholds: [5, 15, 25, 30]
              },
              rtc: {
                input: [
                  "latency",
                  "jitter",
                  "packetLoss",
                  "loadedLatencyIncrease"
                ],
                pointThresholds: [5, 15, 25, 40]
              }
            }
          }, nn = function(e3) {
            var t3 = e3.headers.get("server-timing");
            if (t3) {
              var r2 = t3.match(/dur=([0-9.]+)/);
              if (r2) return +r2[1];
            }
          }, sn = function(e3) {
            return e3.responseStart - e3.requestStart;
          }, an = function(e3) {
            return e3.responseEnd - e3.responseStart;
          }, on = function(e3) {
            return e3.ping + e3.payloadDownloadTime;
          }, cn = function(e3) {
            return e3.ttfb;
          }, dn = function(e3, t3) {
            var r2 = e3.duration, n2 = e3.transferSize, s2 = r2 / 1e3;
            return s2 ? 8 * (n2 || 1.005 * +t3) / s2 : void 0;
          }, ln = function(e3, t3) {
            var r2 = e3.duration / 1e3;
            return r2 ? 8 * t3 * 1.005 / r2 : void 0;
          }, un = gr(function(e3) {
            return "0".repeat(e3);
          }), pn = /* @__PURE__ */ new WeakMap(), hn = /* @__PURE__ */ new WeakMap(), mn = /* @__PURE__ */ new WeakMap(), fn = /* @__PURE__ */ new WeakMap(), gn = /* @__PURE__ */ new WeakMap(), vn = /* @__PURE__ */ new WeakMap(), _n = /* @__PURE__ */ new WeakMap(), yn = /* @__PURE__ */ new WeakMap(), bn = /* @__PURE__ */ new WeakMap(), wn = /* @__PURE__ */ new WeakMap(), Sn = /* @__PURE__ */ new WeakMap(), Rn = /* @__PURE__ */ new WeakMap(), kn = /* @__PURE__ */ new WeakMap(), En = /* @__PURE__ */ new WeakMap(), Cn = /* @__PURE__ */ new WeakMap(), Tn = /* @__PURE__ */ new WeakMap(), Pn = /* @__PURE__ */ new WeakMap(), On = /* @__PURE__ */ new WeakMap(), xn = /* @__PURE__ */ new WeakMap(), Dn = /* @__PURE__ */ new WeakMap(), In = /* @__PURE__ */ new WeakMap(), An = /* @__PURE__ */ new WeakMap(), Mn = /* @__PURE__ */ new WeakSet(), Ln = /* @__PURE__ */ new WeakSet(), Nn = /* @__PURE__ */ new WeakSet(), jn = /* @__PURE__ */ new WeakSet();
          function Bn(e3) {
            var t3 = this;
            e3 !== Kr(this, Rn) && ($r(this, Rn, e3), setTimeout(function() {
              return Kr(t3, fn).call(t3, Kr(t3, Rn));
            }));
          }
          function Fn(e3, t3) {
            var r2 = this, n2 = Kr(this, bn)[e3], s2 = n2.bytes, i2 = n2.dir, a2 = Kr(this, En), o2 = a2[i2].hasOwnProperty(s2) ? a2[i2][s2] : {
              timings: [],
              numMeasurements: Kr(this, bn).filter(function(e4) {
                var t4 = e4.bytes, r3 = e4.dir;
                return s2 === t4 && i2 === r3;
              }).map(function(e4) {
                return e4.count;
              }).reduce(function(e4, t4) {
                return e4 + t4;
              }, 0)
            };
            t3 && o2.timings.push(t3), o2.timings = o2.timings.slice(-o2.numMeasurements), a2[i2][s2] = o2, t3 ? setTimeout(function() {
              Kr(r2, vn).call(r2, Tr({ type: i2, bytes: s2 }, t3), a2);
            }) : Kr(this, gn).call(this, Kr(this, bn)[e3], a2);
          }
          function Un() {
            var e3 = this, t3 = Kr(this, bn), r2 = t3[Kr(this, Cn)];
            if (Kr(this, Tn) >= r2.count) {
              var n2 = Kr(this, kn);
              if (Kr(this, On) > this.finishRequestDuration && !r2.bypassMinDuration) {
                var s2 = r2.dir;
                Kr(this, kn)[s2] = true, Object.values(Kr(this, kn)).every(function(e4) {
                  return e4;
                }) && Kr(this, _n).call(this, Kr(this, En));
              }
              $r(this, Tn, 0), $r(this, On, -1 / 0), performance.clearResourceTimings();
              do {
                $r(this, Cn, Kr(this, Cn) + 1);
              } while (Kr(this, Cn) < t3.length && n2[t3[Kr(this, Cn)].dir]);
              if (Kr(this, Cn) >= t3.length)
                return $r(this, kn, { down: true, up: true }), Qr(this, Mn, Bn).call(this, false), void Kr(this, _n).call(this, Kr(this, En));
              r2 = t3[Kr(this, Cn)];
            }
            var i2 = Kr(this, Cn);
            0 === Kr(this, Tn) && Qr(this, Ln, Fn).call(this, i2);
            var a2 = r2, o2 = a2.bytes, c2 = "down" === a2.dir, d2 = Kr(this, c2 ? wn : Sn), l2 = Object.assign({}, Kr(this, pn));
            c2 && (l2.bytes = "".concat(o2));
            var u2, p2 = "".concat(
              d2.startsWith("http") || d2.startsWith("//") ? "" : window.location.origin
            ).concat(d2, "?").concat(
              Object.entries(l2).map(function(e4) {
                var t4 = qr(e4, 2), r3 = t4[0], n3 = t4[1];
                return "".concat(r3, "=").concat(n3);
              }).join("&")
            ), h2 = Object.assign(
              {},
              c2 ? {} : { method: "POST", body: un(o2) },
              Kr(this, hn)
            ), m2 = $r(
              this,
              In,
              fetch(p2, h2).then(function(e4) {
                if (e4.ok) return e4;
                throw Error(e4.statusText);
              }).then(function(t4) {
                return e3.getServerTime && (u2 = e3.getServerTime(t4)), t4;
              }).then(function(t4) {
                return t4.text().then(function(r3) {
                  return Kr(e3, mn) && Kr(e3, mn).call(e3, {
                    url: p2,
                    headers: t4.headers,
                    body: r3
                  }), r3;
                });
              }).then(function(t4, r3) {
                if (m2._cancel) r3("cancelled");
                else {
                  var n3 = performance.getEntriesByName(p2).slice(-1)[0], s3 = {
                    transferSize: n3.transferSize,
                    ttfb: sn(n3),
                    payloadDownloadTime: an(n3),
                    serverTime: u2 || -1,
                    measTime: /* @__PURE__ */ new Date()
                  };
                  if (s3.ping = Math.max(0.01, s3.ttfb - (u2 || Kr(e3, Dn))), s3.duration = (c2 ? on : cn)(s3), s3.bps = (c2 ? dn : ln)(s3, o2), c2 && o2) {
                    var a3 = +o2;
                    s3.transferSize && (s3.transferSize < a3 || s3.transferSize / a3 > 1.05) && console.warn(
                      "Requested ".concat(a3, "B but received ").concat(s3.transferSize, "B (").concat(
                        Math.round(s3.transferSize / a3 * 1e4) / 100,
                        "%)."
                      )
                    );
                  }
                  Qr(e3, Ln, Fn).call(e3, i2, s3);
                  var d3 = s3.duration;
                  $r(e3, On, Kr(e3, On) < 0 ? d3 : Math.min(Kr(e3, On), d3)), $r(e3, Tn, Kr(e3, Tn) + 1), $r(e3, Pn, 0), Kr(e3, xn) ? $r(
                    e3,
                    An,
                    setTimeout(function() {
                      return Qr(e3, Nn, Un).call(e3);
                    }, Kr(e3, xn))
                  ) : Qr(e3, Nn, Un).call(e3);
                }
              }).catch(function(t4) {
                var r3, n3;
                m2._cancel || (console.warn("Error fetching ".concat(p2, ": ").concat(t4)), $r(e3, Pn, (r3 = Kr(e3, Pn), n3 = r3++, r3)), n3 < 20 ? Qr(e3, Nn, Un).call(e3) : ($r(e3, Pn, 0), Qr(e3, Mn, Bn).call(e3, false), Kr(e3, yn).call(
                  e3,
                  "Connection failed to ".concat(p2, ". Gave up after ").concat(20, " retries.")
                )));
              })
            );
          }
          function Wn() {
            var e3 = Kr(this, In);
            e3 && (e3._cancel = true);
          }
          var qn = function() {
            function e3(t3) {
              var r2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n2 = r2.downloadApiUrl, s2 = r2.uploadApiUrl, i2 = r2.throttleMs, a2 = void 0 === i2 ? 0 : i2, o2 = r2.estimatedServerTime, c2 = void 0 === o2 ? 0 : o2;
              if (Pr(this, e3), Zr(this, jn), Zr(this, Nn), Zr(this, Ln), Zr(this, Mn), Xr(this, pn, { writable: true, value: {} }), Xr(this, hn, { writable: true, value: {} }), Dr(this, "finishRequestDuration", 1e3), Dr(this, "getServerTime", nn), Xr(this, mn, {
                writable: true,
                value: function(e4) {
                  return e4;
                }
              }), Xr(this, fn, { writable: true, value: function() {
              } }), Xr(this, gn, { writable: true, value: function() {
              } }), Xr(this, vn, { writable: true, value: function() {
              } }), Xr(this, _n, { writable: true, value: function() {
              } }), Xr(this, yn, { writable: true, value: function() {
              } }), Xr(this, bn, { writable: true, value: void 0 }), Xr(this, wn, { writable: true, value: void 0 }), Xr(this, Sn, { writable: true, value: void 0 }), Xr(this, Rn, { writable: true, value: false }), Xr(this, kn, { writable: true, value: { down: false, up: false } }), Xr(this, En, { writable: true, value: { down: {}, up: {} } }), Xr(this, Cn, { writable: true, value: 0 }), Xr(this, Tn, { writable: true, value: 0 }), Xr(this, Pn, { writable: true, value: 0 }), Xr(this, On, { writable: true, value: -1 / 0 }), Xr(this, xn, { writable: true, value: 0 }), Xr(this, Dn, { writable: true, value: 0 }), Xr(this, In, { writable: true, value: void 0 }), Xr(this, An, { writable: true, value: void 0 }), !t3)
                throw new Error("Missing measurements argument");
              if (!n2) throw new Error("Missing downloadApiUrl argument");
              if (!s2) throw new Error("Missing uploadApiUrl argument");
              $r(this, bn, t3), $r(this, wn, n2), $r(this, Sn, s2), $r(this, xn, a2), $r(this, Dn, Math.max(0, c2));
            }
            return xr(e3, [
              {
                key: "results",
                get: function() {
                  return Kr(this, En);
                }
              },
              {
                key: "qsParams",
                get: function() {
                  return Kr(this, pn);
                },
                set: function(e4) {
                  $r(this, pn, e4);
                }
              },
              {
                key: "fetchOptions",
                get: function() {
                  return Kr(this, hn);
                },
                set: function(e4) {
                  $r(this, hn, e4);
                }
              },
              {
                key: "responseHook",
                set: function(e4) {
                  $r(this, mn, e4);
                }
              },
              {
                key: "onRunningChange",
                set: function(e4) {
                  $r(this, fn, e4);
                }
              },
              {
                key: "onNewMeasurementStarted",
                set: function(e4) {
                  $r(this, gn, e4);
                }
              },
              {
                key: "onMeasurementResult",
                set: function(e4) {
                  $r(this, vn, e4);
                }
              },
              {
                key: "onFinished",
                set: function(e4) {
                  $r(this, _n, e4);
                }
              },
              {
                key: "onConnectionError",
                set: function(e4) {
                  $r(this, yn, e4);
                }
              },
              {
                key: "pause",
                value: function() {
                  clearTimeout(Kr(this, An)), Qr(this, jn, Wn).call(this), Qr(this, Mn, Bn).call(this, false);
                }
              },
              {
                key: "play",
                value: function() {
                  Kr(this, Rn) || (Qr(this, Mn, Bn).call(this, true), Qr(this, Nn, Un).call(this));
                }
              }
            ]), e3;
          }(), Vn = [
            "measureParallelLatency",
            "parallelLatencyThrottleMs",
            "downloadApiUrl",
            "uploadApiUrl",
            "estimatedServerTime"
          ], Hn = /* @__PURE__ */ new WeakMap(), zn = /* @__PURE__ */ new WeakSet();
          function Gn(e3) {
            var t3 = this;
            Kr(this, Hn) && (e3 ? setTimeout(function() {
              return Kr(t3, Hn).play();
            }, 20) : Kr(this, Hn).pause());
          }
          var Kn = function(e3) {
            Ir(r2, e3);
            var t3 = jr(r2);
            function r2(e4) {
              var n2, s2, i2, a2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, o2 = a2.measureParallelLatency, c2 = void 0 !== o2 && o2, d2 = a2.parallelLatencyThrottleMs, l2 = void 0 === d2 ? 100 : d2, u2 = a2.downloadApiUrl, p2 = a2.uploadApiUrl, h2 = a2.estimatedServerTime, m2 = void 0 === h2 ? 0 : h2, f2 = Lr(a2, Vn);
              return Pr(this, r2), Zr(
                Nr(
                  i2 = t3.call(
                    this,
                    e4,
                    Tr(
                      {
                        downloadApiUrl: u2,
                        uploadApiUrl: p2,
                        estimatedServerTime: m2
                      },
                      f2
                    )
                  )
                ),
                zn
              ), Xr(Nr(i2), Hn, { writable: true, value: void 0 }), c2 && ($r(
                Nr(i2),
                Hn,
                new qn(
                  [
                    {
                      dir: "down",
                      bytes: 0,
                      count: 1 / 0,
                      bypassMinDuration: true
                    }
                  ],
                  {
                    downloadApiUrl: u2,
                    uploadApiUrl: p2,
                    estimatedServerTime: m2,
                    throttleMs: l2
                  }
                )
              ), Kr(Nr(i2), Hn).qsParams = {
                during: "".concat(e4[0].dir, "load")
              }, Wr(
                (n2 = Nr(i2), Ar(r2.prototype)),
                "onRunningChange",
                Qr(Nr(i2), zn, Gn),
                n2,
                true
              ), Wr(
                (s2 = Nr(i2), Ar(r2.prototype)),
                "onConnectionError",
                function() {
                  return Kr(Nr(i2), Hn).pause();
                },
                s2,
                true
              )), i2;
            }
            return xr(r2, [
              {
                key: "latencyResults",
                get: function() {
                  return Kr(this, Hn) && Kr(this, Hn).results.down[0].timings;
                }
              },
              {
                key: "onParallelLatencyResult",
                set: function(e4) {
                  Kr(this, Hn) && (Kr(this, Hn).onMeasurementResult = function(t4) {
                    return e4(t4);
                  });
                }
              },
              {
                key: "fetchOptions",
                get: function() {
                  return Fr(Ar(r2.prototype), "fetchOptions", this);
                },
                set: function(e4) {
                  Wr(Ar(r2.prototype), "fetchOptions", e4, this, true), Kr(this, Hn) && (Kr(this, Hn).fetchOptions = e4);
                }
              },
              {
                key: "onRunningChange",
                set: function(e4) {
                  var t4 = this;
                  Wr(
                    Ar(r2.prototype),
                    "onRunningChange",
                    function(r3) {
                      Qr(t4, zn, Gn).call(t4, r3), e4(r3);
                    },
                    this,
                    true
                  );
                }
              },
              {
                key: "onConnectionError",
                set: function(e4) {
                  var t4 = this;
                  Wr(
                    Ar(r2.prototype),
                    "onConnectionError",
                    function() {
                      Kr(t4, Hn) && Kr(t4, Hn).pause(), e4.apply(void 0, arguments);
                    },
                    this,
                    true
                  );
                }
              }
            ]), r2;
          }(qn), $n = ["measurementId", "logApiUrl"], Jn = /* @__PURE__ */ new WeakMap(), Qn = /* @__PURE__ */ new WeakMap(), Yn = /* @__PURE__ */ new WeakMap(), Xn = /* @__PURE__ */ new WeakMap(), Zn = /* @__PURE__ */ new WeakSet(), es = /* @__PURE__ */ new WeakSet();
          function ts(e3) {
            Kr(this, Xn) && ($r(this, Yn, +e3.headers.get("cf-meta-request-time")), $r(this, Qn, e3.body.slice(-300).split("___").pop()));
          }
          function rs(e3) {
            if (Kr(this, Xn)) {
              var t3 = {
                type: e3.type,
                bytes: e3.bytes,
                ping: Math.round(e3.ping),
                ttfb: Math.round(e3.ttfb),
                payloadDownloadTime: Math.round(e3.payloadDownloadTime),
                duration: Math.round(e3.duration),
                transferSize: Math.round(e3.transferSize),
                serverTime: Math.round(e3.serverTime),
                token: Kr(this, Qn),
                requestTime: Kr(this, Yn),
                measId: Kr(this, Jn)
              };
              $r(this, Qn, null), $r(this, Yn, null), fetch(
                Kr(this, Xn),
                Tr(
                  { method: "POST", body: JSON.stringify(t3) },
                  this.fetchOptions
                )
              );
            }
          }
          var ns = function(e3) {
            Ir(r2, e3);
            var t3 = jr(r2);
            function r2(e4) {
              var n2, s2, i2, a2, o2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, c2 = o2.measurementId, d2 = o2.logApiUrl, l2 = Lr(o2, $n);
              return Pr(this, r2), Zr(Nr(a2 = t3.call(this, e4, l2)), es), Zr(Nr(a2), Zn), Xr(Nr(a2), Jn, { writable: true, value: void 0 }), Xr(Nr(a2), Qn, { writable: true, value: void 0 }), Xr(Nr(a2), Yn, { writable: true, value: void 0 }), Xr(Nr(a2), Xn, { writable: true, value: void 0 }), $r(Nr(a2), Jn, c2), $r(Nr(a2), Xn, d2), Wr(
                (n2 = Nr(a2), Ar(r2.prototype)),
                "qsParams",
                d2 ? { measId: Kr(Nr(a2), Jn) } : {},
                n2,
                true
              ), Wr(
                (s2 = Nr(a2), Ar(r2.prototype)),
                "responseHook",
                function(e5) {
                  return Qr(Nr(a2), Zn, ts).call(Nr(a2), e5);
                },
                s2,
                true
              ), Wr(
                (i2 = Nr(a2), Ar(r2.prototype)),
                "onMeasurementResult",
                function(e5) {
                  return Qr(Nr(a2), es, rs).call(Nr(a2), e5);
                },
                i2,
                true
              ), a2;
            }
            return xr(r2, [
              {
                key: "qsParams",
                set: function(e4) {
                  Wr(
                    Ar(r2.prototype),
                    "qsParams",
                    Kr(this, Xn) ? Tr({ measId: Kr(this, Jn) }, e4) : e4,
                    this,
                    true
                  );
                }
              },
              {
                key: "responseHook",
                set: function(e4) {
                  var t4 = this;
                  Wr(
                    Ar(r2.prototype),
                    "responseHook",
                    function(r3) {
                      e4(r3), Qr(t4, Zn, ts).call(t4, r3);
                    },
                    this,
                    true
                  );
                }
              },
              {
                key: "onMeasurementResult",
                set: function(e4) {
                  var t4 = this;
                  Wr(
                    Ar(r2.prototype),
                    "onMeasurementResult",
                    function(r3) {
                      for (var n2 = arguments.length, s2 = new Array(n2 > 1 ? n2 - 1 : 0), i2 = 1; i2 < n2; i2++)
                        s2[i2 - 1] = arguments[i2];
                      e4.apply(void 0, [r3].concat(s2)), Qr(t4, es, rs).call(t4, r3);
                    },
                    this,
                    true
                  );
                }
              }
            ]), r2;
          }(Kn), ss = /* @__PURE__ */ new WeakMap(), is = /* @__PURE__ */ new WeakMap(), as = /* @__PURE__ */ new WeakMap(), os = /* @__PURE__ */ new WeakSet(), cs = /* @__PURE__ */ new WeakSet(), ds = /* @__PURE__ */ new WeakSet(), ls = function() {
            function e3(t3) {
              if (Pr(this, e3), Zr(this, ds), Zr(this, cs), Zr(this, os), Xr(this, ss, { writable: true, value: false }), Xr(this, is, { writable: true, value: void 0 }), Xr(this, as, { writable: true, value: void 0 }), !t3)
                throw new Error("Missing operation to perform");
              $r(this, as, t3), this.play();
            }
            return xr(e3, [
              {
                key: "pause",
                value: function() {
                  Qr(this, ds, hs).call(this), Qr(this, os, us).call(this, false);
                }
              },
              {
                key: "stop",
                value: function() {
                  this.pause();
                }
              },
              {
                key: "play",
                value: function() {
                  Kr(this, ss) || (Qr(this, os, us).call(this, true), Qr(this, cs, ps).call(this));
                }
              }
            ]), e3;
          }();
          function us(e3) {
            e3 !== Kr(this, ss) && $r(this, ss, e3);
          }
          function ps() {
            var e3 = this, t3 = $r(
              this,
              is,
              Kr(this, as).call(this).then(function() {
                !t3._cancel && Qr(e3, cs, ps).call(e3);
              })
            );
          }
          function hs() {
            var e3 = Kr(this, is);
            e3 && (e3._cancel = true);
          }
          var ms = /* @__PURE__ */ new WeakMap(), fs = function() {
            function e3() {
              var t3 = this, r2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n2 = r2.download, s2 = r2.upload;
              if (Pr(this, e3), Dr(this, "qsParams", {}), Dr(this, "fetchOptions", {}), Xr(this, ms, { writable: true, value: [] }), !n2 && !s2)
                throw new Error(
                  "Missing at least one of download/upload config"
                );
              [
                [n2, "download"],
                [s2, "upload"]
              ].filter(function(e4) {
                return qr(e4, 1)[0];
              }).forEach(function(e4) {
                var t4 = qr(e4, 2), r3 = t4[0], n3 = t4[1], s3 = r3.apiUrl, i3 = r3.chunkSize;
                if (!s3)
                  throw new Error("Missing ".concat(n3, " apiUrl argument"));
                if (!i3)
                  throw new Error(
                    "Missing ".concat(n3, " chunkSize argument")
                  );
              });
              var i2 = function(e4) {
                var r3 = e4.apiUrl, n3 = e4.qsParams, s3 = void 0 === n3 ? {} : n3, i3 = e4.fetchOptions, a2 = void 0 === i3 ? {} : i3;
                return new ls(function() {
                  var e5 = Object.assign({}, s3, t3.qsParams), n4 = "".concat(
                    r3.startsWith("http") || r3.startsWith("//") ? "" : window.location.origin
                  ).concat(r3, "?").concat(
                    Object.entries(e5).map(function(e6) {
                      var t4 = qr(e6, 2), r4 = t4[0], n5 = t4[1];
                      return "".concat(r4, "=").concat(n5);
                    }).join("&")
                  ), i4 = Object.assign({}, a2, t3.fetchOptions);
                  return fetch(n4, i4).then(function(e6) {
                    if (e6.ok) return e6;
                    throw Error(e6.statusText);
                  }).then(function(e6) {
                    return e6.text();
                  });
                });
              };
              n2 && Kr(this, ms).push(
                i2({
                  apiUrl: n2.apiUrl,
                  qsParams: { bytes: "".concat(n2.chunkSize) }
                })
              ), s2 && Kr(this, ms).push(
                i2({
                  apiUrl: s2.apiUrl,
                  fetchOptions: {
                    method: "POST",
                    body: "0".repeat(s2.chunkSize)
                  }
                })
              );
            }
            return xr(e3, [
              {
                key: "pause",
                value: function() {
                  Kr(this, ms).forEach(function(e4) {
                    return e4.pause();
                  });
                }
              },
              {
                key: "stop",
                value: function() {
                  this.pause();
                }
              },
              {
                key: "play",
                value: function() {
                  Kr(this, ms).forEach(function(e4) {
                    return e4.play();
                  });
                }
              }
            ]), e3;
          }(), gs = ["iceServers", "acceptIceCandidate", "dataChannelCfg"], vs = /* @__PURE__ */ new WeakMap(), _s = /* @__PURE__ */ new WeakMap(), ys = /* @__PURE__ */ new WeakMap(), bs = /* @__PURE__ */ new WeakMap(), ws = /* @__PURE__ */ new WeakMap(), Ss = function() {
            function e3() {
              var t3 = this, r2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n2 = r2.iceServers, s2 = void 0 === n2 ? [] : n2, i2 = r2.acceptIceCandidate, a2 = void 0 === i2 ? function(e4) {
                var t4 = e4.protocol || "";
                if (!t4 && e4.candidate) {
                  var r3 = e4.candidate.split(" ");
                  r3.length >= 3 && (t4 = r3[2]);
                }
                return "udp" === t4.toLowerCase();
              } : i2, o2 = r2.dataChannelCfg, c2 = void 0 === o2 ? { ordered: false, maxRetransmits: 0 } : o2, d2 = Lr(r2, gs);
              Pr(this, e3), Dr(this, "onOpen", function() {
              }), Dr(this, "onClose", function() {
              }), Dr(this, "onMessageReceived", function() {
              }), Xr(this, vs, { writable: true, value: false }), Xr(this, _s, { writable: true, value: void 0 }), Xr(this, ys, { writable: true, value: void 0 }), Xr(this, bs, { writable: true, value: void 0 }), Xr(this, ws, { writable: true, value: void 0 });
              var l2 = new RTCPeerConnection(Tr({ iceServers: s2 }, d2)), u2 = new RTCPeerConnection(Tr({ iceServers: s2 }, d2)), p2 = l2.createDataChannel("channel", c2);
              p2.onopen = function() {
                $r(t3, vs, true), t3.onOpen();
              }, p2.onclose = function() {
                return t3.close();
              }, u2.ondatachannel = function(e4) {
                var r3 = e4.channel;
                r3.onclose = function() {
                  return t3.close();
                }, r3.onmessage = function(e5) {
                  return t3.onMessageReceived(e5.data);
                }, $r(t3, ws, r3);
              }, l2.onicecandidate = function(e4) {
                e4.candidate && a2(e4.candidate) && u2.addIceCandidate(e4.candidate);
              }, u2.onicecandidate = function(e4) {
                e4.candidate && a2(e4.candidate) && l2.addIceCandidate(e4.candidate);
              }, l2.createOffer().then(function(e4) {
                return l2.setLocalDescription(e4);
              }).then(function() {
                return u2.setRemoteDescription(l2.localDescription);
              }).then(function() {
                return u2.createAnswer();
              }).then(function(e4) {
                return u2.setLocalDescription(e4);
              }).then(function() {
                return l2.setRemoteDescription(u2.localDescription);
              }), $r(this, _s, l2), $r(this, ys, u2), $r(this, bs, p2), $r(this, vs, false);
            }
            return xr(e3, [
              {
                key: "send",
                value: function(e4) {
                  return Kr(this, bs).send(e4);
                }
              },
              {
                key: "close",
                value: function() {
                  return Kr(this, _s) && Kr(this, _s).close(), Kr(this, ys) && Kr(this, ys).close(), Kr(this, bs) && Kr(this, bs).close(), Kr(this, ws) && Kr(this, ws).close(), Kr(this, vs) && this.onClose(), $r(this, vs, false), this;
                }
              }
            ]), e3;
          }(), Rs = /* @__PURE__ */ new WeakMap(), ks = /* @__PURE__ */ new WeakMap(), Es = /* @__PURE__ */ new WeakMap(), Cs = /* @__PURE__ */ new WeakMap(), Ts = /* @__PURE__ */ new WeakMap(), Ps = /* @__PURE__ */ new WeakMap(), Os = function() {
            function e3() {
              var t3 = this, r2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n2 = r2.turnServerUri, s2 = r2.turnServerCredsApi, i2 = r2.turnServerCredsApiParser, a2 = void 0 === i2 ? function(e4) {
                return {
                  turnServerUser: e4.username,
                  turnServerPass: e4.credential
                };
              } : i2, o2 = r2.turnServerCredsApiIncludeCredentials, c2 = void 0 !== o2 && o2, d2 = r2.turnServerUser, l2 = r2.turnServerPass, u2 = r2.numMsgs, p2 = void 0 === u2 ? 100 : u2, h2 = r2.batchSize, m2 = void 0 === h2 ? 10 : h2, f2 = r2.batchWaitTime, g2 = void 0 === f2 ? 10 : f2, v2 = r2.responsesWaitTime, _2 = void 0 === v2 ? 5e3 : v2, y2 = r2.connectionTimeout, b2 = void 0 === y2 ? 5e3 : y2;
              if (Pr(this, e3), Xr(this, Rs, { writable: true, value: function() {
              } }), Xr(this, ks, { writable: true, value: function() {
              } }), Xr(this, Es, { writable: true, value: function() {
              } }), Dr(this, "onMsgSent", function() {
              }), Dr(this, "onAllMsgsSent", function() {
              }), Dr(this, "onMsgReceived", function() {
              }), Xr(this, Cs, { writable: true, value: {} }), Xr(this, Ts, { writable: true, value: void 0 }), Xr(this, Ps, { writable: true, value: void 0 }), !n2)
                throw new Error("Missing turnServerUri argument");
              if (!(d2 && l2 || s2))
                throw new Error(
                  "Missing either turnServerCredsApi or turnServerUser+turnServerPass arguments"
                );
              $r(this, Ps, p2), (d2 && l2 ? Promise.resolve({ turnServerUser: d2, turnServerPass: l2 }) : fetch(s2, { credentials: c2 ? "include" : void 0 }).then(function(e4) {
                return e4.json();
              }).then(function(e4) {
                if (e4.error) throw e4.error;
                return e4;
              }).then(a2)).catch(function(e4) {
                return Kr(t3, Rs).call(t3, e4);
              }).then(function(e4) {
                var r3 = e4.turnServerUser, s3 = e4.turnServerPass, i3 = $r(
                  t3,
                  Ts,
                  new Ss({
                    iceServers: [
                      {
                        urls: "turn:".concat(n2, "?transport=udp"),
                        username: r3,
                        credential: s3
                      }
                    ],
                    iceTransportPolicy: "relay"
                  })
                ), a3 = false;
                setTimeout(function() {
                  a3 || (i3.close(), Kr(t3, ks).call(t3, "ICE connection timeout!"));
                }, b2);
                var o3 = Kr(t3, Cs);
                i3.onOpen = function() {
                  a3 = true;
                  var e5 = t3;
                  !function t4(r4) {
                    if (r4 <= p2) {
                      for (var n3 = r4; n3 <= Math.min(p2, r4 + m2 - 1); )
                        o3[n3] = false, i3.send(n3), e5.onMsgSent(n3), n3++;
                      setTimeout(function() {
                        return t4(n3);
                      }, g2);
                    } else {
                      e5.onAllMsgsSent(Object.keys(o3).length);
                      var s4 = function() {
                        i3.close(), Kr(e5, Es).call(e5, e5.results);
                      }, a4 = setTimeout(s4, _2), c3 = Object.values(Kr(e5, Cs)).filter(function(e6) {
                        return !e6;
                      }).length;
                      i3.onMessageReceived = function(t5) {
                        clearTimeout(a4), o3[t5] = true, e5.onMsgReceived(t5), --c3 <= 0 && Object.values(Kr(e5, Cs)).every(function(e6) {
                          return e6;
                        }) ? s4() : a4 = setTimeout(s4, _2);
                      };
                    }
                  }(1);
                }, i3.onMessageReceived = function(e5) {
                  o3[e5] = true, t3.onMsgReceived(e5);
                };
              }).catch(function(e4) {
                return Kr(t3, ks).call(t3, e4.toString());
              });
            }
            return xr(e3, [
              {
                key: "onCredentialsFailure",
                set: function(e4) {
                  $r(this, Rs, e4);
                }
              },
              {
                key: "onConnectionError",
                set: function(e4) {
                  $r(this, ks, e4);
                }
              },
              {
                key: "onFinished",
                set: function(e4) {
                  $r(this, Es, e4);
                }
              },
              {
                key: "results",
                get: function() {
                  var e4 = Kr(this, Ps), t3 = Object.keys(Kr(this, Cs)).length, r2 = Object.entries(Kr(this, Cs)).filter(function(e5) {
                    return !qr(e5, 2)[1];
                  }).map(function(e5) {
                    return +qr(e5, 1)[0];
                  });
                  return {
                    totalMessages: e4,
                    numMessagesSent: t3,
                    packetLoss: r2.length / t3,
                    lostMessages: r2
                  };
                }
              }
            ]), e3;
          }(), xs = [
            "downloadChunkSize",
            "uploadChunkSize",
            "downloadApiUrl",
            "uploadApiUrl"
          ], Ds = /* @__PURE__ */ new WeakMap(), Is = function(e3) {
            Ir(r2, e3);
            var t3 = jr(r2);
            function r2() {
              var e4, n2, s2, i2, a2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, o2 = a2.downloadChunkSize, c2 = a2.uploadChunkSize, d2 = a2.downloadApiUrl, l2 = a2.uploadApiUrl, u2 = Lr(a2, xs);
              return Pr(this, r2), Xr(Nr(i2 = t3.call(this, u2)), Ds, {
                writable: true,
                value: void 0
              }), (o2 || c2) && ($r(
                Nr(i2),
                Ds,
                new fs({
                  download: o2 ? { apiUrl: d2, chunkSize: o2 } : null,
                  upload: c2 ? { apiUrl: l2, chunkSize: c2 } : null
                })
              ), Wr(
                (e4 = Nr(i2), Ar(r2.prototype)),
                "onCredentialsFailure",
                Wr(
                  (s2 = Nr(i2), Ar(r2.prototype)),
                  "onConnectionError",
                  Wr(
                    (n2 = Nr(i2), Ar(r2.prototype)),
                    "onFinished",
                    function() {
                      return Kr(Nr(i2), Ds).stop();
                    },
                    n2,
                    true
                  ),
                  s2,
                  true
                ),
                e4,
                true
              )), i2;
            }
            return xr(r2, [
              {
                key: "qsParams",
                set: function(e4) {
                  Kr(this, Ds) && (Kr(this, Ds).qsParams = e4);
                }
              },
              {
                key: "fetchOptions",
                set: function(e4) {
                  Kr(this, Ds) && (Kr(this, Ds).fetchOptions = e4);
                }
              },
              {
                key: "onCredentialsFailure",
                set: function(e4) {
                  var t4 = this;
                  Wr(
                    Ar(r2.prototype),
                    "onCredentialsFailure",
                    function() {
                      e4.apply(void 0, arguments), Kr(t4, Ds) && Kr(t4, Ds).stop();
                    },
                    this,
                    true
                  );
                }
              },
              {
                key: "onConnectionError",
                set: function(e4) {
                  var t4 = this;
                  Wr(
                    Ar(r2.prototype),
                    "onConnectionError",
                    function() {
                      e4.apply(void 0, arguments), Kr(t4, Ds) && Kr(t4, Ds).stop();
                    },
                    this,
                    true
                  );
                }
              },
              {
                key: "onFinished",
                set: function(e4) {
                  var t4 = this;
                  Wr(
                    Ar(r2.prototype),
                    "onFinished",
                    function() {
                      e4.apply(void 0, arguments), Kr(t4, Ds) && Kr(t4, Ds).stop();
                    },
                    this,
                    true
                  );
                }
              }
            ]), r2;
          }(Os), As = ["reachable"], Ms = xr(function e3(t3) {
            var r2 = this, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, s2 = n2.timeout, i2 = void 0 === s2 ? -1 : s2, a2 = n2.fetchOptions, o2 = void 0 === a2 ? {} : a2;
            Pr(this, e3), Dr(this, "onFinished", function() {
            });
            var c2 = false, d2 = function(e4) {
              var n3 = e4.reachable, s3 = Lr(e4, As);
              c2 || (c2 = true, r2.onFinished(Tr({ targetUrl: t3, reachable: n3 }, s3)));
            };
            fetch(t3, o2).then(function(e4) {
              d2({ reachable: true, response: e4 });
            }).catch(function(e4) {
              d2({ reachable: false, error: e4 });
            }), i2 > 0 && setTimeout(function() {
              return d2({ reachable: false, error: "Request timeout" });
            }, i2);
          }), Ls = function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.5;
            if (!e3.length) return 0;
            var r2 = e3.slice().sort(function(e4, t4) {
              return e4 - t4;
            }), n2 = (e3.length - 1) * t3, s2 = n2 % 1;
            if (0 === s2) return r2[Math.round(n2)];
            var i2 = [Math.floor, Math.ceil].map(function(e4) {
              return r2[e4(n2)];
            });
            return i2[0] + (i2[1] - i2[0]) * s2;
          }, Ns = /* @__PURE__ */ new WeakMap(), js = /* @__PURE__ */ new WeakMap(), Bs = function() {
            function e3(t3) {
              var r2 = this;
              Pr(this, e3), Dr(this, "getLatencyPoints", function(e4) {
                return e4.timings.map(function(e5) {
                  return e5.ping;
                });
              }), Dr(this, "getLatency", function(e4) {
                return Ls(r2.getLatencyPoints(e4), Kr(r2, Ns).latencyPercentile);
              }), Dr(this, "getBandwidthPoints", function(e4) {
                return Object.entries(e4).map(function(e5) {
                  var t4 = qr(e5, 2), r3 = t4[0];
                  return t4[1].timings.map(function(e6) {
                    var t5 = e6.bps, n2 = e6.duration, s2 = e6.ping, i2 = e6.measTime, a2 = e6.serverTime, o2 = e6.transferSize;
                    return {
                      bytes: +r3,
                      bps: t5,
                      duration: n2,
                      ping: s2,
                      measTime: i2,
                      serverTime: a2,
                      transferSize: o2
                    };
                  });
                }).flat();
              }), Dr(this, "getBandwidth", function(e4) {
                return Ls(
                  r2.getBandwidthPoints(e4).filter(function(e5) {
                    return e5.duration >= Kr(r2, Ns).bandwidthMinRequestDuration;
                  }).map(function(e5) {
                    return e5.bps;
                  }).filter(function(e5) {
                    return e5;
                  }),
                  Kr(r2, Ns).bandwidthPercentile
                );
              }), Dr(this, "getLoadedLatency", function(e4) {
                return r2.getLatency({ timings: Kr(r2, js).call(r2, e4) });
              }), Dr(this, "getLoadedJitter", function(e4) {
                return r2.getJitter({ timings: Kr(r2, js).call(r2, e4) });
              }), Dr(this, "getLoadedLatencyPoints", function(e4) {
                return r2.getLatencyPoints({ timings: Kr(r2, js).call(r2, e4) });
              }), Dr(this, "getPacketLoss", function(e4) {
                return e4.packetLoss;
              }), Dr(this, "getPacketLossDetails", function(e4) {
                return e4;
              }), Dr(this, "getReachability", function(e4) {
                return !!e4.reachable;
              }), Dr(this, "getReachabilityDetails", function(e4) {
                return { host: e4.host, reachable: e4.reachable };
              }), Xr(this, Ns, { writable: true, value: void 0 }), Xr(this, js, {
                writable: true,
                value: function(e4) {
                  return Object.values(e4).filter(function(e5) {
                    return e5.timings.length && Math.min.apply(
                      Math,
                      Vr(
                        e5.timings.map(function(e6) {
                          return e6.duration;
                        })
                      )
                    ) >= Kr(r2, Ns).loadedRequestMinDuration;
                  }).map(function(e5) {
                    return e5.sideLatency || [];
                  }).flat().slice(-Kr(r2, Ns).loadedLatencyMaxPoints);
                }
              }), $r(this, Ns, t3);
            }
            return xr(e3, [
              {
                key: "getJitter",
                value: function(e4) {
                  var t3 = this.getLatencyPoints(e4);
                  return t3.length < 2 ? null : t3.reduce(function(e5, t4) {
                    var r2 = e5.sumDeltas, n2 = void 0 === r2 ? 0 : r2, s2 = e5.prevLatency;
                    return {
                      sumDeltas: n2 + (void 0 !== s2 ? Math.abs(s2 - t4) : 0),
                      prevLatency: t4
                    };
                  }, {}).sumDeltas / (t3.length - 1);
                }
              }
            ]), e3;
          }(), Fs = ["bad", "poor", "average", "good", "great"], Us = {
            loadedLatencyIncrease: function(e3) {
              return e3.latency && (e3.downLoadedLatency || e3.upLoadedLatency) ? Math.max(e3.downLoadedLatency, e3.upLoadedLatency) - e3.latency : void 0;
            }
          }, Ws = { packetLoss: 0 }, qs = /* @__PURE__ */ new WeakMap(), Vs = function() {
            function e3(t3) {
              Pr(this, e3), Xr(this, qs, { writable: true, value: void 0 }), $r(this, qs, t3);
            }
            return xr(e3, [
              {
                key: "getScores",
                value: function(e4) {
                  var t3 = Object.assign.apply(
                    Object,
                    Vr(
                      Object.entries(Kr(this, qs).aimMeasurementScoring).map(
                        function(t4) {
                          var r2 = qr(t4, 2), n2 = r2[0], s2 = r2[1], i2 = Us.hasOwnProperty(n2) ? Us[n2](e4) : e4[n2];
                          return void 0 === i2 ? Ws.hasOwnProperty(n2) ? Dr({}, n2, Ws[n2]) : {} : Dr({}, n2, void 0 === i2 ? 0 : +s2(i2));
                        }
                      )
                    )
                  );
                  return Object.assign.apply(
                    Object,
                    [{}].concat(
                      Vr(
                        Object.entries(Kr(this, qs).aimExperiencesDefs).filter(function(e5) {
                          return qr(e5, 2)[1].input.every(function(e6) {
                            return t3.hasOwnProperty(e6);
                          });
                        }).map(function(e5) {
                          var r2, n2 = qr(e5, 2), s2 = n2[0], i2 = n2[1], a2 = i2.input, o2 = i2.pointThresholds, c2 = Math.max(
                            0,
                            (r2 = a2.map(function(e6) {
                              return t3[e6];
                            }), r2.reduce(function(e6, t4) {
                              return e6 + t4;
                            }, 0))
                          ), d2 = Er(o2, [0, 1, 2, 3, 4])(c2);
                          return Dr({}, s2, {
                            points: c2,
                            classificationIdx: d2,
                            classificationName: Fs[d2]
                          });
                        })
                      )
                    )
                  );
                }
              }
            ]), e3;
          }(), Hs = /* @__PURE__ */ new WeakMap(), zs = /* @__PURE__ */ new WeakMap(), Gs = /* @__PURE__ */ new WeakMap(), Ks = /* @__PURE__ */ new WeakMap(), $s = /* @__PURE__ */ new WeakMap(), Js = /* @__PURE__ */ new WeakMap(), Qs = /* @__PURE__ */ new WeakMap(), Ys = /* @__PURE__ */ new WeakMap(), Xs = function() {
            function e3(t3) {
              var r2 = this;
              Pr(this, e3), Dr(this, "raw", void 0), Dr(this, "getUnloadedLatency", function() {
                return Kr(r2, Ks).call(r2, "getLatency", "latency");
              }), Dr(this, "getUnloadedJitter", function() {
                return Kr(r2, Ks).call(r2, "getJitter", "latency");
              }), Dr(this, "getUnloadedLatencyPoints", function() {
                return Kr(r2, Ks).call(r2, "getLatencyPoints", "latency", []);
              }), Dr(this, "getDownLoadedLatency", function() {
                return Kr(r2, Ks).call(r2, "getLoadedLatency", "download");
              }), Dr(this, "getDownLoadedJitter", function() {
                return Kr(r2, Ks).call(r2, "getLoadedJitter", "download");
              }), Dr(this, "getDownLoadedLatencyPoints", function() {
                return Kr(r2, Ks).call(
                  r2,
                  "getLoadedLatencyPoints",
                  "download",
                  []
                );
              }), Dr(this, "getUpLoadedLatency", function() {
                return Kr(r2, Ks).call(r2, "getLoadedLatency", "upload");
              }), Dr(this, "getUpLoadedJitter", function() {
                return Kr(r2, Ks).call(r2, "getLoadedJitter", "upload");
              }), Dr(this, "getUpLoadedLatencyPoints", function() {
                return Kr(r2, Ks).call(
                  r2,
                  "getLoadedLatencyPoints",
                  "upload",
                  []
                );
              }), Dr(this, "getDownloadBandwidth", function() {
                return Kr(r2, Ks).call(r2, "getBandwidth", "download");
              }), Dr(this, "getDownloadBandwidthPoints", function() {
                return Kr(r2, Ks).call(
                  r2,
                  "getBandwidthPoints",
                  "download",
                  []
                );
              }), Dr(this, "getUploadBandwidth", function() {
                return Kr(r2, Ks).call(r2, "getBandwidth", "upload");
              }), Dr(this, "getUploadBandwidthPoints", function() {
                return Kr(r2, Ks).call(r2, "getBandwidthPoints", "upload", []);
              }), Dr(this, "getPacketLoss", function() {
                return Kr(r2, Ks).call(r2, "getPacketLoss", "packetLoss");
              }), Dr(this, "getPacketLossDetails", function() {
                return Kr(r2, Ks).call(
                  r2,
                  "getPacketLossDetails",
                  "packetLoss",
                  void 0,
                  true
                );
              }), Dr(this, "getScores", function() {
                return Kr(r2, Gs).getScores(r2.getSummary());
              }), Xr(this, Hs, { writable: true, value: void 0 }), Xr(this, zs, { writable: true, value: void 0 }), Xr(this, Gs, { writable: true, value: void 0 }), Xr(this, Ks, {
                writable: true,
                value: function(e4, t4) {
                  var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, s2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                  return r2.raw.hasOwnProperty(t4) && r2.raw[t4].started ? s2 && r2.raw[t4].error ? { error: r2.raw[t4].error } : Kr(r2, zs)[e4](r2.raw[t4].results) : n2;
                }
              }), Xr(this, $s, {
                writable: true,
                value: function() {
                  return Kr(r2, Ks).call(
                    r2,
                    "getReachability",
                    "v4Reachability"
                  );
                }
              }), Xr(this, Js, {
                writable: true,
                value: function() {
                  return Kr(r2, Ks).call(
                    r2,
                    "getReachabilityDetails",
                    "v4Reachability"
                  );
                }
              }), Xr(this, Qs, {
                writable: true,
                value: function() {
                  return Kr(r2, Ks).call(
                    r2,
                    "getReachability",
                    "v6Reachability"
                  );
                }
              }), Xr(this, Ys, {
                writable: true,
                value: function() {
                  return Kr(r2, Ks).call(
                    r2,
                    "getReachabilityDetails",
                    "v6Reachability"
                  );
                }
              }), $r(this, Hs, t3), this.clear(), $r(this, zs, new Bs(Kr(this, Hs))), $r(this, Gs, new Vs(Kr(this, Hs)));
            }
            return xr(e3, [
              {
                key: "isFinished",
                get: function() {
                  return Object.values(this.raw).every(function(e4) {
                    return e4.finished;
                  });
                }
              },
              {
                key: "clear",
                value: function() {
                  this.raw = Object.assign.apply(
                    Object,
                    [{}].concat(
                      Vr(
                        Vr(
                          new Set(
                            Kr(this, Hs).measurements.map(function(e4) {
                              return e4.type;
                            })
                          )
                        ).map(function(e4) {
                          return Dr({}, e4, {
                            started: false,
                            finished: false,
                            results: {}
                          });
                        })
                      )
                    )
                  );
                }
              },
              {
                key: "getSummary",
                value: function() {
                  var e4 = {
                    download: this.getDownloadBandwidth,
                    upload: this.getUploadBandwidth,
                    latency: this.getUnloadedLatency,
                    jitter: this.getUnloadedJitter,
                    downLoadedLatency: this.getDownLoadedLatency,
                    downLoadedJitter: this.getDownLoadedJitter,
                    upLoadedLatency: this.getUpLoadedLatency,
                    upLoadedJitter: this.getUpLoadedJitter,
                    packetLoss: this.getPacketLoss,
                    v4Reachability: Kr(this, $s),
                    v6Reachability: Kr(this, Qs)
                  };
                  return Object.assign.apply(
                    Object,
                    Vr(
                      Object.entries(e4).map(function(e5) {
                        var t3 = qr(e5, 2), r2 = t3[0], n2 = (0, t3[1])();
                        return void 0 === n2 ? {} : Dr({}, r2, n2);
                      })
                    )
                  );
                }
              }
            ]), e3;
          }(), Zs = function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
            return e3 ? Math.round(e3 * Math.pow(10, t3)) / Math.pow(10, t3) : e3;
          }, ei = function(e3) {
            return e3.map(function(e4) {
              return Zs(e4, 2);
            });
          }, ti = function(e3) {
            return e3.map(function(e4) {
              return { bytes: +e4.bytes, bps: Zs(e4.bps) };
            });
          }, ri = {
            latencyMs: ["getUnloadedLatencyPoints", ei],
            download: ["getDownloadBandwidthPoints", ti],
            upload: ["getUploadBandwidthPoints", ti],
            downLoadedLatencyMs: ["getDownLoadedLatencyPoints", ei],
            upLoadedLatencyMs: ["getUpLoadedLatencyPoints", ei],
            packetLoss: [
              "getPacketLossDetails",
              function(e3) {
                return e3.error ? void 0 : {
                  numMessages: e3.numMessagesSent,
                  lossRatio: Zs(e3.packetLoss, 4)
                };
              }
            ]
          }, ni = function(e3, t3) {
            var r2 = t3.apiUrl, n2 = {};
            Object.entries(ri).forEach(function(t4) {
              var r3 = qr(t4, 2), s3 = r3[0], i2 = qr(r3[1], 2), a2 = i2[0], o2 = i2[1], c2 = void 0 === o2 ? function(e4) {
                return e4;
              } : o2, d2 = e3[a2]();
              d2 && (n2[s3] = c2(d2));
            });
            var s2 = e3.getScores();
            s2 && (n2.scores = Object.assign.apply(
              Object,
              [{}].concat(
                Vr(
                  Object.entries(s2).map(function(e4) {
                    var t4, r3 = qr(e4, 2), n3 = r3[0], s3 = r3[1];
                    return Dr({}, n3, {
                      points: (t4 = s3).points,
                      classification: t4.classificationName
                    });
                  })
                )
              )
            )), fetch(r2, { method: "POST", body: JSON.stringify(n2) });
          }, si = ["type"], ii = ["numPackets"], ai = ["bytes"], oi = ["latency", "latencyUnderLoad", "download", "upload"], ci = function() {
            return "".concat(Math.round(1e16 * Math.random()));
          }, di = /* @__PURE__ */ new WeakMap(), li = /* @__PURE__ */ new WeakMap(), ui = /* @__PURE__ */ new WeakMap(), pi = /* @__PURE__ */ new WeakMap(), hi = /* @__PURE__ */ new WeakMap(), mi = /* @__PURE__ */ new WeakMap(), fi = /* @__PURE__ */ new WeakMap(), gi = /* @__PURE__ */ new WeakMap(), vi = /* @__PURE__ */ new WeakMap(), _i = /* @__PURE__ */ new WeakMap(), yi = /* @__PURE__ */ new WeakMap(), bi = /* @__PURE__ */ new WeakSet(), wi = /* @__PURE__ */ new WeakSet(), Si = /* @__PURE__ */ new WeakSet(), Ri = /* @__PURE__ */ new WeakSet(), ki = /* @__PURE__ */ new WeakSet(), Ei = /* @__PURE__ */ new WeakSet(), Ci = /* @__PURE__ */ new WeakSet(), Ti = function() {
            function e3() {
              var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              Pr(this, e3), Zr(this, Ci), Zr(this, Ei), Zr(this, ki), Zr(this, Ri), Zr(this, Si), Zr(this, wi), Zr(this, bi), Dr(this, "onRunningChange", function() {
              }), Dr(this, "onResultsChange", function() {
              }), Xr(this, di, { writable: true, value: function() {
              } }), Xr(this, li, { writable: true, value: function() {
              } }), Xr(this, ui, { writable: true, value: void 0 }), Xr(this, pi, { writable: true, value: void 0 }), Xr(this, hi, { writable: true, value: ci() }), Xr(this, mi, { writable: true, value: -1 }), Xr(this, fi, { writable: true, value: void 0 }), Xr(this, gi, { writable: true, value: 1e6 }), Xr(this, vi, { writable: true, value: 1e6 }), Xr(this, _i, { writable: true, value: false }), Xr(this, yi, { writable: true, value: false }), $r(this, ui, Object.assign({}, tn, t3, rn)), $r(this, pi, new Xs(Kr(this, ui))), Kr(this, ui).autoStart && this.play();
            }
            return xr(e3, [
              {
                key: "results",
                get: function() {
                  return Kr(this, pi);
                }
              },
              {
                key: "isRunning",
                get: function() {
                  return Kr(this, _i);
                }
              },
              {
                key: "isFinished",
                get: function() {
                  return Kr(this, yi);
                }
              },
              {
                key: "onFinish",
                set: function(e4) {
                  $r(this, di, e4);
                }
              },
              {
                key: "onError",
                set: function(e4) {
                  $r(this, li, e4);
                }
              },
              {
                key: "pause",
                value: function() {
                  oi.includes(Qr(this, Si, xi).call(this)) && Kr(this, fi).pause(), Qr(this, bi, Pi).call(this, false);
                }
              },
              {
                key: "play",
                value: function() {
                  Kr(this, _i) || (Qr(this, bi, Pi).call(this, true), Qr(this, Ci, Mi).call(this));
                }
              },
              {
                key: "restart",
                value: function() {
                  Qr(this, ki, Ii).call(this), this.play();
                }
              }
            ]), e3;
          }();
          function Pi(e3) {
            e3 !== Kr(this, _i) && ($r(this, _i, e3), this.onRunningChange(Kr(this, _i)));
          }
          function Oi(e3) {
            var t3 = this;
            e3 !== Kr(this, yi) && ($r(this, yi, e3), e3 && setTimeout(function() {
              return Kr(t3, di).call(t3, t3.results);
            }));
          }
          function xi() {
            return Kr(this, mi) < 0 || Kr(this, mi) >= Kr(this, ui).measurements.length ? null : Kr(this, ui).measurements[Kr(this, mi)].type;
          }
          function Di() {
            return Kr(this, pi).raw[Qr(this, Si, xi).call(this)] || void 0;
          }
          function Ii() {
            Qr(this, Ei, Ai).call(this), $r(this, hi, ci()), $r(this, mi, -1), $r(this, fi, void 0), Qr(this, bi, Pi).call(this, false), Qr(this, wi, Oi).call(this, false), Kr(this, pi).clear();
          }
          function Ai() {
            var e3 = Kr(this, fi);
            e3 && (e3.onFinished = e3.onConnectionError = e3.onFail = e3.onMsgReceived = e3.onCredentialsFailure = e3.onMeasurementResult = function() {
            }, oi.includes(Qr(this, Si, xi).call(this)) && e3.pause());
          }
          function Mi() {
            var e3, t3 = this;
            if (!(oi.includes(Qr(this, Si, xi).call(this)) && Qr(this, Ri, Di).call(this) && Qr(this, Ri, Di).call(this).started) || Qr(this, Ri, Di).call(this).finished || Qr(this, Ri, Di).call(this).finishedCurrentRound || Qr(this, Ri, Di).call(this).error) {
              if ($r(this, mi, (e3 = Kr(this, mi), ++e3)), Kr(this, mi) >= Kr(this, ui).measurements.length)
                return Qr(this, bi, Pi).call(this, false), void Qr(this, wi, Oi).call(this, true);
              var r2, n2 = Kr(this, ui).measurements[Kr(this, mi)], s2 = n2.type, i2 = Lr(n2, si), a2 = Qr(this, Ri, Di).call(this), o2 = Kr(this, ui), c2 = o2.downloadApiUrl, d2 = o2.uploadApiUrl, l2 = o2.estimatedServerTime;
              switch (s2) {
                case "v4Reachability":
                case "v6Reachability":
                  (r2 = new Ms("https://".concat(i2.host), {
                    fetchOptions: { method: "GET", mode: "no-cors" }
                  })).onFinished = function(e4) {
                    a2.finished = true, a2.results = Tr({ host: i2.host }, e4), t3.onResultsChange({ type: s2 }), Qr(t3, Ci, Mi).call(t3);
                  };
                  break;
                case "rpki":
                  (r2 = new Ms("https://".concat(Kr(this, ui).rpkiInvalidHost), {
                    timeout: 5e3
                  })).onFinished = function(e4) {
                    (e4.response ? e4.response.json() : Promise.resolve()).then(
                      function(r3) {
                        a2.finished = true, a2.results = Tr(
                          {
                            host: Kr(t3, ui).rpkiInvalidHost,
                            filteringInvalids: !e4.reachable
                          },
                          r3 ? { asn: r3.asn, name: r3.name } : {}
                        ), t3.onResultsChange({ type: s2 }), Qr(t3, Ci, Mi).call(t3);
                      }
                    );
                  };
                  break;
                case "nxdomain":
                  (r2 = new Ms("https://".concat(i2.nxhost), {
                    fetchOptions: { mode: "no-cors" }
                  })).onFinished = function(e4) {
                    a2.finished = true, a2.results = { host: i2.nxhost, reachable: e4.reachable }, t3.onResultsChange({ type: s2 }), Qr(t3, Ci, Mi).call(t3);
                  };
                  break;
                case "packetLoss":
                case "packetLossUnderLoad":
                  a2.finished = false;
                  var u2 = i2.numPackets, p2 = Lr(i2, ii), h2 = Kr(this, ui), m2 = h2.turnServerUri, f2 = h2.turnServerCredsApiUrl, g2 = h2.turnServerUser, v2 = h2.turnServerPass, _2 = h2.includeCredentials;
                  (r2 = new Is(
                    Tr(
                      {
                        turnServerUri: m2,
                        turnServerCredsApi: f2,
                        turnServerCredsApiIncludeCredentials: _2,
                        turnServerUser: g2,
                        turnServerPass: v2,
                        numMsgs: u2,
                        downloadChunkSize: i2.loadDown ? Kr(this, gi) : void 0,
                        uploadChunkSize: i2.loadUp ? Kr(this, vi) : void 0,
                        downloadApiUrl: c2,
                        uploadApiUrl: d2
                      },
                      p2
                    )
                  )).onMsgReceived = function() {
                    a2.results = Object.assign({}, r2.results), t3.onResultsChange({ type: s2 });
                  }, r2.onFinished = function() {
                    a2.finished = true, t3.onResultsChange({ type: s2 }), Qr(t3, Ci, Mi).call(t3);
                  }, r2.onConnectionError = function(e4) {
                    a2.error = e4, t3.onResultsChange({ type: s2 }), Kr(t3, li).call(
                      t3,
                      "Connection error while measuring packet loss: ".concat(
                        e4
                      )
                    ), Qr(t3, Ci, Mi).call(t3);
                  }, r2.onCredentialsFailure = function() {
                    a2.error = "unable to get turn server credentials", t3.onResultsChange({ type: s2 }), Kr(t3, li).call(
                      t3,
                      "Error while measuring packet loss: unable to get turn server credentials."
                    ), Qr(t3, Ci, Mi).call(t3);
                  };
                  break;
                case "latency":
                case "latencyUnderLoad":
                  a2.finished = false, (r2 = new ns(
                    [
                      {
                        dir: "down",
                        bytes: 0,
                        count: i2.numPackets,
                        bypassMinDuration: true
                      }
                    ],
                    {
                      downloadApiUrl: c2,
                      uploadApiUrl: d2,
                      estimatedServerTime: l2,
                      logApiUrl: Kr(this, ui).logMeasurementApiUrl,
                      measurementId: Kr(this, hi),
                      downloadChunkSize: i2.loadDown ? Kr(this, gi) : void 0,
                      uploadChunkSize: i2.loadUp ? Kr(this, vi) : void 0
                    }
                  )).fetchOptions = {
                    credentials: Kr(this, ui).includeCredentials ? "include" : void 0
                  }, r2.onMeasurementResult = r2.onNewMeasurementStarted = function(e4, r3) {
                    a2.results = Object.assign({}, r3.down[0]), t3.onResultsChange({ type: s2 });
                  }, r2.onFinished = function() {
                    a2.finished = true, t3.onResultsChange({ type: s2 }), Kr(t3, _i) && Qr(t3, Ci, Mi).call(t3);
                  }, r2.onConnectionError = function(e4) {
                    a2.error = e4, t3.onResultsChange({ type: s2 }), Kr(t3, li).call(
                      t3,
                      "Connection error while measuring latency: ".concat(e4)
                    ), Qr(t3, Ci, Mi).call(t3);
                  }, r2.play();
                  break;
                case "download":
                case "upload":
                  if (a2.finished || a2.error) Qr(this, Ci, Mi).call(this);
                  else {
                    delete a2.finishedCurrentRound;
                    var y2 = Kr(this, ui)["measure".concat(
                      "download" === s2 ? "Down" : "Up",
                      "loadLoadedLatency"
                    )];
                    (r2 = new ns(
                      [Tr({ dir: "download" === s2 ? "down" : "up" }, i2)],
                      {
                        downloadApiUrl: c2,
                        uploadApiUrl: d2,
                        estimatedServerTime: l2,
                        logApiUrl: Kr(this, ui).logMeasurementApiUrl,
                        measurementId: Kr(this, hi),
                        measureParallelLatency: y2,
                        parallelLatencyThrottleMs: Kr(this, ui).loadedLatencyThrottle
                      }
                    )).fetchOptions = {
                      credentials: Kr(this, ui).includeCredentials ? "include" : void 0
                    }, r2.finishRequestDuration = Kr(
                      this,
                      ui
                    ).bandwidthFinishRequestDuration, r2.onNewMeasurementStarted = function(e4) {
                      var r3 = e4.count, n3 = e4.bytes, i3 = a2.results = Object.assign({}, a2.results);
                      !i3.hasOwnProperty(n3) && (i3[n3] = {
                        timings: [],
                        numMeasurements: 0,
                        sideLatency: y2 ? [] : void 0
                      }), i3[n3].numMeasurements - i3[n3].timings.length !== r3 && (i3[n3].numMeasurements += r3, t3.onResultsChange({ type: s2 }));
                    }, r2.onMeasurementResult = function(e4) {
                      var r3 = e4.bytes, n3 = Lr(e4, ai);
                      a2.results[r3].timings.push(n3), a2.results = Object.assign({}, a2.results), t3.onResultsChange({ type: s2 });
                    }, r2.onParallelLatencyResult = function(e4) {
                      a2.results[i2.bytes].sideLatency.push(e4), a2.results = Object.assign({}, a2.results), t3.onResultsChange({ type: s2 });
                    }, r2.onFinished = function(e4) {
                      var r3 = !Kr(t3, ui).measurements.slice(Kr(t3, mi) + 1).map(function(e5) {
                        return e5.type;
                      }).includes(s2), n3 = Math.min.apply(
                        Math,
                        Vr(
                          Object.values("download" === s2 ? e4.down : e4.up).slice(-1)[0].timings.map(function(e5) {
                            return e5.duration;
                          })
                        )
                      );
                      if (r3 || !i2.bypassMinDuration && n3 > Kr(t3, ui).bandwidthFinishRequestDuration) {
                        a2.finished = true, t3.onResultsChange({ type: s2 });
                        var o3 = 0.5 * Object.keys(a2.results).map(function(e5) {
                          return +e5;
                        }).sort(function(e5, t4) {
                          return t4 - e5;
                        })[0];
                        "download" === s2 && $r(t3, gi, o3), "upload" === s2 && $r(t3, vi, o3);
                      } else a2.finishedCurrentRound = true;
                      Kr(t3, _i) && Qr(t3, Ci, Mi).call(t3);
                    }, r2.onConnectionError = function(e4) {
                      a2.error = e4, t3.onResultsChange({ type: s2 }), Kr(t3, li).call(
                        t3,
                        "Connection error while measuring ".concat(s2, ": ").concat(e4)
                      ), Qr(t3, Ci, Mi).call(t3);
                    }, r2.play();
                  }
              }
              $r(this, fi, r2), a2.started = true, this.onResultsChange({ type: s2 });
            } else Kr(this, fi).play();
          }
          var Li = /* @__PURE__ */ new WeakMap(), Ni = /* @__PURE__ */ new WeakMap(), ji = function(e3) {
            Ir(r2, e3);
            var t3 = jr(r2);
            function r2(e4) {
              var n2, s2;
              Pr(this, r2);
              for (var i2 = arguments.length, a2 = new Array(i2 > 1 ? i2 - 1 : 0), o2 = 1; o2 < i2; o2++)
                a2[o2 - 1] = arguments[o2];
              return Xr(Nr(s2 = t3.call.apply(t3, [this, e4].concat(a2))), Li, {
                writable: true,
                value: void 0
              }), Xr(Nr(s2), Ni, {
                writable: true,
                value: function(e5) {
                  Kr(Nr(s2), Li) && ni(e5, { apiUrl: Kr(Nr(s2), Li) });
                }
              }), Wr(
                (n2 = Nr(s2), Ar(r2.prototype)),
                "onFinish",
                Kr(Nr(s2), Ni),
                n2,
                true
              ), $r(Nr(s2), Li, Object.assign({}, tn, e4, rn).logAimApiUrl), s2;
            }
            return xr(r2, [
              {
                key: "onFinish",
                set: function(e4) {
                  var t4 = this;
                  Wr(
                    Ar(r2.prototype),
                    "onFinish",
                    function(r3) {
                      e4(r3), Kr(t4, Ni).call(t4, r3);
                    },
                    this,
                    true
                  );
                }
              }
            ]), r2;
          }(Ti), Bi = r(9633);
          function Fi(e3, t3) {
            var r2 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
            if (!r2) {
              if (Array.isArray(e3) || (r2 = function(e4, t4) {
                if (e4) {
                  if ("string" == typeof e4) return Ui(e4, t4);
                  var r3 = {}.toString.call(e4).slice(8, -1);
                  return "Object" === r3 && e4.constructor && (r3 = e4.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e4) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? Ui(e4, t4) : void 0;
                }
              }(e3)) || t3 && e3 && "number" == typeof e3.length) {
                r2 && (e3 = r2);
                var n2 = 0, s2 = function() {
                };
                return {
                  s: s2,
                  n: function() {
                    return n2 >= e3.length ? { done: true } : { done: false, value: e3[n2++] };
                  },
                  e: function(e4) {
                    throw e4;
                  },
                  f: s2
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var i2, a2 = true, o2 = false;
            return {
              s: function() {
                r2 = r2.call(e3);
              },
              n: function() {
                var e4 = r2.next();
                return a2 = e4.done, e4;
              },
              e: function(e4) {
                o2 = true, i2 = e4;
              },
              f: function() {
                try {
                  a2 || null == r2.return || r2.return();
                } finally {
                  if (o2) throw i2;
                }
              }
            };
          }
          function Ui(e3, t3) {
            (null == t3 || t3 > e3.length) && (t3 = e3.length);
            for (var r2 = 0, n2 = Array(t3); r2 < t3; r2++) n2[r2] = e3[r2];
            return n2;
          }
          var Wi = [R], qi = false, Vi = function() {
            return (0, i.A)(
              function e3() {
                (0, s.A)(this, e3), (0, a.A)(this, "keyProvider", null);
              },
              null,
              [
                {
                  key: "setKeyProvider",
                  value: function(e3) {
                    this.keyProvider = e3;
                  }
                },
                {
                  key: "getKeyProvider",
                  value: function() {
                    return this.keyProvider;
                  }
                },
                {
                  key: "config",
                  value: function(e3) {
                    if (!e3)
                      throw new Error(
                        "'token' is empty, please provide it in config"
                      );
                    this.apiKey = e3;
                    var t3 = _(Z, void 0, b.apply(void 0, Wi));
                    window.STORE = t3, ee.default.init({ store: t3 });
                  }
                },
                {
                  key: "getCameras",
                  value: (v2 = (0, t2.A)(
                    c().mark(function e3() {
                      var r3, n3, s2, i2;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (e4.prev = 0, r3 = navigator.userAgent.includes("Firefox"), n3 = [], !r3) {
                                  e4.next = 8;
                                  break;
                                }
                                return e4.next = 6, new Promise(function(e5, r4) {
                                  navigator.mediaDevices.getUserMedia({ audio: false, video: true }).then(
                                    function() {
                                      var r5 = (0, t2.A)(
                                        c().mark(function t3(r6) {
                                          var s3;
                                          return c().wrap(function(t4) {
                                            for (; ; )
                                              switch (t4.prev = t4.next) {
                                                case 0:
                                                  return t4.next = 2, navigator.mediaDevices.enumerateDevices();
                                                case 2:
                                                  s3 = t4.sent, n3 = s3.filter(function(e6) {
                                                    return "videoinput" === e6.kind;
                                                  }).map(function(e6) {
                                                    return new pr(
                                                      e6.deviceId,
                                                      e6.groupId,
                                                      e6.kind,
                                                      e6.label
                                                    );
                                                  }), e5(n3), r6.getTracks().forEach(function(e6) {
                                                    return e6.stop();
                                                  });
                                                case 6:
                                                case "end":
                                                  return t4.stop();
                                              }
                                          }, t3);
                                        })
                                      );
                                      return function(e6) {
                                        return r5.apply(this, arguments);
                                      };
                                    }()
                                  ).catch(function(e6) {
                                    console.error(
                                      "Error in getCameras()",
                                      e6
                                    ), r4(e6);
                                  });
                                });
                              case 6:
                                e4.next = 12;
                                break;
                              case 8:
                                return e4.next = 10, navigator.mediaDevices.enumerateDevices();
                              case 10:
                                s2 = e4.sent, n3 = s2.filter(function(e5) {
                                  return "videoinput" === e5.kind;
                                }).map(function(e5) {
                                  return new pr(
                                    e5.deviceId,
                                    e5.groupId,
                                    e5.kind,
                                    e5.label
                                  );
                                });
                              case 12:
                                return e4.abrupt("return", n3);
                              case 15:
                                e4.prev = 15, e4.t0 = e4.catch(0), i2 = e4.t0.message, e4.t0 instanceof TypeError && "TypeError" === e4.t0.name && (i2 = ir.q.ERROR_CAMERA_ACCESS_UNAVAILABLE.message), console.error(
                                  "An error occurred in getCameras(), ".concat(
                                    i2
                                  )
                                );
                              case 20:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [[0, 15]]
                      );
                    })
                  ), function() {
                    return v2.apply(this, arguments);
                  })
                },
                {
                  key: "getMicrophones",
                  value: (g2 = (0, t2.A)(
                    c().mark(function e3() {
                      var r3, n3, s2, i2;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (e4.prev = 0, r3 = navigator.userAgent.includes("Firefox"), n3 = [], !r3) {
                                  e4.next = 8;
                                  break;
                                }
                                return e4.next = 6, new Promise(function(e5, r4) {
                                  navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(
                                    function() {
                                      var r5 = (0, t2.A)(
                                        c().mark(function t3(r6) {
                                          var s3;
                                          return c().wrap(function(t4) {
                                            for (; ; )
                                              switch (t4.prev = t4.next) {
                                                case 0:
                                                  return t4.next = 2, navigator.mediaDevices.enumerateDevices();
                                                case 2:
                                                  s3 = t4.sent, n3 = s3.filter(function(e6) {
                                                    return "audioinput" === e6.kind;
                                                  }).map(function(e6) {
                                                    return new hr(
                                                      e6.deviceId,
                                                      e6.groupId,
                                                      e6.kind,
                                                      e6.label
                                                    );
                                                  }), e5(n3), r6.getTracks().forEach(function(e6) {
                                                    return e6.stop();
                                                  });
                                                case 6:
                                                case "end":
                                                  return t4.stop();
                                              }
                                          }, t3);
                                        })
                                      );
                                      return function(e6) {
                                        return r5.apply(this, arguments);
                                      };
                                    }()
                                  ).catch(function(e6) {
                                    console.error(
                                      "Error in getMicrophones()",
                                      e6
                                    ), r4(e6);
                                  });
                                });
                              case 6:
                                e4.next = 12;
                                break;
                              case 8:
                                return e4.next = 10, navigator.mediaDevices.enumerateDevices();
                              case 10:
                                s2 = e4.sent, n3 = s2.filter(function(e5) {
                                  return "audioinput" === e5.kind;
                                }).map(function(e5) {
                                  return new hr(
                                    e5.deviceId,
                                    e5.groupId,
                                    e5.kind,
                                    e5.label
                                  );
                                });
                              case 12:
                                return e4.abrupt("return", n3);
                              case 15:
                                e4.prev = 15, e4.t0 = e4.catch(0), i2 = e4.t0.message, e4.t0 instanceof TypeError && "TypeError" === e4.t0.name && (i2 = ir.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE.message), console.error(
                                  "An error occurred in getMicrophones(), ".concat(
                                    i2
                                  )
                                );
                              case 20:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [[0, 15]]
                      );
                    })
                  ), function() {
                    return g2.apply(this, arguments);
                  })
                },
                {
                  key: "getPlaybackDevices",
                  value: (f2 = (0, t2.A)(
                    c().mark(function e3() {
                      var r3, n3, s2, i2;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (e4.prev = 0, r3 = navigator.userAgent.includes("Firefox"), n3 = [], !r3) {
                                  e4.next = 8;
                                  break;
                                }
                                return e4.next = 6, new Promise(function(e5, r4) {
                                  navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(
                                    function() {
                                      var r5 = (0, t2.A)(
                                        c().mark(function t3(r6) {
                                          var s3;
                                          return c().wrap(function(t4) {
                                            for (; ; )
                                              switch (t4.prev = t4.next) {
                                                case 0:
                                                  return t4.next = 2, navigator.mediaDevices.enumerateDevices();
                                                case 2:
                                                  s3 = t4.sent, n3 = s3.filter(function(e6) {
                                                    return "audiooutput" === e6.kind;
                                                  }).map(function(e6) {
                                                    return new mr(
                                                      e6.deviceId,
                                                      e6.groupId,
                                                      e6.kind,
                                                      e6.label
                                                    );
                                                  }), e5(n3), r6.getTracks().forEach(function(e6) {
                                                    return e6.stop();
                                                  });
                                                case 6:
                                                case "end":
                                                  return t4.stop();
                                              }
                                          }, t3);
                                        })
                                      );
                                      return function(e6) {
                                        return r5.apply(this, arguments);
                                      };
                                    }()
                                  ).catch(function(e6) {
                                    console.error(
                                      "Error in getPlaybackDevices()",
                                      e6
                                    ), r4(e6);
                                  });
                                });
                              case 6:
                                e4.next = 12;
                                break;
                              case 8:
                                return e4.next = 10, navigator.mediaDevices.enumerateDevices();
                              case 10:
                                s2 = e4.sent, n3 = s2.filter(function(e5) {
                                  return "audiooutput" === e5.kind;
                                }).map(function(e5) {
                                  return new mr(
                                    e5.deviceId,
                                    e5.groupId,
                                    e5.kind,
                                    e5.label
                                  );
                                });
                              case 12:
                                return e4.abrupt("return", n3);
                              case 15:
                                e4.prev = 15, e4.t0 = e4.catch(0), i2 = e4.t0.message, e4.t0 instanceof TypeError && "TypeError" === e4.t0.name && (i2 = "Playback device access unavailable: Please ensure your device is compatible and that you're on a secure website (https://)"), console.error(
                                  "An error occurred in getPlaybackDevices(), ".concat(
                                    i2
                                  )
                                );
                              case 20:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [[0, 15]]
                      );
                    })
                  ), function() {
                    return f2.apply(this, arguments);
                  })
                },
                {
                  key: "getDevices",
                  value: (m2 = (0, t2.A)(
                    c().mark(function e3() {
                      var t3, r3, n3, s2, i2, a2;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.prev = 0, e4.next = 3, navigator.mediaDevices.enumerateDevices();
                              case 3:
                                t3 = e4.sent, r3 = [], n3 = Fi(t3);
                                try {
                                  for (n3.s(); !(s2 = n3.n()).done; )
                                    i2 = s2.value, r3.push(
                                      new ur(
                                        i2.deviceId,
                                        i2.groupId,
                                        i2.kind,
                                        i2.label
                                      )
                                    );
                                } catch (e5) {
                                  n3.e(e5);
                                } finally {
                                  n3.f();
                                }
                                return e4.abrupt("return", r3);
                              case 10:
                                e4.prev = 10, e4.t0 = e4.catch(0), a2 = e4.t0.message, e4.t0 instanceof TypeError && (a2 = "TypeError" === e4.t0.name ? "Could not access devices : Please ensure your devices is compatible and that you're on a secure website (https://)" : e4.t0.message), console.error(
                                  "An error occurred in getDevices(), ".concat(
                                    a2
                                  )
                                );
                              case 15:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [[0, 10]]
                      );
                    })
                  ), function() {
                    return m2.apply(this, arguments);
                  })
                },
                {
                  key: "on",
                  value: function(e3, t3) {
                    if ("device-changed" !== e3)
                      throw new Error("Unsupported event type");
                    this.addDeviceChangeEvent(), this.eventEmitter.on(e3, t3);
                  }
                },
                {
                  key: "addDeviceChangeEvent",
                  value: function() {
                    var e3 = this;
                    if (!qi) {
                      this.getDevices().then(function(t3) {
                        e3.devices = t3;
                      });
                      try {
                        navigator.mediaDevices.addEventListener(
                          "devicechange",
                          function() {
                            var r4 = (0, t2.A)(
                              c().mark(function t3(r5) {
                                var n3, s2, i2, a2, o3;
                                return c().wrap(
                                  function(t4) {
                                    for (; ; )
                                      switch (t4.prev = t4.next) {
                                        case 0:
                                          return n3 = e3.devices, t4.next = 3, e3.getDevices();
                                        case 3:
                                          e3.devices = t4.sent, s2 = new Array(), i2 = Fi(e3.devices), t4.prev = 6, o3 = c().mark(function e4() {
                                            var t5;
                                            return c().wrap(function(e5) {
                                              for (; ; )
                                                switch (e5.prev = e5.next) {
                                                  case 0:
                                                    t5 = a2.value, 0 == n3.filter(function(e6) {
                                                      return e6.deviceId == t5.deviceId && e6.kind == t5.kind;
                                                    }).length ? s2.push(t5) : n3 = n3.filter(
                                                      function(e6) {
                                                        return !(e6.deviceId == t5.deviceId && e6.kind == t5.kind);
                                                      }
                                                    );
                                                  case 3:
                                                  case "end":
                                                    return e5.stop();
                                                }
                                            }, e4);
                                          }), i2.s();
                                        case 9:
                                          if ((a2 = i2.n()).done) {
                                            t4.next = 13;
                                            break;
                                          }
                                          return t4.delegateYield(o3(), "t0", 11);
                                        case 11:
                                          t4.next = 9;
                                          break;
                                        case 13:
                                          t4.next = 18;
                                          break;
                                        case 15:
                                          t4.prev = 15, t4.t1 = t4.catch(6), i2.e(t4.t1);
                                        case 18:
                                          return t4.prev = 18, i2.f(), t4.finish(18);
                                        case 21:
                                          0 != s2.length && e3.eventEmitter.emit(
                                            "device-changed",
                                            { devices: e3.devices }
                                          ), 0 != n3.length && e3.eventEmitter.emit(
                                            "device-changed",
                                            { devices: e3.devices }
                                          );
                                        case 23:
                                        case "end":
                                          return t4.stop();
                                      }
                                  },
                                  t3,
                                  null,
                                  [[6, 15, 18, 21]]
                                );
                              })
                            );
                            return function(e4) {
                              return r4.apply(this, arguments);
                            };
                          }()
                        ), qi = true;
                      } catch (e4) {
                        var r3 = e4.message;
                        e4 instanceof TypeError && (r3 = "TypeError" === e4.name ? "Could not access devices : Please ensure your devices is compatible and that you're on a secure website (https://)" : e4.message), console.error(
                          "An error occurred in device-change event, ".concat(
                            r3
                          )
                        );
                      }
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e3, t3) {
                    if ("device-changed" !== e3)
                      throw new Error("Unsupported event type");
                    this.eventEmitter.off(e3, t3);
                  }
                },
                {
                  key: "checkPermissions",
                  value: (h2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, n3, s2, i2, a2;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (t3 || (t3 = fr.AUDIO_AND_VIDEO), r3 = /* @__PURE__ */ new Map(), !t3.includes(fr.AUDIO) && !t3.includes(fr.AUDIO_AND_VIDEO)) {
                                  e4.next = 15;
                                  break;
                                }
                                return n3 = true, e4.prev = 4, e4.next = 7, navigator.permissions.query({
                                  name: "microphone"
                                });
                              case 7:
                                "prompt" != (s2 = e4.sent).state && "denied" != s2.state || (n3 = false), e4.next = 14;
                                break;
                              case 11:
                                throw e4.prev = 11, e4.t0 = e4.catch(4), Error(
                                  "Browser does not support microphone permission check"
                                );
                              case 14:
                                r3.set(fr.AUDIO, n3);
                              case 15:
                                if (!t3.includes(fr.VIDEO) && !t3.includes(fr.AUDIO_AND_VIDEO)) {
                                  e4.next = 28;
                                  break;
                                }
                                return i2 = true, e4.prev = 17, e4.next = 20, navigator.permissions.query({
                                  name: "camera"
                                });
                              case 20:
                                "prompt" != (a2 = e4.sent).state && "denied" != a2.state || (i2 = false), e4.next = 27;
                                break;
                              case 24:
                                throw e4.prev = 24, e4.t1 = e4.catch(17), Error(
                                  "Browser does not support camera permission check"
                                );
                              case 27:
                                r3.set(fr.VIDEO, i2);
                              case 28:
                                return e4.abrupt("return", r3);
                              case 29:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [
                          [4, 11],
                          [17, 24]
                        ]
                      );
                    })
                  ), function(e3) {
                    return h2.apply(this, arguments);
                  })
                },
                {
                  key: "requestPermission",
                  value: (p2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, n3, s2, i2, a2, o3, d3, l2, u3, p3, h3, m3, f3;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (t3 || (t3 = fr.AUDIO_AND_VIDEO), r3 = /* @__PURE__ */ new Map(), !t3.includes(fr.AUDIO_AND_VIDEO)) {
                                  e4.next = 32;
                                  break;
                                }
                                return s2 = { audio: true, video: true }, i2 = true, e4.prev = 5, e4.next = 8, navigator.mediaDevices.getUserMedia(s2);
                              case 8:
                                n3 = e4.sent, e4.next = 30;
                                break;
                              case 11:
                                if (e4.prev = 11, e4.t0 = e4.catch(5), !(e4.t0 instanceof DOMException)) {
                                  e4.next = 27;
                                  break;
                                }
                                e4.t1 = e4.t0.name, e4.next = "NotAllowedError" === e4.t1 ? 17 : "NotReadableError" === e4.t1 ? 19 : "NotFoundError" === e4.t1 ? 21 : 24;
                                break;
                              case 17:
                                return "Permission denied by system" === e4.t0.message && (a2 = ir.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 25);
                              case 19:
                                return a2 = zi(e4.t0, "video"), e4.abrupt("break", 25);
                              case 21:
                                return a2 = ir.q.ERROR_CAMERA_NOT_FOUND.message, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                  "Firefox"
                                ) && (a2 = ir.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 25);
                              case 24:
                                a2 = e4.t0.message;
                              case 25:
                                e4.next = 28;
                                break;
                              case 27:
                                a2 = e4.t0 instanceof TypeError && "TypeError" === e4.t0.name ? ir.q.ERROR_CAMERA_ACCESS_UNAVAILABLE.message : e4.t0.message;
                              case 28:
                                i2 = false, a2 && console.error(
                                  "An error occurred in request permission, ".concat(
                                    a2
                                  )
                                );
                              case 30:
                                n3 && setTimeout(function() {
                                  n3.getTracks().forEach(function(e5) {
                                    e5.stop();
                                  });
                                }, 100), r3.set(fr.AUDIO_AND_VIDEO, i2);
                              case 32:
                                if (!t3.includes(fr.VIDEO)) {
                                  e4.next = 62;
                                  break;
                                }
                                return d3 = { audio: false, video: true }, l2 = true, e4.prev = 35, e4.next = 38, navigator.mediaDevices.getUserMedia(d3);
                              case 38:
                                o3 = e4.sent, e4.next = 60;
                                break;
                              case 41:
                                if (e4.prev = 41, e4.t2 = e4.catch(35), !(e4.t2 instanceof DOMException)) {
                                  e4.next = 57;
                                  break;
                                }
                                e4.t3 = e4.t2.name, e4.next = "NotAllowedError" === e4.t3 ? 47 : "NotReadableError" === e4.t3 ? 49 : "NotFoundError" === e4.t3 ? 51 : 54;
                                break;
                              case 47:
                                return "Permission denied by system" === e4.t2.message && (u3 = ir.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 55);
                              case 49:
                                return u3 = zi(e4.t2, "video"), e4.abrupt("break", 55);
                              case 51:
                                return u3 = ir.q.ERROR_CAMERA_NOT_FOUND.message, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                  "Firefox"
                                ) && (u3 = ir.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 55);
                              case 54:
                                u3 = e4.t2.message;
                              case 55:
                                e4.next = 58;
                                break;
                              case 57:
                                u3 = e4.t2 instanceof TypeError && "TypeError" === e4.t2.name ? ir.q.ERROR_CAMERA_ACCESS_UNAVAILABLE.message : e4.t2.message;
                              case 58:
                                l2 = false, u3 && console.error(
                                  "An error occurred in request permission, ".concat(
                                    u3
                                  )
                                );
                              case 60:
                                o3 && o3.getTracks().forEach(function(e5) {
                                  e5.stop();
                                }), r3.set(fr.VIDEO, l2);
                              case 62:
                                if (!t3.includes(fr.AUDIO)) {
                                  e4.next = 92;
                                  break;
                                }
                                return h3 = { audio: true, video: false }, m3 = true, e4.prev = 65, e4.next = 68, navigator.mediaDevices.getUserMedia(h3);
                              case 68:
                                p3 = e4.sent, e4.next = 90;
                                break;
                              case 71:
                                if (e4.prev = 71, e4.t4 = e4.catch(65), !(e4.t4 instanceof DOMException)) {
                                  e4.next = 87;
                                  break;
                                }
                                e4.t5 = e4.t4.name, e4.next = "NotAllowedError" === e4.t5 ? 77 : "NotReadableError" === e4.t5 ? 79 : "NotFoundError" === e4.t5 ? 81 : 84;
                                break;
                              case 77:
                                return "Permission denied by system" === e4.t4.message && (f3 = ir.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 85);
                              case 79:
                                return f3 = zi(e4.t4, "audio"), e4.abrupt("break", 85);
                              case 81:
                                return f3 = ir.q.ERROR_MICROPHONE_NOT_FOUND.message, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                  "Firefox"
                                ) && (f3 = ir.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 85);
                              case 84:
                                f3 = e4.t4.message;
                              case 85:
                                e4.next = 88;
                                break;
                              case 87:
                                f3 = e4.t4 instanceof TypeError && "TypeError" === e4.t4.name ? ir.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE.message : e4.t4.message;
                              case 88:
                                m3 = false, f3 && console.error(
                                  "An error occurred in request permission, ".concat(
                                    f3
                                  )
                                );
                              case 90:
                                p3 && p3.getTracks().forEach(function(e5) {
                                  e5.stop();
                                }), r3.set(fr.AUDIO, m3);
                              case 92:
                                return e4.abrupt("return", r3);
                              case 93:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [
                          [5, 11],
                          [35, 41],
                          [65, 71]
                        ]
                      );
                    })
                  ), function(e3) {
                    return p2.apply(this, arguments);
                  })
                },
                {
                  key: "isInt",
                  value: function(e3) {
                    return "number" == typeof e3 && e3 % 1 == 0;
                  }
                },
                {
                  key: "getNetworkStats",
                  value: (u2 = (0, t2.A)(
                    c().mark(function e3() {
                      var t3, r3, n3, s2, i2, a2, o3 = arguments;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return r3 = (t3 = o3.length > 0 && void 0 !== o3[0] ? o3[0] : {}).timeoutDuration, n3 = t3.baseUrl, s2 = void 0 === n3 ? "api.videosdk.live" : n3, r3 && this.isInt(r3) || (r3 = 6e4), i2 = new Promise(function(e5, t4) {
                                  setTimeout(function() {
                                    t4(
                                      "Not able to get NetworkStats due to timeout"
                                    );
                                  }, r3);
                                }), a2 = new Promise(function(e5, t4) {
                                  if (navigator.onLine) {
                                    var r4 = new ji({
                                      measureDownloadLoadedLatency: false,
                                      measureUploadLoadedLatency: false,
                                      measurements: [
                                        {
                                          type: "upload",
                                          bytes: 3e6,
                                          count: 1,
                                          bypassMinDuration: true
                                        },
                                        {
                                          type: "download",
                                          bytes: 3e6,
                                          count: 1,
                                          bypassMinDuration: true
                                        }
                                      ],
                                      uploadApiUrl: "https://".concat(
                                        s2,
                                        "/test-upload-speed"
                                      ),
                                      downloadApiUrl: "https://".concat(
                                        s2,
                                        "/test-download-speed"
                                      )
                                    });
                                    r4.isRunning ? (r4.onFinish = function(t5) {
                                      e5({
                                        downloadSpeed: parseFloat(
                                          Number(
                                            t5.getDownloadBandwidth() / 1048576
                                          ).toFixed(2)
                                        ),
                                        uploadSpeed: parseFloat(
                                          Number(
                                            t5.getUploadBandwidth() / 1048576
                                          ).toFixed(2)
                                        )
                                      });
                                    }, r4.onError = function(e6) {
                                      t4("Not able to get NetworkStats");
                                    }) : t4("Not able to get NetworkStats");
                                  } else t4("Not able to get NetworkStats due to no Network");
                                }), e4.abrupt("return", Promise.race([a2, i2]));
                              case 5:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return u2.apply(this, arguments);
                  })
                },
                {
                  key: "checkConnection",
                  value: (d2 = (0, t2.A)(
                    c().mark(function e3() {
                      var t3, r3, n3, s2, i2, a2, o3 = arguments;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return r3 = (t3 = o3.length > 0 && void 0 !== o3[0] ? o3[0] : {}).timeoutDuration, n3 = t3.baseUrl, s2 = void 0 === n3 ? "api.videosdk.live" : n3, r3 && this.isInt(r3) || (r3 = 6e4), i2 = new Promise(function(e5, t4) {
                                  setTimeout(function() {
                                    t4("TimeoutError: NetworkStats timeout");
                                  }, r3);
                                }), a2 = new Promise(function(e5, t4) {
                                  navigator.onLine ? fetch("https://".concat(s2, "/ping")).then(function(r4) {
                                    r4.text().then(function(r5) {
                                      "pong" == r5 ? e5("Connection established") : t4(
                                        "ConnectionError: Server unreachable"
                                      );
                                    });
                                  }).catch(function(e6) {
                                    t4(
                                      "ConnectionError: Server unreachable"
                                    );
                                  }) : t4("NetworkError: Offline");
                                }), e4.abrupt("return", Promise.race([a2, i2]));
                              case 5:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return d2.apply(this, arguments);
                  })
                },
                {
                  key: "analytics",
                  value: function(e3) {
                    var t3, r3, n3;
                    !e3 && navigator && navigator.userAgent && (r3 = navigator.userAgent, delete (n3 = l().parse(r3)).engine);
                    try {
                      var s2;
                      null !== (s2 = e3) && void 0 !== s2 && s2.browserUserAgent || (r3 = navigator.userAgent, delete (n3 = l().parse(r3)).engine);
                    } catch (e4) {
                    }
                    e3 && e3.rawUserAgent && (r3 = e3.rawUserAgent, delete (n3 = l().parse(r3)).engine), e3 || (e3 = {});
                    var i2 = {};
                    i2.sdkType = e3.sdkType || "javascript", i2.sdkVersion = e3.sdkVersion || "0.2.2", i2.platform = e3.platform || (null === (t3 = n3) || void 0 === t3 || null === (t3 = t3.platform) || void 0 === t3 ? void 0 : t3.type) || "", "null" == e3.browserUserAgent ? i2.browserUserAgent = void 0 : i2.browserUserAgent = n3, e3.deviceUserAgent && (i2.deviceUserAgent = e3.deviceUserAgent), this._deviceInfo = i2;
                  }
                },
                {
                  key: "initMeeting",
                  value: function(t3) {
                    var r3, n3 = t3.meetingId, s2 = t3.customCameraVideoTrack, i2 = void 0 === s2 ? void 0 : s2, a2 = t3.customMicrophoneAudioTrack, o3 = void 0 === a2 ? void 0 : a2, c2 = t3.autoConsume, d3 = void 0 === c2 || c2, l2 = t3.preferredProtocol, u3 = t3.mode, p3 = t3.multiStream, h3 = void 0 === p3 || p3, m3 = t3.participantId, f3 = t3.name, g3 = t3.micEnabled, v3 = t3.webcamEnabled, _2 = t3.maxResolution, y2 = t3.metaData, b2 = t3.chatEnabled, w2 = t3.useSpartialLayerAnalytics, S2 = t3.signalingBaseUrl, R2 = t3.defaultCamera, k2 = t3.debugMode, C2 = void 0 === k2 || k2;
                    if (!n3)
                      throw new Error(
                        "'meetingId' is empty, please verify it or generate new meetingId using the API."
                      );
                    var T2 = m3 ? m3.toString() : E()({ length: 8 }).toLowerCase(), P2 = f3 || E()({ length: 6 }).toLowerCase();
                    switch (this._deviceInfo || this.analytics(), "string" != typeof l2 && (l2 = "UDP_OVER_TCP"), null === (r3 = l2) || void 0 === r3 ? void 0 : r3.toUpperCase()) {
                      case "UDP_ONLY":
                      case "UDP_OVER_TCP":
                      case "TCP_ONLY":
                        l2 = l2.toUpperCase();
                        break;
                      default:
                        l2 = "UDP_OVER_TCP";
                    }
                    if (u3 || (u3 = Te.nI.SEND_AND_RECV), u3 !== Te.nI.SEND_AND_RECV && u3 !== Te.nI.SIGNALLING_ONLY && u3 !== Te.nI.RECV_ONLY && u3 !== Te.nI.VIEWER && u3 !== Te.nI.CONFERENCE)
                      throw new Error(
                        '"mode" can only be either '.concat(Te.nI.SEND_AND_RECV, " or ").concat(Te.nI.SIGNALLING_ONLY, " or ").concat(Te.nI.RECV_ONLY, " ")
                      );
                    if (null != y2 && "object" != (0, e2.A)(y2))
                      throw new Error('"metaData" can only be object.');
                    var O2 = "react-native" === this._deviceInfo.sdkType, x2 = O2 ? R2 ? "front" === R2 ? 1 : 0 : i2 ? "user" === i2.getVideoTracks()[0].getConstraints().facingMode ? 1 : 0 : O2 ? 1 : 0 : 0, D2 = new ee.default({
                      roomId: n3,
                      peerId: T2,
                      secret: this.apiKey,
                      device: "unknown",
                      displayName: P2,
                      mode: u3,
                      useSimulcast: h3,
                      produce: true,
                      consume: true,
                      datachannel: false !== b2,
                      micEnabled: false !== g3,
                      webcamEnabled: false !== v3,
                      maxResolution: _2 || "hd",
                      useSpartialLayerAnalytics: w2,
                      _deviceInfo: this._deviceInfo,
                      customCameraVideoTrack: i2,
                      customMicrophoneAudioTrack: o3,
                      autoConsume: d3,
                      preferredProtocol: l2,
                      signalingBaseUrl: S2,
                      metaData: y2,
                      defaultCameraIndex: x2,
                      debugMode: C2,
                      keyProvider: this.keyProvider
                    });
                    ie.roomClient = D2;
                    var I2 = new Se({
                      id: T2,
                      displayName: P2,
                      local: true,
                      mode: u3,
                      metaData: y2
                    });
                    return new rr(n3, I2, D2);
                  }
                },
                {
                  key: "createCameraVideoTrack",
                  value: (o2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, n3, s2, i2, a2, o3, d3, l2, u3, p3, h3, m3, f3, g3, v3, _2;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (r3 = t3.cameraId, n3 = void 0 === r3 ? void 0 : r3, s2 = t3.encoderConfig, i2 = void 0 === s2 ? void 0 : s2, a2 = t3.facingMode, o3 = void 0 === a2 ? void 0 : a2, d3 = t3.optimizationMode, l2 = void 0 === d3 ? void 0 : d3, u3 = t3.multiStream, p3 = void 0 === u3 || u3, !n3) {
                                  e4.next = 6;
                                  break;
                                }
                                return e4.next = 4, this.getCameras();
                              case 4:
                                (h3 = e4.sent) && h3.some(function(e5) {
                                  return e5.deviceId;
                                }) && (h3.some(function(e5) {
                                  return e5.deviceId === n3;
                                }) || console.error(
                                  "No camera device found for the given cameraId, please check the passed cameraId. The default camera will be used instead."
                                ));
                              case 6:
                                return e4.prev = 6, m3 = i2 ? cr.$.videoProfiles[i2] : cr.$.videoProfiles.h360p_w640p, f3 = {
                                  video: {
                                    deviceId: n3 || void 0,
                                    facingMode: o3 || void 0,
                                    width: m3.width,
                                    height: m3.height,
                                    frameRate: m3.frameRate
                                  }
                                }, e4.next = 11, (0, or.lp)(f3);
                              case 11:
                                return g3 = e4.sent, l2 && (g3.contentHint = l2), g3.encoderConfig = i2 || "h360p_w640p", g3.contentHint = l2 || "", g3.multiStream = p3, g3.cameraId = n3, e4.abrupt("return", g3);
                              case 20:
                                if (e4.prev = 20, e4.t0 = e4.catch(6), "SecurityError" !== e4.t0.name) {
                                  e4.next = 26;
                                  break;
                                }
                                v3 = ir.q.ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED.message, e4.next = 46;
                                break;
                              case 26:
                                if ("DOMException" !== e4.t0.name) {
                                  e4.next = 30;
                                  break;
                                }
                                v3 = ir.q.ERROR_RN_CAMERA_NOT_FOUND.message, e4.next = 46;
                                break;
                              case 30:
                                if (!(e4.t0 instanceof DOMException)) {
                                  e4.next = 45;
                                  break;
                                }
                                e4.t1 = e4.t0.name, e4.next = "NotAllowedError" === e4.t1 ? 34 : "NotReadableError" === e4.t1 ? 36 : "NotFoundError" === e4.t1 ? 38 : 41;
                                break;
                              case 34:
                                return v3 = Hi(e4.t0, "video"), e4.abrupt("break", 43);
                              case 36:
                                return v3 = zi(e4.t0, "video"), e4.abrupt("break", 43);
                              case 38:
                                return v3 = ir.q.ERROR_CAMERA_NOT_FOUND.message, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                  "Firefox"
                                ) && (v3 = ir.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 43);
                              case 41:
                                return v3 = e4.t0.message, e4.abrupt("break", 43);
                              case 43:
                                e4.next = 46;
                                break;
                              case 45:
                                "getUserMedia is not implemented in this browser" == e4.t0.message ? (_2 = ir.q.ERROR_CAMERA_ACCESS_UNAVAILABLE, v3 = _2.message) : v3 = e4.t0.message;
                              case 46:
                                console.error(
                                  "An error occurred in creating video track, ".concat(
                                    v3
                                  )
                                );
                              case 47:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this,
                        [[6, 20]]
                      );
                    })
                  ), function(e3) {
                    return o2.apply(this, arguments);
                  })
                },
                {
                  key: "createScreenShareVideoTrack",
                  value: (n2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, n3, s2, i2, a2, o3, d3, l2, u3, p3, h3;
                      return c().wrap(function(e4) {
                        for (; ; )
                          switch (e4.prev = e4.next) {
                            case 0:
                              return r3 = t3.encoderConfig, n3 = void 0 === r3 ? void 0 : r3, s2 = t3.optimizationMode, i2 = void 0 === s2 ? void 0 : s2, a2 = t3.withAudio, o3 = void 0 === a2 ? "enable" : a2, d3 = t3.multiStream, l2 = void 0 !== d3 && d3, u3 = n3 ? cr.$.screenShareProfiles[n3] : cr.$.screenShareProfiles.h720p_15fps, p3 = {
                                audio: "enable" === o3,
                                video: {
                                  width: u3.resolution.width,
                                  height: u3.resolution.height,
                                  frameRate: u3.frameRate
                                }
                              }, e4.next = 5, (0, or.Zu)(p3);
                            case 5:
                              return h3 = e4.sent, i2 && (h3.contentHint = i2), h3.multiStream = l2, e4.abrupt("return", h3);
                            case 9:
                            case "end":
                              return e4.stop();
                          }
                      }, e3);
                    })
                  ), function(e3) {
                    return n2.apply(this, arguments);
                  })
                },
                {
                  key: "createMicrophoneAudioTrack",
                  value: (r2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, n3, s2, i2, a2, o3, d3, l2, u3, p3, h3, m3;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (r3 = t3.noiseConfig, n3 = void 0 === r3 ? void 0 : r3, s2 = t3.encoderConfig, i2 = void 0 === s2 ? void 0 : s2, a2 = t3.microphoneId, !(o3 = void 0 === a2 ? void 0 : a2)) {
                                  e4.next = 6;
                                  break;
                                }
                                return e4.next = 4, this.getMicrophones();
                              case 4:
                                (d3 = e4.sent) && d3.some(function(e5) {
                                  return e5.deviceId;
                                }) && (d3.some(function(e5) {
                                  return e5.deviceId === o3;
                                }) || console.error(
                                  "No microphone device found for the given microphoneId, please check the passed microphoneId. The default microphone will be used instead."
                                ));
                              case 6:
                                return e4.prev = 6, l2 = i2 ? cr.$.audioProfiles[i2] : cr.$.audioProfiles.speech_standard, u3 = {
                                  audio: {
                                    deviceId: o3,
                                    sampleRate: l2.sampleRate,
                                    echoCancellation: n3 ? n3 && n3.acousticEchoCancellation : l2.echoCancellation,
                                    autoGainControl: n3 ? n3 && n3.autoGainControl : l2.autoGainControl,
                                    noiseSuppression: n3 ? n3 && n3.noiseSuppression : l2.noiseSuppression,
                                    channelCount: l2.channelCount
                                  }
                                }, e4.next = 11, (0, or.lp)(u3);
                              case 11:
                                return (p3 = e4.sent).encoderConfig = i2 || "speech_standard", p3.microphoneId = o3, e4.abrupt("return", p3);
                              case 17:
                                if (e4.prev = 17, e4.t0 = e4.catch(6), "SecurityError" !== e4.t0.name) {
                                  e4.next = 23;
                                  break;
                                }
                                h3 = ir.q.ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED.message, e4.next = 43;
                                break;
                              case 23:
                                if ("DOMException" !== e4.t0.name) {
                                  e4.next = 27;
                                  break;
                                }
                                h3 = ir.q.ERROR_RN_MIC_NOT_FOUND.message, e4.next = 43;
                                break;
                              case 27:
                                if (!(e4.t0 instanceof DOMException)) {
                                  e4.next = 42;
                                  break;
                                }
                                e4.t1 = e4.t0.name, e4.next = "NotAllowedError" === e4.t1 ? 31 : "NotReadableError" === e4.t1 ? 33 : "NotFoundError" === e4.t1 ? 35 : 38;
                                break;
                              case 31:
                                return h3 = Hi(e4.t0, "audio"), e4.abrupt("break", 40);
                              case 33:
                                return h3 = zi(e4.t0, "audio"), e4.abrupt("break", 40);
                              case 35:
                                return h3 = ir.q.ERROR_MICROPHONE_NOT_FOUND.message, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                  "Firefox"
                                ) && (h3 = ir.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 40);
                              case 38:
                                return h3 = e4.t0.message, e4.abrupt("break", 40);
                              case 40:
                                e4.next = 43;
                                break;
                              case 42:
                                "getUserMedia is not implemented in this browser" == e4.t0.message ? (m3 = ir.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE, h3 = m3.message) : h3 = e4.t0.message;
                              case 43:
                                console.error(
                                  "An error occurred in creating audio track, ".concat(
                                    h3
                                  )
                                );
                              case 44:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this,
                        [[6, 17]]
                      );
                    })
                  ), function(e3) {
                    return r2.apply(this, arguments);
                  })
                }
              ]
            );
            var r2, n2, o2, d2, u2, p2, h2, m2, f2, g2, v2;
          }();
          function Hi(e3, t3) {
            return ("Permission denied" === e3.message || "Permission dismissed" === e3.message ? "video" === t3 ? ir.q.ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED : ir.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED : e3.message.includes(
              "The request is not allowed by the user agent"
            ) ? "video" === t3 ? ir.q.ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE : ir.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED : "Permission denied by system" === e3.message ? "video" === t3 ? ir.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS : ir.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS : "video" === t3 ? ir.q.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED : ir.q.ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED).message;
          }
          function zi(e3, t3) {
            return ("Device in use" === e3.message ? "video" === t3 ? ir.q.ERROR_CAMERA_IN_USE : ir.q.ERROR_MICROPHONE_IN_USE : "video" === t3 ? ir.q.ERROR_VIDEO_SOURCE_INITIATION_FAILED : ir.q.ERROR_MICROPHONE_IN_USE).message;
          }
          (0, a.A)(Vi, "devices", []), (0, a.A)(Vi, "eventEmitter", new te()), (0, a.A)(Vi, "Constants", {
            errors: ir.s,
            recordingEvents: {
              RECORDING_STARTING: "RECORDING_STARTING",
              RECORDING_STARTED: "RECORDING_STARTED",
              RECORDING_STOPPING: "RECORDING_STOPPING",
              RECORDING_STOPPED: "RECORDING_STOPPED"
            },
            livestreamEvents: {
              LIVESTREAM_STARTING: "LIVESTREAM_STARTING",
              LIVESTREAM_STARTED: "LIVESTREAM_STARTED",
              LIVESTREAM_STOPPING: "LIVESTREAM_STOPPING",
              LIVESTREAM_STOPPED: "LIVESTREAM_STOPPED"
            },
            characterState: Ce,
            characterMode: {
              TEXT: "text",
              CO_PILOT: "co_pilot",
              AUTO_PILOT: "auto_pilot",
              VISION_PILOT: "vision_pilot"
            },
            hlsEvents: ar.V,
            transcriptionEvents: {
              TRANSCRIPTION_STARTING: "TRANSCRIPTION_STARTING",
              TRANSCRIPTION_STARTED: "TRANSCRIPTION_STARTED",
              TRANSCRIPTION_STOPPING: "TRANSCRIPTION_STOPPING",
              TRANSCRIPTION_STOPPED: "TRANSCRIPTION_STOPPED"
            },
            modes: Te.nI,
            permission: fr
          });
          var Gi = Vi;
        })(), n;
      })()
    );
  }
});

// node_modules/@videosdk.live/react-sdk/dist/index.modern.js
var import_react = __toESM(require_react());
var import_events = __toESM(require_events());
var import_js_sdk = __toESM(require_videosdk());
var import_js_sdk2 = __toESM(require_videosdk());
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t) return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? {
        done: true
      } : {
        done: false,
        value: r[o++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
var eventPrifix = "videosdk-live-react-sdk";
var events = {
  "participant-joined": eventPrifix + "-participant-joined",
  "participant-left": eventPrifix + "-participant-left",
  "speaker-changed": eventPrifix + "-speaker-changed",
  "presenter-changed": eventPrifix + "-presenter-changed",
  "main-participant-changed": eventPrifix + "-main-participant-changed",
  "entry-requested": eventPrifix + "-entry-requested",
  "entry-responded": eventPrifix + "-entry-responded",
  "recording-started": eventPrifix + "-recording-started",
  "recording-stopped": eventPrifix + "-recording-stopped",
  "chat-message": eventPrifix + "-chat-message",
  "meeting-joined": eventPrifix + "-meeting-joined",
  "meeting-left": eventPrifix + "-meeting-left",
  "live-stream-started": eventPrifix + "-live-stream-started",
  "live-stream-stopped": eventPrifix + "-live-stream-stopped",
  "video-state-changed": eventPrifix + "-video-state-changed",
  "video-seeked": eventPrifix + "-video-seeked",
  "webcam-requested": eventPrifix + "-webcam-requested",
  "mic-requested": eventPrifix + "-mic-requested",
  "pin-state-changed": eventPrifix + "-pin-state-changed",
  "connection-open": eventPrifix + "-connection-open",
  "connection-close": eventPrifix + "-connection-close",
  "switch-meeting": eventPrifix + "-switch-meeting",
  error: eventPrifix + "-error",
  "hls-started": eventPrifix + "-hls-started",
  "hls-stopped": eventPrifix + "-hls-stopped",
  "hls-state-changed": eventPrifix + "-hls-state-changed",
  "hls-playable-state-changed": eventPrifix + "-hls-playable-state-changed",
  "recording-state-changed": eventPrifix + "-recording-state-changed",
  "livestream-state-changed": eventPrifix + "-livestream-state-changed",
  "meeting-state-changed": eventPrifix + "-meeting-state-changed",
  "participant-mode-changed": eventPrifix + "-participant-mode-changed",
  "transcription-state-changed": eventPrifix + "-transcription-state-changed",
  "transcription-text": eventPrifix + "-transcription-text",
  "character-joined": eventPrifix + "-character-joined",
  "character-left": eventPrifix + "-character-left",
  "whiteboard-started": eventPrifix + "-whiteboard-started",
  "whiteboard-stopped": eventPrifix + "-whiteboard-stopped",
  "paused-all-streams": eventPrifix + "-paused-all-streams",
  "resumed-all-streams": eventPrifix + "-resumed-all-streams"
};
var eventEmitter = new import_events.default();
eventEmitter.setMaxListeners(9999);
function debounce(func, delay) {
  var timeout;
  return function() {
    var _this = this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimeout(timeout);
    timeout = setTimeout(function() {
      return func.apply(_this, args);
    }, delay);
  };
}
var MeetingProviderContex = (0, import_react.createContext)();
var useMeeting = function useMeeting2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onParticipantJoi = _ref.onParticipantJoined, onParticipantJoined = _ref$onParticipantJoi === void 0 ? function() {
  } : _ref$onParticipantJoi, _ref$onParticipantLef = _ref.onParticipantLeft, onParticipantLeft = _ref$onParticipantLef === void 0 ? function() {
  } : _ref$onParticipantLef, _ref$onSpeakerChanged = _ref.onSpeakerChanged, onSpeakerChanged = _ref$onSpeakerChanged === void 0 ? function() {
  } : _ref$onSpeakerChanged, _ref$onPresenterChang = _ref.onPresenterChanged, onPresenterChanged = _ref$onPresenterChang === void 0 ? function() {
  } : _ref$onPresenterChang, _ref$onMainParticipan = _ref.onMainParticipantChanged, onMainParticipantChanged = _ref$onMainParticipan === void 0 ? function() {
  } : _ref$onMainParticipan, _ref$onEntryRequested = _ref.onEntryRequested, onEntryRequested = _ref$onEntryRequested === void 0 ? function() {
  } : _ref$onEntryRequested, _ref$onEntryResponded = _ref.onEntryResponded, onEntryResponded = _ref$onEntryResponded === void 0 ? function() {
  } : _ref$onEntryResponded, _ref$onPausedAllStrea = _ref.onPausedAllStreams, onPausedAllStreams = _ref$onPausedAllStrea === void 0 ? function() {
  } : _ref$onPausedAllStrea, _ref$onResumedAllStre = _ref.onResumedAllStreams, onResumedAllStreams = _ref$onResumedAllStre === void 0 ? function() {
  } : _ref$onResumedAllStre, _ref$onRecordingStart = _ref.onRecordingStarted, onRecordingStarted = _ref$onRecordingStart === void 0 ? function() {
  } : _ref$onRecordingStart, _ref$onRecordingStopp = _ref.onRecordingStopped, onRecordingStopped = _ref$onRecordingStopp === void 0 ? function() {
  } : _ref$onRecordingStopp, _ref$onChatMessage = _ref.onChatMessage, onChatMessage = _ref$onChatMessage === void 0 ? function() {
  } : _ref$onChatMessage, _ref$onMeetingJoined = _ref.onMeetingJoined, onMeetingJoined = _ref$onMeetingJoined === void 0 ? function() {
  } : _ref$onMeetingJoined, _ref$onMeetingLeft = _ref.onMeetingLeft, onMeetingLeft = _ref$onMeetingLeft === void 0 ? function() {
  } : _ref$onMeetingLeft, _ref$onLiveStreamStar = _ref.onLiveStreamStarted, onLiveStreamStarted = _ref$onLiveStreamStar === void 0 ? function() {
  } : _ref$onLiveStreamStar, _ref$onLiveStreamStop = _ref.onLiveStreamStopped, onLiveStreamStopped = _ref$onLiveStreamStop === void 0 ? function() {
  } : _ref$onLiveStreamStop, _ref$onVideoStateChan = _ref.onVideoStateChanged, onVideoStateChanged = _ref$onVideoStateChan === void 0 ? function() {
  } : _ref$onVideoStateChan, _ref$onVideoSeeked = _ref.onVideoSeeked, onVideoSeeked = _ref$onVideoSeeked === void 0 ? function() {
  } : _ref$onVideoSeeked, _ref$onWebcamRequeste = _ref.onWebcamRequested, onWebcamRequested = _ref$onWebcamRequeste === void 0 ? function() {
  } : _ref$onWebcamRequeste, _ref$onMicRequested = _ref.onMicRequested, onMicRequested = _ref$onMicRequested === void 0 ? function() {
  } : _ref$onMicRequested, _ref$onPinStateChange = _ref.onPinStateChanged, onPinStateChanged = _ref$onPinStateChange === void 0 ? function() {
  } : _ref$onPinStateChange, _ref$onConnectionOpen = _ref.onConnectionOpen, onConnectionOpen = _ref$onConnectionOpen === void 0 ? function() {
  } : _ref$onConnectionOpen, _ref$onConnetionClose = _ref.onConnetionClose, onConnetionClose = _ref$onConnetionClose === void 0 ? function() {
  } : _ref$onConnetionClose, _ref$onSwitchMeeting = _ref.onSwitchMeeting, onSwitchMeeting = _ref$onSwitchMeeting === void 0 ? function() {
  } : _ref$onSwitchMeeting, _ref$onError = _ref.onError, onError = _ref$onError === void 0 ? function() {
  } : _ref$onError, _ref$onHlsStarted = _ref.onHlsStarted, onHlsStarted = _ref$onHlsStarted === void 0 ? function() {
  } : _ref$onHlsStarted, _ref$onHlsStopped = _ref.onHlsStopped, onHlsStopped = _ref$onHlsStopped === void 0 ? function() {
  } : _ref$onHlsStopped, _ref$onHlsStateChange = _ref.onHlsStateChanged, onHlsStateChanged = _ref$onHlsStateChange === void 0 ? function() {
  } : _ref$onHlsStateChange, _ref$onRecordingState = _ref.onRecordingStateChanged, onRecordingStateChanged = _ref$onRecordingState === void 0 ? function() {
  } : _ref$onRecordingState, _ref$onLivestreamStat = _ref.onLivestreamStateChanged, onLivestreamStateChanged = _ref$onLivestreamStat === void 0 ? function() {
  } : _ref$onLivestreamStat, _ref$onMeetingStateCh = _ref.onMeetingStateChanged, onMeetingStateChanged = _ref$onMeetingStateCh === void 0 ? function() {
  } : _ref$onMeetingStateCh, _ref$onParticipantMod = _ref.onParticipantModeChanged, onParticipantModeChanged = _ref$onParticipantMod === void 0 ? function() {
  } : _ref$onParticipantMod, _ref$onCharacterJoine = _ref.onCharacterJoined, onCharacterJoined = _ref$onCharacterJoine === void 0 ? function() {
  } : _ref$onCharacterJoine, _ref$onCharacterLeft = _ref.onCharacterLeft, onCharacterLeft = _ref$onCharacterLeft === void 0 ? function() {
  } : _ref$onCharacterLeft;
  (0, import_react.useEffect)(function() {
    eventEmitter.on(events["participant-joined"], onParticipantJoined);
    eventEmitter.on(events["participant-left"], onParticipantLeft);
    eventEmitter.on(events["speaker-changed"], onSpeakerChanged);
    eventEmitter.on(events["presenter-changed"], onPresenterChanged);
    eventEmitter.on(events["main-participant-changed"], onMainParticipantChanged);
    eventEmitter.on(events["entry-requested"], onEntryRequested);
    eventEmitter.on(events["entry-responded"], onEntryResponded);
    eventEmitter.on(events["paused-all-streams"], onPausedAllStreams);
    eventEmitter.on(events["resumed-all-streams"], onResumedAllStreams);
    eventEmitter.on(events["recording-started"], onRecordingStarted);
    eventEmitter.on(events["recording-stopped"], onRecordingStopped);
    eventEmitter.on(events["chat-message"], onChatMessage);
    eventEmitter.on(events["meeting-joined"], onMeetingJoined);
    eventEmitter.on(events["meeting-left"], onMeetingLeft);
    eventEmitter.on(events["live-stream-started"], onLiveStreamStarted);
    eventEmitter.on(events["live-stream-stopped"], onLiveStreamStopped);
    eventEmitter.on(events["video-state-changed"], onVideoStateChanged);
    eventEmitter.on(events["video-seeked"], onVideoSeeked);
    eventEmitter.on(events["webcam-requested"], onWebcamRequested);
    eventEmitter.on(events["mic-requested"], onMicRequested);
    eventEmitter.on(events["pin-state-changed"], onPinStateChanged);
    eventEmitter.on(events["connection-open"], onConnectionOpen);
    eventEmitter.on(events["connection-close"], onConnetionClose);
    eventEmitter.on(events["switch-meeting"], onSwitchMeeting);
    eventEmitter.on(events["error"], onError);
    eventEmitter.on(events["hls-started"], onHlsStarted);
    eventEmitter.on(events["hls-stopped"], onHlsStopped);
    eventEmitter.on(events["hls-state-changed"], onHlsStateChanged);
    eventEmitter.on(events["recording-state-changed"], onRecordingStateChanged);
    eventEmitter.on(events["livestream-state-changed"], onLivestreamStateChanged);
    eventEmitter.on(events["meeting-state-changed"], onMeetingStateChanged);
    eventEmitter.on(events["participant-mode-changed"], onParticipantModeChanged);
    eventEmitter.on(events["character-joined"], onCharacterJoined);
    eventEmitter.on(events["character-left"], onCharacterLeft);
    return function() {
      eventEmitter.off(events["meeting-state-changed"], onMeetingStateChanged);
      eventEmitter.off(events["participant-joined"], onParticipantJoined);
      eventEmitter.off(events["participant-left"], onParticipantLeft);
      eventEmitter.off(events["speaker-changed"], onSpeakerChanged);
      eventEmitter.off(events["presenter-changed"], onPresenterChanged);
      eventEmitter.off(events["main-participant-changed"], onMainParticipantChanged);
      eventEmitter.off(events["entry-requested"], onEntryRequested);
      eventEmitter.off(events["entry-responded"], onEntryResponded);
      eventEmitter.off(events["paused-all-streams"], onPausedAllStreams);
      eventEmitter.off(events["resumed-all-streams"], onResumedAllStreams);
      eventEmitter.off(events["recording-started"], onRecordingStarted);
      eventEmitter.off(events["recording-stopped"], onRecordingStopped);
      eventEmitter.off(events["chat-message"], onChatMessage);
      eventEmitter.off(events["meeting-joined"], onMeetingJoined);
      eventEmitter.off(events["meeting-left"], onMeetingLeft);
      eventEmitter.off(events["live-stream-started"], onLiveStreamStarted);
      eventEmitter.off(events["live-stream-stopped"], onLiveStreamStopped);
      eventEmitter.off(events["video-state-changed"], onVideoStateChanged);
      eventEmitter.off(events["video-seeked"], onVideoSeeked);
      eventEmitter.off(events["webcam-requested"], onWebcamRequested);
      eventEmitter.off(events["mic-requested"], onMicRequested);
      eventEmitter.off(events["pin-state-changed"], onPinStateChanged);
      eventEmitter.off(events["connection-open"], onConnectionOpen);
      eventEmitter.off(events["connection-close"], onConnetionClose);
      eventEmitter.off(events["switch-meeting"], onSwitchMeeting);
      eventEmitter.off(events["error"], onError);
      eventEmitter.off(events["hls-started"], onHlsStarted);
      eventEmitter.off(events["hls-stopped"], onHlsStopped);
      eventEmitter.off(events["hls-state-changed"], onHlsStateChanged);
      eventEmitter.off(events["recording-state-changed"], onRecordingStateChanged);
      eventEmitter.off(events["livestream-state-changed"], onLivestreamStateChanged);
      eventEmitter.off(events["participant-mode-changed"], onParticipantModeChanged);
      eventEmitter.off(events["character-joined"], onCharacterJoined);
      eventEmitter.off(events["character-left"], onCharacterLeft);
    };
  }, []);
  return (0, import_react.useContext)(MeetingProviderContex);
};
var MeetingConsumer = function MeetingConsumer2(_ref2) {
  var children = _ref2.children, _ref2$onParticipantJo = _ref2.onParticipantJoined, onParticipantJoined = _ref2$onParticipantJo === void 0 ? function() {
  } : _ref2$onParticipantJo, _ref2$onParticipantLe = _ref2.onParticipantLeft, onParticipantLeft = _ref2$onParticipantLe === void 0 ? function() {
  } : _ref2$onParticipantLe, _ref2$onSpeakerChange = _ref2.onSpeakerChanged, onSpeakerChanged = _ref2$onSpeakerChange === void 0 ? function() {
  } : _ref2$onSpeakerChange, _ref2$onPresenterChan = _ref2.onPresenterChanged, onPresenterChanged = _ref2$onPresenterChan === void 0 ? function() {
  } : _ref2$onPresenterChan, _ref2$onMainParticipa = _ref2.onMainParticipantChanged, onMainParticipantChanged = _ref2$onMainParticipa === void 0 ? function() {
  } : _ref2$onMainParticipa, _ref2$onEntryRequeste = _ref2.onEntryRequested, onEntryRequested = _ref2$onEntryRequeste === void 0 ? function() {
  } : _ref2$onEntryRequeste, _ref2$onEntryResponde = _ref2.onEntryResponded, onEntryResponded = _ref2$onEntryResponde === void 0 ? function() {
  } : _ref2$onEntryResponde, _ref2$onPausedAllStre = _ref2.onPausedAllStreams, onPausedAllStreams = _ref2$onPausedAllStre === void 0 ? function() {
  } : _ref2$onPausedAllStre, _ref2$onResumedAllStr = _ref2.onResumedAllStreams, onResumedAllStreams = _ref2$onResumedAllStr === void 0 ? function() {
  } : _ref2$onResumedAllStr, _ref2$onRecordingStar = _ref2.onRecordingStarted, onRecordingStarted = _ref2$onRecordingStar === void 0 ? function() {
  } : _ref2$onRecordingStar, _ref2$onRecordingStop = _ref2.onRecordingStopped, onRecordingStopped = _ref2$onRecordingStop === void 0 ? function() {
  } : _ref2$onRecordingStop, _ref2$onChatMessage = _ref2.onChatMessage, onChatMessage = _ref2$onChatMessage === void 0 ? function() {
  } : _ref2$onChatMessage, _ref2$onMeetingJoined = _ref2.onMeetingJoined, onMeetingJoined = _ref2$onMeetingJoined === void 0 ? function() {
  } : _ref2$onMeetingJoined, _ref2$onMeetingLeft = _ref2.onMeetingLeft, onMeetingLeft = _ref2$onMeetingLeft === void 0 ? function() {
  } : _ref2$onMeetingLeft, _ref2$onLiveStreamSta = _ref2.onLiveStreamStarted, onLiveStreamStarted = _ref2$onLiveStreamSta === void 0 ? function() {
  } : _ref2$onLiveStreamSta, _ref2$onLiveStreamSto = _ref2.onLiveStreamStopped, onLiveStreamStopped = _ref2$onLiveStreamSto === void 0 ? function() {
  } : _ref2$onLiveStreamSto, _ref2$onVideoStateCha = _ref2.onVideoStateChanged, onVideoStateChanged = _ref2$onVideoStateCha === void 0 ? function() {
  } : _ref2$onVideoStateCha, _ref2$onVideoSeeked = _ref2.onVideoSeeked, onVideoSeeked = _ref2$onVideoSeeked === void 0 ? function() {
  } : _ref2$onVideoSeeked, _ref2$onWebcamRequest = _ref2.onWebcamRequested, onWebcamRequested = _ref2$onWebcamRequest === void 0 ? function() {
  } : _ref2$onWebcamRequest, _ref2$onMicRequested = _ref2.onMicRequested, onMicRequested = _ref2$onMicRequested === void 0 ? function() {
  } : _ref2$onMicRequested, _ref2$onPinStateChang = _ref2.onPinStateChanged, onPinStateChanged = _ref2$onPinStateChang === void 0 ? function() {
  } : _ref2$onPinStateChang, _ref2$onConnectionOpe = _ref2.onConnectionOpen, onConnectionOpen = _ref2$onConnectionOpe === void 0 ? function() {
  } : _ref2$onConnectionOpe, _ref2$onConnetionClos = _ref2.onConnetionClose, onConnetionClose = _ref2$onConnetionClos === void 0 ? function() {
  } : _ref2$onConnetionClos, _ref2$onSwitchMeeting = _ref2.onSwitchMeeting, onSwitchMeeting = _ref2$onSwitchMeeting === void 0 ? function() {
  } : _ref2$onSwitchMeeting, _ref2$onError = _ref2.onError, onError = _ref2$onError === void 0 ? function() {
  } : _ref2$onError, _ref2$onHlsStarted = _ref2.onHlsStarted, onHlsStarted = _ref2$onHlsStarted === void 0 ? function() {
  } : _ref2$onHlsStarted, _ref2$onHlsStopped = _ref2.onHlsStopped, onHlsStopped = _ref2$onHlsStopped === void 0 ? function() {
  } : _ref2$onHlsStopped, _ref2$onHlsStateChang = _ref2.onHlsStateChanged, onHlsStateChanged = _ref2$onHlsStateChang === void 0 ? function() {
  } : _ref2$onHlsStateChang, _ref2$onRecordingStat = _ref2.onRecordingStateChanged, onRecordingStateChanged = _ref2$onRecordingStat === void 0 ? function() {
  } : _ref2$onRecordingStat, _ref2$onLivestreamSta = _ref2.onLivestreamStateChanged, onLivestreamStateChanged = _ref2$onLivestreamSta === void 0 ? function() {
  } : _ref2$onLivestreamSta, _ref2$onMeetingStateC = _ref2.onMeetingStateChanged, onMeetingStateChanged = _ref2$onMeetingStateC === void 0 ? function() {
  } : _ref2$onMeetingStateC, _ref2$onParticipantMo = _ref2.onParticipantModeChanged, onParticipantModeChanged = _ref2$onParticipantMo === void 0 ? function() {
  } : _ref2$onParticipantMo, _ref2$onCharacterJoin = _ref2.onCharacterJoined, onCharacterJoined = _ref2$onCharacterJoin === void 0 ? function() {
  } : _ref2$onCharacterJoin, _ref2$onCharacterLeft = _ref2.onCharacterLeft, onCharacterLeft = _ref2$onCharacterLeft === void 0 ? function() {
  } : _ref2$onCharacterLeft;
  (0, import_react.useEffect)(function() {
    eventEmitter.on(events["meeting-state-changed"], onMeetingStateChanged);
    eventEmitter.on(events["participant-joined"], onParticipantJoined);
    eventEmitter.on(events["participant-left"], onParticipantLeft);
    eventEmitter.on(events["speaker-changed"], onSpeakerChanged);
    eventEmitter.on(events["presenter-changed"], onPresenterChanged);
    eventEmitter.on(events["main-participant-changed"], onMainParticipantChanged);
    eventEmitter.on(events["entry-requested"], onEntryRequested);
    eventEmitter.on(events["entry-responded"], onEntryResponded);
    eventEmitter.on(events["paused-all-streams"], onPausedAllStreams);
    eventEmitter.on(events["resumed-all-streams"], onResumedAllStreams);
    eventEmitter.on(events["recording-started"], onRecordingStarted);
    eventEmitter.on(events["recording-stopped"], onRecordingStopped);
    eventEmitter.on(events["chat-message"], onChatMessage);
    eventEmitter.on(events["meeting-joined"], onMeetingJoined);
    eventEmitter.on(events["meeting-left"], onMeetingLeft);
    eventEmitter.on(events["live-stream-enabled"], onLiveStreamStarted);
    eventEmitter.on(events["live-stream-disabled"], onLiveStreamStopped);
    eventEmitter.on(events["video-state-changed"], onVideoStateChanged);
    eventEmitter.on(events["video-seeked"], onVideoSeeked);
    eventEmitter.on(events["webcam-requested"], onWebcamRequested);
    eventEmitter.on(events["mic-requested"], onMicRequested);
    eventEmitter.on(events["pin-state-changed"], onPinStateChanged);
    eventEmitter.on(events["connection-open"], onConnectionOpen);
    eventEmitter.on(events["connection-close"], onConnetionClose);
    eventEmitter.on(events["switch-meeting"], onSwitchMeeting);
    eventEmitter.on(events["error"], onError);
    eventEmitter.on(events["hls-started"], onHlsStarted);
    eventEmitter.on(events["hls-stopped"], onHlsStopped);
    eventEmitter.on(events["hls-state-changed"], onHlsStateChanged);
    eventEmitter.on(events["recording-state-changed"], onRecordingStateChanged);
    eventEmitter.on(events["livestream-state-changed"], onLivestreamStateChanged);
    eventEmitter.on(events["participant-mode-changed"], onParticipantModeChanged);
    eventEmitter.on(events["character-joined"], onCharacterJoined);
    eventEmitter.on(events["character-left"], onCharacterLeft);
    return function() {
      eventEmitter.off(events["meeting-state-changed"], onMeetingStateChanged);
      eventEmitter.off(events["participant-joined"], onParticipantJoined);
      eventEmitter.off(events["participant-left"], onParticipantLeft);
      eventEmitter.off(events["speaker-changed"], onSpeakerChanged);
      eventEmitter.off(events["presenter-changed"], onPresenterChanged);
      eventEmitter.off(events["main-participant-changed"], onMainParticipantChanged);
      eventEmitter.off(events["entry-requested"], onEntryRequested);
      eventEmitter.off(events["entry-responded"], onEntryResponded);
      eventEmitter.off(events["paused-all-streams"], onPausedAllStreams);
      eventEmitter.off(events["resumed-all-streams"], onResumedAllStreams);
      eventEmitter.off(events["recording-started"], onRecordingStarted);
      eventEmitter.off(events["recording-stopped"], onRecordingStopped);
      eventEmitter.off(events["chat-message"], onChatMessage);
      eventEmitter.off(events["meeting-joined"], onMeetingJoined);
      eventEmitter.off(events["meeting-left"], onMeetingLeft);
      eventEmitter.off(events["live-stream-enabled"], onLiveStreamStarted);
      eventEmitter.off(events["live-stream-disabled"], onLiveStreamStopped);
      eventEmitter.off(events["video-state-changed"], onVideoStateChanged);
      eventEmitter.off(events["video-seeked"], onVideoSeeked);
      eventEmitter.off(events["webcam-requested"], onWebcamRequested);
      eventEmitter.off(events["mic-requested"], onMicRequested);
      eventEmitter.off(events["pin-state-changed"], onPinStateChanged);
      eventEmitter.off(events["connection-open"], onConnectionOpen);
      eventEmitter.off(events["connection-close"], onConnetionClose);
      eventEmitter.off(events["switch-meeting"], onSwitchMeeting);
      eventEmitter.off(events["error"], onError);
      eventEmitter.off(events["hls-started"], onHlsStarted);
      eventEmitter.off(events["hls-stopped"], onHlsStopped);
      eventEmitter.off(events["hls-state-changed"], onHlsStateChanged);
      eventEmitter.off(events["recording-state-changed"], onRecordingStateChanged);
      eventEmitter.off(events["livestream-state-changed"], onLivestreamStateChanged);
      eventEmitter.off(events["participant-mode-changed"], onParticipantModeChanged);
      eventEmitter.off(events["character-joined"], onCharacterJoined);
      eventEmitter.off(events["character-left"], onCharacterLeft);
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(MeetingProviderContex.Consumer, null, children));
};
var version = "0.3.3";
var MeetingProvider = function MeetingProvider2(_ref) {
  var children = _ref.children, config = _ref.config, token = _ref.token, joinWithoutUserInteraction = _ref.joinWithoutUserInteraction, _reinitialiseMeetingOnConfigChange = _ref.reinitialiseMeetingOnConfigChange, deviceInfo = _ref.deviceInfo, keyProvider = _ref.keyProvider;
  var _useState = (0, import_react.useState)(null), meeting = _useState[0], setMeeting = _useState[1];
  var _useState2 = (0, import_react.useState)(null), localParticipant = _useState2[0], setLocalParticipant = _useState2[1];
  var _useState3 = (0, import_react.useState)(null), mainParticipant = _useState3[0], setMainParticipant = _useState3[1];
  var _useState4 = (0, import_react.useState)(null), activeSpeakerId = _useState4[0], setActiveSpeakerId = _useState4[1];
  var _useState5 = (0, import_react.useState)(null), presenterId = _useState5[0], setPresenterId = _useState5[1];
  var _useState6 = (0, import_react.useState)(false), localMicOn = _useState6[0], setLocalMicOn = _useState6[1];
  var _useState7 = (0, import_react.useState)(false), localWebcamOn = _useState7[0], setLocalWebcamOn = _useState7[1];
  var _useState8 = (0, import_react.useState)(false), localScreenShareOn = _useState8[0], setLocalScreenShareOn = _useState8[1];
  var _useState9 = (0, import_react.useState)(false), isRecording = _useState9[0], setIsRecording = _useState9[1];
  var _useState0 = (0, import_react.useState)([]), messages = _useState0[0], setMessages = _useState0[1];
  var _useState1 = (0, import_react.useState)(/* @__PURE__ */ new Map()), participants = _useState1[0], setParticipants = _useState1[1];
  var _useState10 = (0, import_react.useState)(/* @__PURE__ */ new Map()), characters = _useState10[0], setCharacters = _useState10[1];
  var _useState11 = (0, import_react.useState)(/* @__PURE__ */ new Map()), pinnedParticipants = _useState11[0], setPinnedParticipants = _useState11[1];
  var _useState12 = (0, import_react.useState)(false), isLiveStreaming = _useState12[0], setIsLiveStreaming = _useState12[1];
  var _useState13 = (0, import_react.useState)(/* @__PURE__ */ new Map()), connections = _useState13[0], setConnections = _useState13[1];
  var _useState14 = (0, import_react.useState)(false), isMeetingJoined = _useState14[0], setIsMeetingJoined = _useState14[1];
  var _useState15 = (0, import_react.useState)(false), isHls = _useState15[0], setIsHls = _useState15[1];
  var _useState16 = (0, import_react.useState)("RECORDING_STOPPED"), recordingState = _useState16[0], setRecordingState = _useState16[1];
  var _useState17 = (0, import_react.useState)("LIVESTREAM_STOPPED"), livestreamState = _useState17[0], setLivestreamState = _useState17[1];
  var _useState18 = (0, import_react.useState)("HLS_STOPPED"), hlsState = _useState18[0], setHlsState = _useState18[1];
  var _useState19 = (0, import_react.useState)({
    downstreamUrl: null,
    playbackHlsUrl: null,
    livestreamUrl: null
  }), hlsUrls = _useState19[0], setHlsUrls = _useState19[1];
  var _useState20 = (0, import_react.useState)("TRANSCRIPTION_STOPPED"), transcriptionState = _useState20[0], setTranscriptionState = _useState20[1];
  var meetingRef = (0, import_react.useRef)();
  var localMicOnRef = (0, import_react.useRef)();
  var localWebcamOnRef = (0, import_react.useRef)();
  var localScreenShareOnRef = (0, import_react.useRef)();
  var isRecordingRef = (0, import_react.useRef)();
  var keyProviderRef = (0, import_react.useRef)(keyProvider);
  var configRef = (0, import_react.useRef)(config);
  var tokenRef = (0, import_react.useRef)(token);
  var joinedOnFirstRender = (0, import_react.useRef)(false);
  var isHlsRef = (0, import_react.useRef)();
  var reinitialiseMeetingOnConfigChange = (0, import_react.useMemo)(function() {
    return _reinitialiseMeetingOnConfigChange;
  }, []);
  (0, import_react.useEffect)(function() {
    meetingRef.current = meeting;
  }, [meeting]);
  (0, import_react.useEffect)(function() {
    localMicOnRef.current = localMicOn;
  }, [localMicOn]);
  (0, import_react.useEffect)(function() {
    localWebcamOnRef.current = localWebcamOn;
  }, [localWebcamOn]);
  (0, import_react.useEffect)(function() {
    localScreenShareOnRef.current = localScreenShareOn;
  }, [localScreenShareOn]);
  (0, import_react.useEffect)(function() {
    isRecordingRef.current = isRecording;
  }, [isRecording]);
  (0, import_react.useEffect)(function() {
    configRef.current = config;
  }, [config]);
  (0, import_react.useEffect)(function() {
    tokenRef.current = token;
  }, [token]);
  (0, import_react.useEffect)(function() {
    isHlsRef.current = isHls;
  }, [isHls]);
  var resetStates = function resetStates2() {
    setMeeting(null);
    setLocalParticipant(null);
    setMainParticipant(null);
    setActiveSpeakerId(null);
    setPresenterId(null);
    setLocalMicOn(false);
    setLocalWebcamOn(false);
    setLocalScreenShareOn(false);
    setIsRecording(false);
    setMessages([]);
    setIsLiveStreaming(false);
    setParticipants(/* @__PURE__ */ new Map());
    setCharacters(/* @__PURE__ */ new Map());
    setPinnedParticipants(/* @__PURE__ */ new Map());
    setConnections(/* @__PURE__ */ new Map());
    setIsMeetingJoined(false);
    setIsHls(false);
    setRecordingState("RECORDING_STOPPED");
    setLivestreamState("LIVESTREAM_STOPPED");
    setHlsState("HLS_STOPPED");
    setTranscriptionState("TRANSCRIPTION_STOPPED");
    setHlsUrls({
      downstreamUrl: null,
      playbackHlsUrl: null,
      livestreamUrl: null
    });
  };
  var _handle_participant_joined = function _handle_participant_joined2(participant) {
    setParticipants(function(participants2) {
      participants2.set(participant.id, participant);
      var participantsToSet = new Map(participants2);
      return participantsToSet;
    });
    eventEmitter.emit(events["participant-joined"], participant);
  };
  var _handle_participant_left = function _handle_participant_left2(participant) {
    setParticipants(function(participants2) {
      participants2["delete"](participant.id);
      var newParticipants = new Map(participants2);
      return newParticipants;
    });
    eventEmitter.emit(events["participant-left"], participant);
  };
  var _handle_presenter_changed = function _handle_presenter_changed2(presenterId2) {
    var _meetingRef$current, _meetingRef$current$l;
    setPresenterId(presenterId2);
    setLocalScreenShareOn(presenterId2 === (meetingRef === null || meetingRef === void 0 ? void 0 : (_meetingRef$current = meetingRef.current) === null || _meetingRef$current === void 0 ? void 0 : (_meetingRef$current$l = _meetingRef$current.localParticipant) === null || _meetingRef$current$l === void 0 ? void 0 : _meetingRef$current$l.id));
    eventEmitter.emit(events["presenter-changed"], presenterId2);
  };
  var _handle_main_participant_changed = function _handle_main_participant_changed2(participant) {
    setMainParticipant(participant);
    eventEmitter.emit(events["main-participant-changed"], participant);
  };
  var _handle_speaker_changed = function _handle_speaker_changed2(activeSpeakerId2) {
    setActiveSpeakerId(activeSpeakerId2);
    eventEmitter.emit(events["speaker-changed"], activeSpeakerId2);
  };
  var _handle_chat_message = function _handle_chat_message2(data) {
    setMessages(function(s) {
      return [].concat(s, [data]);
    });
    eventEmitter.emit(events["chat-message"], data);
  };
  var _handle_entry_requested = function _handle_entry_requested2(data) {
    eventEmitter.emit(events["entry-requested"], data);
  };
  var _handle_entry_responded = function _handle_entry_responded2(participantId, decision) {
    eventEmitter.emit(events["entry-responded"], participantId, decision);
  };
  var _handle_recording_started = function _handle_recording_started2() {
    setIsRecording(true);
    eventEmitter.emit(events["recording-started"]);
  };
  var _handle_recording_stopped = function _handle_recording_stopped2() {
    setIsRecording(false);
    eventEmitter.emit(events["recording-stopped"]);
  };
  var _handle_localParticipant_stream_enabled = function _handle_localParticipant_stream_enabled2(stream) {
    if (stream.track.readyState === "live") {
      if (stream.kind === "video") {
        setLocalWebcamOn(true);
      } else if (stream.kind === "audio") {
        setLocalMicOn(true);
      }
    }
  };
  var _handle_localParticipant_stream_disabled = function _handle_localParticipant_stream_disabled2(stream) {
    if (stream.kind === "video") {
      setLocalWebcamOn(false);
    } else if (stream.kind === "audio") {
      setLocalMicOn(false);
    }
  };
  var _handle_live_stream_started = function _handle_live_stream_started2(data) {
    setIsLiveStreaming(true);
    eventEmitter.emit(events["live-stream-started"], data);
  };
  var _handle_live_stream_stopped = function _handle_live_stream_stopped2() {
    setIsLiveStreaming(false);
    eventEmitter.emit(events["live-stream-stopped"]);
  };
  var _handle_hls_started = function _handle_hls_started2(data) {
    setIsHls(true);
    eventEmitter.emit(events["hls-started"], data);
  };
  var _handle_hls_stopped = function _handle_hls_stopped2() {
    setIsHls(false);
    eventEmitter.emit(events["hls-stopped"]);
  };
  var _handle_video_state_changed = function _handle_video_state_changed2(data) {
    eventEmitter.emit(events["video-state-changed"], data);
  };
  var _handle_video_seeked = function _handle_video_seeked2(data) {
    eventEmitter.emit(events["video-seeked"], data);
  };
  var _handle_webcam_requested = function _handle_webcam_requested2(data) {
    eventEmitter.emit(events["webcam-requested"], data);
  };
  var _handle_mic_requested = function _handle_mic_requested2(data) {
    eventEmitter.emit(events["mic-requested"], data);
  };
  var _handle_meeting_joined = function _handle_meeting_joined2(data) {
    if (data.switchRoomId) {
      setMessages(function(s) {
        return [].concat(s, data.messages);
      });
      eventEmitter.emit(events["meeting-joined"], data);
    } else {
      joinedOnFirstRender.current = true;
      setMessages(function(s) {
        return [].concat(s, data.messages);
      });
      eventEmitter.emit(events["meeting-joined"], data);
      setIsMeetingJoined(true);
    }
  };
  var _handle_meeting_left2 = function _handle_meeting_left() {
    eventEmitter.emit(events["meeting-left"]);
    var meeting2 = meetingRef.current;
    if (meeting2) {
      var _meeting$localPartici;
      if (typeof (meeting2 === null || meeting2 === void 0 ? void 0 : meeting2.off) === "function") {
        meeting2.off("meeting-state-changed", _handle_meeting_state_changed);
        meeting2.off("participant-joined", _handle_participant_joined);
        meeting2.off("participant-left", _handle_participant_left);
        meeting2.off("presenter-changed", _handle_presenter_changed);
        meeting2.off("main-participant-changed", _handle_main_participant_changed);
        meeting2.off("speaker-changed", _handle_speaker_changed);
        meeting2.off("entry-requested", _handle_entry_requested);
        meeting2.off("entry-responded", _handle_entry_responded);
        meeting2.off("chat-message", _handle_chat_message);
        meeting2.off("recording-started", _handle_recording_started);
        meeting2.off("recording-stopped", _handle_recording_stopped);
        meeting2.off("meeting-joined", _handle_meeting_joined);
        meeting2.off("meeting-left", _handle_meeting_left2);
        meeting2.off("livestream-started", _handle_live_stream_started);
        meeting2.off("livestream-stopped", _handle_live_stream_stopped);
        meeting2.off("video-state-changed", _handle_video_state_changed);
        meeting2.off("video-seeked", _handle_video_seeked);
        meeting2.off("webcam-requested", _handle_webcam_requested);
        meeting2.off("mic-requested", _handle_mic_requested);
        meeting2.off("pin-state-changed", _handle_pin_state_changed);
        meeting2.off("paused-all-streams", _handle_streams_paused);
        meeting2.off("resumed-all-streams", _handle_streams_resumed);
        meeting2.off("connection-open", _handle_connection_open);
        meeting2.off("connection-close", _handle_connection_close);
        meeting2.off("switch-meeting", _handle_switch_meeting);
        meeting2.off("error", _handle_error);
        meeting2.off("hls-started", _handle_hls_started);
        meeting2.off("hls-stopped", _handle_hls_stopped);
        meeting2.off("recording-state-changed", _handle_recording_state_changed);
        meeting2.off("livestream-state-changed", _handle_livestream_state_changed);
        meeting2.off("hls-state-changed", _handle_hls_state_changed);
        meeting2.off("participant-mode-changed", _handel_participant_mode_changed);
        meeting2.off("whiteboard-stopped", _handle_whiteboard_stopped);
        meeting2.off("whiteboard-started", _handle_whiteboard_started);
        meeting2.off("transcription-state-changed", _handle_transcription_state_changed);
        meeting2.off("character-joined", _handle_character_joined);
        meeting2.off("character-left", _handle_character_left);
      }
      if (typeof (meeting2 === null || meeting2 === void 0 ? void 0 : (_meeting$localPartici = meeting2.localParticipant) === null || _meeting$localPartici === void 0 ? void 0 : _meeting$localPartici.off) === "function") {
        meeting2.localParticipant.off("stream-enabled", _handle_localParticipant_stream_enabled);
        meeting2.localParticipant.off("stream-disabled", _handle_localParticipant_stream_disabled);
      }
      resetStates();
    }
  };
  var _handle_pin_state_changed = function _handle_pin_state_changed2(_ref2) {
    var participantId = _ref2.participantId, state = _ref2.state, pinnedBy = _ref2.pinnedBy;
    setPinnedParticipants(function(pinnedParticipants2) {
      if (!state.cam && !state.share) {
        pinnedParticipants2["delete"](participantId);
      } else {
        pinnedParticipants2.set(participantId, state);
      }
      var pinnedParticipantsToSet = new Map(pinnedParticipants2);
      return pinnedParticipantsToSet;
    });
    eventEmitter.emit(events["pin-state-changed"], {
      participantId,
      state,
      pinnedBy
    });
  };
  var _handle_streams_paused = function _handle_streams_paused2(_ref3) {
    var kind = _ref3.kind;
    eventEmitter.emit(events["paused-all-streams"], {
      kind
    });
  };
  var _handle_streams_resumed = function _handle_streams_resumed2(_ref4) {
    var kind = _ref4.kind;
    eventEmitter.emit(events["resumed-all-streams"], {
      kind
    });
  };
  var _handle_connection_open = function _handle_connection_open2(connection) {
    setConnections(function(s) {
      s.set(connection.id, connection);
      var connectionsToSet = new Map(s);
      return connectionsToSet;
    });
    eventEmitter.emit(events["connection-open"], connection);
  };
  var _handle_connection_close = function _handle_connection_close2(connectionId) {
    setConnections(function(s) {
      s["delete"](connectionId);
      var newConnections = new Map(s);
      return newConnections;
    });
    eventEmitter.emit(events["connection-close"], connectionId);
  };
  var _handle_switch_meeting = function _handle_switch_meeting2(d) {
    eventEmitter.emit(events["switch-meeting"], d);
  };
  var _handle_error = function _handle_error2(data) {
    eventEmitter.emit(events["error"], data);
  };
  var _handle_recording_state_changed = function _handle_recording_state_changed2(data) {
    setRecordingState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events["recording-state-changed"], data);
  };
  var _handle_livestream_state_changed = function _handle_livestream_state_changed2(data) {
    setLivestreamState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events["livestream-state-changed"], data);
  };
  var _handle_hls_state_changed = function _handle_hls_state_changed2(data) {
    setHlsState(data === null || data === void 0 ? void 0 : data.status);
    if ((data === null || data === void 0 ? void 0 : data.status) == "HLS_PLAYABLE") {
      setHlsUrls({
        downstreamUrl: data === null || data === void 0 ? void 0 : data.downstreamUrl,
        playbackHlsUrl: data === null || data === void 0 ? void 0 : data.playbackHlsUrl,
        livestreamUrl: data === null || data === void 0 ? void 0 : data.livestreamUrl
      });
    } else if ((data === null || data === void 0 ? void 0 : data.status) == "HLS_STOPPED") {
      setHlsUrls({
        downstreamUrl: null,
        playbackHlsUrl: null,
        livestreamUrl: null
      });
    }
    eventEmitter.emit(events["hls-state-changed"], data);
  };
  var _handle_meeting_state_changed = function _handle_meeting_state_changed2(data) {
    eventEmitter.emit(events["meeting-state-changed"], data);
  };
  var _handle_transcription_state_changed = function _handle_transcription_state_changed2(data) {
    setTranscriptionState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events["transcription-state-changed"], data);
  };
  var _handle_transcription_text = function _handle_transcription_text2(data) {
    eventEmitter.emit(events["transcription-text"], data);
  };
  var _handle_whiteboard_started = function _handle_whiteboard_started2(data) {
    eventEmitter.emit(events["whiteboard-started"], data);
  };
  var _handle_whiteboard_stopped = function _handle_whiteboard_stopped2(data) {
    eventEmitter.emit(events["whiteboard-stopped"], data);
  };
  var _handle_character_joined = function _handle_character_joined2(character) {
    setCharacters(function(characters2) {
      characters2.set(character.id, character);
      var charactersToSet = new Map(characters2);
      return charactersToSet;
    });
    eventEmitter.emit(events["character-joined"], character);
  };
  var _handle_character_left = function _handle_character_left2(character) {
    setCharacters(function(characters2) {
      characters2["delete"](character.id);
      var newCharacters = new Map(characters2);
      return newCharacters;
    });
    eventEmitter.emit(events["character-left"], character);
  };
  var _handel_participant_mode_changed = function _handel_participant_mode_changed2(data) {
    var _meetingRef$current2, _meetingRef$current2$;
    setParticipants(function(participants2) {
      var part = participants2.get(data.participantId);
      part.mode = data.mode;
      participants2.set(part.id, part);
      var participantsToSet = new Map(participants2);
      return participantsToSet;
    });
    if (data.participantId === (meetingRef === null || meetingRef === void 0 ? void 0 : (_meetingRef$current2 = meetingRef.current) === null || _meetingRef$current2 === void 0 ? void 0 : (_meetingRef$current2$ = _meetingRef$current2.localParticipant) === null || _meetingRef$current2$ === void 0 ? void 0 : _meetingRef$current2$.id)) {
      setLocalParticipant(function(participant) {
        participant.mode = data.mode;
        return participant;
      });
    }
    eventEmitter.emit(events["participant-mode-changed"], data);
  };
  var join = function join2() {
    var meeting2 = import_js_sdk.VideoSDK && import_js_sdk.VideoSDK.initMeeting(configRef.current);
    setMeeting(meeting2);
    var localParticipant2 = meeting2.localParticipant, participants2 = meeting2.participants, characters2 = meeting2.characters;
    participants2.set(localParticipant2.id, localParticipant2);
    setParticipants(participants2);
    setCharacters(characters2);
    setLocalParticipant(localParticipant2);
    meeting2.on("meeting-state-changed", _handle_meeting_state_changed);
    meeting2.on("participant-joined", _handle_participant_joined);
    meeting2.on("participant-left", _handle_participant_left);
    meeting2.on("presenter-changed", _handle_presenter_changed);
    meeting2.on("main-participant-changed", _handle_main_participant_changed);
    meeting2.on("speaker-changed", _handle_speaker_changed);
    meeting2.on("entry-requested", _handle_entry_requested);
    meeting2.on("entry-responded", _handle_entry_responded);
    meeting2.on("chat-message", _handle_chat_message);
    meeting2.on("recording-started", _handle_recording_started);
    meeting2.on("recording-stopped", _handle_recording_stopped);
    meeting2.on("meeting-joined", _handle_meeting_joined);
    meeting2.on("meeting-left", _handle_meeting_left2);
    meeting2.on("livestream-started", _handle_live_stream_started);
    meeting2.on("livestream-stopped", _handle_live_stream_stopped);
    meeting2.on("video-state-changed", _handle_video_state_changed);
    meeting2.on("video-seeked", _handle_video_seeked);
    meeting2.on("webcam-requested", _handle_webcam_requested);
    meeting2.on("mic-requested", _handle_mic_requested);
    meeting2.on("pin-state-changed", _handle_pin_state_changed);
    meeting2.on("paused-all-streams", _handle_streams_paused);
    meeting2.on("resumed-all-streams", _handle_streams_resumed);
    meeting2.on("connection-open", _handle_connection_open);
    meeting2.on("connection-close", _handle_connection_close);
    meeting2.on("switch-meeting", _handle_switch_meeting);
    meeting2.on("error", _handle_error);
    meeting2.on("hls-started", _handle_hls_started);
    meeting2.on("hls-stopped", _handle_hls_stopped);
    meeting2.on("recording-state-changed", _handle_recording_state_changed);
    meeting2.on("livestream-state-changed", _handle_livestream_state_changed);
    meeting2.on("hls-state-changed", _handle_hls_state_changed);
    meeting2.on("participant-mode-changed", _handel_participant_mode_changed);
    meeting2.on("transcription-state-changed", _handle_transcription_state_changed);
    meeting2.on("transcription-text", _handle_transcription_text);
    meeting2.on("whiteboard-started", _handle_whiteboard_started);
    meeting2.on("whiteboard-stopped", _handle_whiteboard_stopped);
    meeting2.on("character-joined", _handle_character_joined);
    meeting2.on("character-left", _handle_character_left);
    meeting2.localParticipant.on("stream-enabled", _handle_localParticipant_stream_enabled);
    meeting2.localParticipant.on("stream-disabled", _handle_localParticipant_stream_disabled);
    meeting2.join();
  };
  var leave = function leave2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.leave();
    }
  };
  var end = function end2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.end();
    }
  };
  var pauseAllStreams = function pauseAllStreams2(kind) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.pauseAllStreams(kind);
    }
  };
  var resumeAllStreams = function resumeAllStreams2(kind) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.resumeAllStreams(kind);
    }
  };
  var startRecording = function startRecording2(webhookUrl, awsDirPath, config2, transcription) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startRecording(webhookUrl, awsDirPath, config2, transcription);
    }
  };
  var stopRecording = function stopRecording2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      var _isRecording = isRecordingRef.current;
      if (_isRecording) {
        meeting2.stopRecording();
      }
    }
  };
  var unmuteMic = function unmuteMic2(customAudioTrack) {
    if (customAudioTrack === void 0) {
      customAudioTrack = void 0;
    }
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.unmuteMic(customAudioTrack);
    }
  };
  var muteMic = function muteMic2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.muteMic();
    }
  };
  var toggleMic = function toggleMic2(customAudioTrack) {
    if (customAudioTrack === void 0) {
      customAudioTrack = void 0;
    }
    var localMicOn2 = localMicOnRef.current;
    if (localMicOn2) {
      muteMic();
    } else {
      unmuteMic(customAudioTrack);
    }
  };
  var disableWebcam = function disableWebcam2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.disableWebcam();
    }
  };
  var enableWebcam = function enableWebcam2(customVideoTrack) {
    if (customVideoTrack === void 0) {
      customVideoTrack = void 0;
    }
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.enableWebcam(customVideoTrack);
    }
  };
  var toggleWebcam = function toggleWebcam2(customVideoTrack) {
    if (customVideoTrack === void 0) {
      customVideoTrack = void 0;
    }
    var localWebcamOn2 = localWebcamOnRef.current;
    if (localWebcamOn2) {
      disableWebcam();
    } else {
      enableWebcam(customVideoTrack);
    }
  };
  var switchTo = function switchTo2(_ref5) {
    var meetingId = _ref5.meetingId, token2 = _ref5.token;
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.switchTo({
        meetingId,
        token: token2
      });
    }
  };
  var disableScreenShare = function disableScreenShare2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.disableScreenShare();
    }
  };
  var enableScreenShare = function enableScreenShare2(customScreenShareTrack) {
    if (customScreenShareTrack === void 0) {
      customScreenShareTrack = void 0;
    }
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.enableScreenShare(customScreenShareTrack);
    }
  };
  var toggleScreenShare = function toggleScreenShare2(customScreenShareTrack) {
    if (customScreenShareTrack === void 0) {
      customScreenShareTrack = void 0;
    }
    var localScreenShareOn2 = localScreenShareOnRef.current;
    if (localScreenShareOn2) {
      disableScreenShare();
    } else {
      enableScreenShare(customScreenShareTrack);
    }
  };
  var changeMode = function changeMode2(mode) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.changeMode(mode);
    }
  };
  var sendChatMessage = function sendChatMessage2(text) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.sendChatMessage(text);
    }
  };
  var respondEntry = function respondEntry2(participantId, decision) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.respondEntry(participantId, decision);
    }
  };
  var getMics = function getMics2() {
    try {
      var _meeting = meetingRef.current;
      return Promise.resolve(function() {
        if (_meeting) {
          return Promise.resolve(_meeting.getMics());
        }
      }());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getWebcams = function getWebcams2() {
    try {
      var _meeting2 = meetingRef.current;
      return Promise.resolve(function() {
        if (_meeting2) {
          return Promise.resolve(_meeting2.getWebcams());
        }
      }());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var changeWebcam = function changeWebcam2(obj) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.changeWebcam(obj);
    }
  };
  var replaceWebcamStream = function replaceWebcamStream2(stream) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.replaceWebcamStream(stream);
    }
  };
  var changeMic = function changeMic2(obj) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.changeMic(obj);
    }
  };
  var startVideo = function startVideo2(_ref6) {
    var link = _ref6.link;
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startVideo({
        link
      });
    }
  };
  var stopVideo = function stopVideo2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.stopVideo();
    }
  };
  var resumeVideo = function resumeVideo2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.resumeVideo();
    }
  };
  var pauseVideo = function pauseVideo2(_ref7) {
    var currentTime = _ref7.currentTime;
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.pauseVideo({
        currentTime
      });
    }
  };
  var enableAdaptiveSubscription = function enableAdaptiveSubscription2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.enableAdaptiveSubscription();
    }
  };
  var disableAdaptiveSubscription = function disableAdaptiveSubscription2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.disableAdaptiveSubscription();
    }
  };
  var seekVideo = function seekVideo2(_ref8) {
    var currentTime = _ref8.currentTime;
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.seekVideo({
        currentTime
      });
    }
  };
  var startLivestream = function startLivestream2(streamInfo, config2) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startLivestream(streamInfo, config2);
    }
  };
  var stopLivestream = function stopLivestream2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.stopLivestream();
    }
  };
  var connectTo = function connectTo2(_ref9) {
    var meetingId = _ref9.meetingId, payload = _ref9.payload;
    try {
      var _meeting3 = meetingRef.current;
      var _temp = function() {
        if (_meeting3) {
          return Promise.resolve(_meeting3.connectTo({
            meetingId,
            payload
          })).then(function() {
          });
        }
      }();
      return Promise.resolve(_temp && _temp.then ? _temp.then(function() {
      }) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var startHls = function startHls2(config2, transcription) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startHls(config2, transcription);
    }
  };
  var stopHls = function stopHls2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.stopHls();
    }
  };
  var initSDK = function initSDK2() {
    import_js_sdk.VideoSDK.config(tokenRef.current);
    keyProviderRef.current && import_js_sdk.VideoSDK.setKeyProvider(keyProviderRef.current);
    if (deviceInfo) {
      import_js_sdk.VideoSDK.analytics(deviceInfo);
    } else {
      import_js_sdk.VideoSDK.analytics({
        sdkType: "react-web",
        sdkVersion: version
      });
    }
    if (joinWithoutUserInteraction) {
      join();
    }
  };
  (0, import_react.useEffect)(function() {
    initSDK();
  }, []);
  (0, import_react.useEffect)(function() {
    if (reinitialiseMeetingOnConfigChange && joinedOnFirstRender.current) {
      leave();
      initSDK();
      !joinWithoutUserInteraction && join();
    }
  }, [config.meetingId, token, reinitialiseMeetingOnConfigChange]);
  return import_react.default.createElement(MeetingProviderContex.Provider, {
    value: {
      meetingId: meeting === null || meeting === void 0 ? void 0 : meeting.id,
      meeting,
      baseUrl: meeting === null || meeting === void 0 ? void 0 : meeting.baseUrl,
      localParticipant,
      mainParticipant,
      activeSpeakerId,
      participants,
      characters,
      presenterId,
      localMicOn,
      localWebcamOn,
      localScreenShareOn,
      messages,
      isRecording,
      isLiveStreaming,
      pinnedParticipants,
      connections,
      isHls,
      recordingState,
      livestreamState,
      hlsState,
      hlsUrls,
      transcriptionState,
      isMeetingJoined,
      selectedCameraDevice: meeting === null || meeting === void 0 ? void 0 : meeting.selectedCameraDevice,
      selectedMicrophoneDevice: meeting === null || meeting === void 0 ? void 0 : meeting.selectedMicrophoneDevice,
      join,
      leave,
      end,
      pauseAllStreams,
      resumeAllStreams,
      startRecording,
      stopRecording,
      sendChatMessage,
      respondEntry,
      muteMic,
      unmuteMic,
      toggleMic,
      disableWebcam,
      enableWebcam,
      toggleWebcam,
      disableScreenShare,
      enableScreenShare,
      toggleScreenShare,
      switchTo,
      getMics,
      getWebcams,
      changeWebcam,
      replaceWebcamStream,
      changeMic,
      changeMode,
      startVideo,
      stopVideo,
      resumeVideo,
      pauseVideo,
      seekVideo,
      startLivestream,
      stopLivestream,
      connectTo,
      startHls,
      stopHls,
      enableAdaptiveSubscription,
      disableAdaptiveSubscription
    }
  }, children);
};
var useParticipant = function useParticipant2(participantId, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onStreamEnabled = _ref.onStreamEnabled, onStreamEnabled = _ref$onStreamEnabled === void 0 ? function() {
  } : _ref$onStreamEnabled, _ref$onStreamDisabled = _ref.onStreamDisabled, onStreamDisabled = _ref$onStreamDisabled === void 0 ? function() {
  } : _ref$onStreamDisabled, _ref$onMediaStatusCha = _ref.onMediaStatusChanged, onMediaStatusChanged = _ref$onMediaStatusCha === void 0 ? function() {
  } : _ref$onMediaStatusCha, _ref$onVideoQualityCh = _ref.onVideoQualityChanged, onVideoQualityChanged = _ref$onVideoQualityCh === void 0 ? function() {
  } : _ref$onVideoQualityCh, _ref$onStreamPaused = _ref.onStreamPaused, onStreamPaused = _ref$onStreamPaused === void 0 ? function() {
  } : _ref$onStreamPaused, _ref$onStreamResumed = _ref.onStreamResumed, onStreamResumed = _ref$onStreamResumed === void 0 ? function() {
  } : _ref$onStreamResumed, _ref$onProducerAdded = _ref.onProducerAdded, onProducerAdded = _ref$onProducerAdded === void 0 ? function() {
  } : _ref$onProducerAdded, _ref$onProducerRemove = _ref.onProducerRemoved, onProducerRemoved = _ref$onProducerRemove === void 0 ? function() {
  } : _ref$onProducerRemove, _ref$onConsumerAdded = _ref.onConsumerAdded, onConsumerAdded = _ref$onConsumerAdded === void 0 ? function() {
  } : _ref$onConsumerAdded, _ref$onConsumerRemove = _ref.onConsumerRemoved, onConsumerRemoved = _ref$onConsumerRemove === void 0 ? function() {
  } : _ref$onConsumerRemove;
  var _useState = (0, import_react.useState)(null), webcamStream = _useState[0], setwebcamStream = _useState[1];
  var _useState2 = (0, import_react.useState)(null), micStream = _useState2[0], setMicStream = _useState2[1];
  var _useState3 = (0, import_react.useState)(null), screenShareStream = _useState3[0], setScreenShareStream = _useState3[1];
  var _useState4 = (0, import_react.useState)(null), screenShareAudioStream = _useState4[0], setScreenShareAudioStream = _useState4[1];
  var meeting = useMeeting();
  var _useMemo = (0, import_react.useMemo)(function() {
    var _meeting$pinnedPartic;
    var participants2 = meeting === null || meeting === void 0 ? void 0 : meeting.participants;
    var localParticipant2 = meeting === null || meeting === void 0 ? void 0 : meeting.localParticipant;
    var activeSpeakerId2 = meeting === null || meeting === void 0 ? void 0 : meeting.activeSpeakerId;
    var mainParticipant2 = meeting === null || meeting === void 0 ? void 0 : meeting.mainParticipant;
    var pinState2 = (meeting === null || meeting === void 0 ? void 0 : (_meeting$pinnedPartic = meeting.pinnedParticipants) === null || _meeting$pinnedPartic === void 0 ? void 0 : _meeting$pinnedPartic.get(participantId)) || {
      cam: false,
      share: false
    };
    return {
      participants: participants2,
      localParticipant: localParticipant2,
      activeSpeakerId: activeSpeakerId2,
      mainParticipant: mainParticipant2,
      pinState: pinState2
    };
  }, [meeting]), participants = _useMemo.participants, localParticipant = _useMemo.localParticipant, activeSpeakerId = _useMemo.activeSpeakerId, mainParticipant = _useMemo.mainParticipant, pinState = _useMemo.pinState;
  var participant = participants === null || participants === void 0 ? void 0 : participants.get(participantId);
  var _useState5 = (0, import_react.useState)(participant === null || participant === void 0 ? void 0 : participant.webcamOn), webcamOn = _useState5[0], setWebcamOn = _useState5[1];
  var _useState6 = (0, import_react.useState)(participant === null || participant === void 0 ? void 0 : participant.micOn), micOn = _useState6[0], setMicOn = _useState6[1];
  var _useState7 = (0, import_react.useState)(participant === null || participant === void 0 ? void 0 : participant.mode), mode = _useState7[0], setMode = _useState7[1];
  var setTrack = function setTrack2(stream) {
    if (stream.track.readyState === "live") {
      switch (stream.kind) {
        case "video":
          if (webcamStream != null) {
            setwebcamStream(null);
          }
          setwebcamStream(stream);
          break;
        case "audio":
          if (micStream != null) {
            setMicStream(null);
          }
          setMicStream(stream);
          break;
        case "share":
          if (screenShareStream != null) {
            setScreenShareStream(null);
          }
          setScreenShareStream(stream);
          break;
        case "shareAudio":
          if (screenShareAudioStream != null) {
            setScreenShareAudioStream(null);
          }
          setScreenShareAudioStream(stream);
          break;
      }
    }
  };
  var unSetTrack = function unSetTrack2(stream) {
    switch (stream.kind) {
      case "video":
        setwebcamStream(null);
        break;
      case "audio":
        setMicStream(null);
        break;
      case "share":
        setScreenShareStream(null);
        break;
      case "shareAudio":
        setScreenShareAudioStream(null);
        break;
    }
  };
  var _handleStreamEnabled = function _handleStreamEnabled2(stream) {
    setTrack(stream);
    onStreamEnabled(stream);
  };
  var _handleParticipantModeChanged = function _handleParticipantModeChanged2(data) {
    if (participantId === data.participantId) {
      setMode(data.mode);
    }
  };
  var _handleStreamDisabled = function _handleStreamDisabled2(stream) {
    unSetTrack(stream);
    onStreamDisabled(stream);
  };
  var _handleVideoQualityChanged = function _handleVideoQualityChanged2(data) {
    var peerId = data.peerId, prevQuality = data.prevQuality, currentQuality = data.currentQuality;
    onVideoQualityChanged({
      peerId,
      prevQuality,
      currentQuality
    });
  };
  var _handleMediaStatusChanged = function _handleMediaStatusChanged2(data) {
    var kind = data.kind, peerId = data.peerId, newStatus = data.newStatus;
    if (kind == "audio") {
      setMicOn(newStatus);
    } else if (kind == "video") {
      setWebcamOn(newStatus);
    }
    onMediaStatusChanged({
      kind,
      peerId,
      newStatus
    });
  };
  var setQuality = function setQuality2(quality) {
    participant === null || participant === void 0 ? void 0 : participant.setQuality(quality);
  };
  var setViewPort = function setViewPort2(width, height) {
    participant === null || participant === void 0 ? void 0 : participant.setViewPort(width, height);
  };
  var setScreenShareQuality = function setScreenShareQuality2(quality) {
    participant === null || participant === void 0 ? void 0 : participant.setScreenShareQuality(quality);
  };
  var enableMic = function enableMic2() {
    participant === null || participant === void 0 ? void 0 : participant.enableMic();
  };
  var disableMic = function disableMic2() {
    participant === null || participant === void 0 ? void 0 : participant.disableMic();
  };
  var enableWebcam = function enableWebcam2() {
    participant === null || participant === void 0 ? void 0 : participant.enableWebcam();
  };
  var disableWebcam = function disableWebcam2() {
    participant === null || participant === void 0 ? void 0 : participant.disableWebcam();
  };
  var pin = function pin2(data) {
    participant === null || participant === void 0 ? void 0 : participant.pin(data);
  };
  var unpin = function unpin2(data) {
    participant === null || participant === void 0 ? void 0 : participant.unpin(data);
  };
  var remove = function remove2() {
    participant === null || participant === void 0 ? void 0 : participant.remove();
  };
  var captureImage = function captureImage2(_temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2, height = _ref2.height, width = _ref2.width;
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.captureImage({
      height,
      width
    }));
  };
  var getAudioStats = function getAudioStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getAudioStats());
  };
  var getVideoStats = function getVideoStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getVideoStats());
  };
  var getShareStats = function getShareStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getShareStats());
  };
  var getShareAudioStats = function getShareAudioStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getShareAudioStats());
  };
  var consumeWebcamStreams = function consumeWebcamStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.consumeWebcamStreams();
  };
  var consumeMicStreams = function consumeMicStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.consumeMicStreams();
  };
  var stopConsumingWebcamStreams = function stopConsumingWebcamStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.stopConsumingWebcamStreams();
  };
  var stopConsumingMicStreams = function stopConsumingMicStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.stopConsumingMicStreams();
  };
  var switchTo = function switchTo2(data) {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.switchTo(data)).then(function() {
    });
  };
  (0, import_react.useEffect)(function() {
    var streams = participant === null || participant === void 0 ? void 0 : participant.streams;
    if (streams) {
      streams.forEach(function(stream) {
        setTrack(stream);
      });
    }
    if (participant !== null && participant !== void 0 && participant.micOn) {
      setMicOn(micOn);
    }
    if (participant !== null && participant !== void 0 && participant.webcamOn) {
      setWebcamOn(webcamOn);
    }
    participant === null || participant === void 0 ? void 0 : participant.on("stream-enabled", _handleStreamEnabled);
    participant === null || participant === void 0 ? void 0 : participant.on("stream-disabled", _handleStreamDisabled);
    participant === null || participant === void 0 ? void 0 : participant.on("stream-paused", function(data) {
      onStreamPaused(data);
    });
    participant === null || participant === void 0 ? void 0 : participant.on("stream-resumed", function(data) {
      onStreamResumed(data);
    });
    participant === null || participant === void 0 ? void 0 : participant.on("media-status-changed", _handleMediaStatusChanged);
    participant === null || participant === void 0 ? void 0 : participant.on("video-quality-changed", _handleVideoQualityChanged);
    participant === null || participant === void 0 ? void 0 : participant.on("producer-added", function(data) {
      onProducerAdded(data);
    });
    participant === null || participant === void 0 ? void 0 : participant.on("producer-removed", function(data) {
      onProducerRemoved(data);
    });
    participant === null || participant === void 0 ? void 0 : participant.on("consumer-added", function(data) {
      onConsumerAdded(data);
    });
    participant === null || participant === void 0 ? void 0 : participant.on("consumer-removed", function(data) {
      onConsumerRemoved(data);
    });
    eventEmitter.on(events["participant-mode-changed"], _handleParticipantModeChanged);
    return function() {
      participant === null || participant === void 0 ? void 0 : participant.off("stream-enabled", _handleStreamEnabled);
      participant === null || participant === void 0 ? void 0 : participant.off("stream-disabled", _handleStreamDisabled);
      participant === null || participant === void 0 ? void 0 : participant.off("media-status-changed", _handleMediaStatusChanged);
      participant === null || participant === void 0 ? void 0 : participant.off("video-quality-changed", _handleVideoQualityChanged);
      eventEmitter.off(events["participant-mode-changed"], _handleParticipantModeChanged);
    };
  }, [participant]);
  return {
    displayName: participant === null || participant === void 0 ? void 0 : participant.displayName,
    participant,
    webcamStream,
    micStream,
    screenShareStream,
    screenShareAudioStream,
    webcamOn: webcamOn || !!webcamStream,
    micOn: micOn || !!micStream,
    mode,
    metaData: participant === null || participant === void 0 ? void 0 : participant.metaData,
    screenShareOn: !!screenShareStream,
    isLocal: (localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.id) === participantId,
    isActiveSpeaker: activeSpeakerId === participantId,
    isMainParticipant: (mainParticipant === null || mainParticipant === void 0 ? void 0 : mainParticipant.id) === participantId,
    pinState,
    consumeMicStreams,
    consumeWebcamStreams,
    stopConsumingMicStreams,
    stopConsumingWebcamStreams,
    setQuality,
    setScreenShareQuality,
    setViewPort,
    enableMic,
    disableMic,
    enableWebcam,
    disableWebcam,
    captureImage,
    pin,
    unpin,
    remove,
    switchTo,
    getAudioStats,
    getVideoStats,
    getShareStats,
    getShareAudioStats
  };
};
var useConnection = function useConnection2(connectionId, _temp) {
  var _ref = _temp === void 0 ? {
    onMeeting: {
      onParticipantJoined: function onParticipantJoined2() {
      },
      onParticipantLeft: function onParticipantLeft2() {
      },
      onChatMessage: function onChatMessage2() {
      }
    }
  } : _temp, onMeeting = _ref.onMeeting;
  var onParticipantJoined = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onParticipantJoined;
  var onParticipantLeft = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onParticipantLeft;
  var onChatMessage = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onChatMessage;
  var meeting = useMeeting();
  var _useMemo = (0, import_react.useMemo)(function() {
    var connection2 = meeting === null || meeting === void 0 ? void 0 : meeting.connections.get(connectionId);
    if (!connection2) {
      throw new Error("connectionId not found");
    }
    var connectionParticipants2 = new Map(connection2.meeting.participants);
    return {
      connection: connection2,
      connectionParticipants: connectionParticipants2
    };
  }, [meeting]), connection = _useMemo.connection, connectionParticipants = _useMemo.connectionParticipants;
  var _useState = (0, import_react.useState)(new Map(connectionParticipants)), _connectionParticipants = _useState[0], setConnectionParticipants = _useState[1];
  var _handleParticipantJoined = function _handleParticipantJoined2(participant) {
    setConnectionParticipants(function(s) {
      s.set(participant.id, participant);
      var participantsToSet = new Map(s);
      return participantsToSet;
    });
    onParticipantJoined(participant);
  };
  var _handleParticipantLeft = function _handleParticipantLeft2(participantId) {
    setConnectionParticipants(function(s) {
      s["delete"](participantId);
      var newParticipants = new Map(s);
      return newParticipants;
    });
    onParticipantLeft(participantId);
  };
  var _handleChatMessage = function _handleChatMessage2(data) {
    onChatMessage(data);
  };
  (0, import_react.useEffect)(function() {
    connection === null || connection === void 0 ? void 0 : connection.meeting.on("participant-joined", _handleParticipantJoined);
    connection === null || connection === void 0 ? void 0 : connection.meeting.on("participant-left", _handleParticipantLeft);
    connection === null || connection === void 0 ? void 0 : connection.meeting.on("chat-message", _handleChatMessage);
    return function() {
      connection === null || connection === void 0 ? void 0 : connection.meeting.off("participant-joined", _handleParticipantJoined);
      connection === null || connection === void 0 ? void 0 : connection.meeting.off("participant-left", _handleParticipantLeft);
      connection === null || connection === void 0 ? void 0 : connection.meeting.off("chat-message", _handleChatMessage);
    };
  }, [connection]);
  return {
    connection: {
      id: connection.id,
      close: connection.close,
      payload: connection.payload,
      meeting: {
        id: connection.meeting.id,
        sendChatMessage: connection.meeting.sendChatMessage,
        end: connection.meeting.end,
        participants: _connectionParticipants
      }
    }
  };
};
var usePubSub = function usePubSub2(topic, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onMessageReceive = _ref.onMessageReceived, onMessageReceived = _ref$onMessageReceive === void 0 ? function() {
  } : _ref$onMessageReceive, _ref$onOldMessagesRec = _ref.onOldMessagesReceived, onOldMessagesReceived = _ref$onOldMessagesRec === void 0 ? function() {
  } : _ref$onOldMessagesRec;
  var _useMeeting = useMeeting(), meeting = _useMeeting.meeting, isMeetingJoined = _useMeeting.isMeetingJoined;
  var _useState = (0, import_react.useState)([]), messages = _useState[0], setMessages = _useState[1];
  var isSubscribed = (0, import_react.useRef)(false);
  var publish = function publish2(message, options, payload) {
    if (meeting) {
      meeting.pubSub.publish(topic, message, options, payload);
    }
  };
  var _handlePubSub = function _handlePubSub2(data) {
    setMessages(function(s) {
      return [].concat(s, [data]);
    });
    onMessageReceived(data);
  };
  var subscribeToPubsub = function subscribeToPubsub2(meeting2) {
    try {
      var _meeting$pubSub;
      return Promise.resolve(meeting2 === null || meeting2 === void 0 ? void 0 : (_meeting$pubSub = meeting2.pubSub) === null || _meeting$pubSub === void 0 ? void 0 : _meeting$pubSub.subscribe(topic, _handlePubSub)).then(function(data) {
        if (data) {
          onOldMessagesReceived(data.messages);
          setMessages(data.messages);
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };
  (0, import_react.useEffect)(function() {
    if (meeting && !isSubscribed.current && isMeetingJoined) {
      isSubscribed.current = true;
      subscribeToPubsub(meeting);
      return function() {
        var _meeting$pubSub2;
        meeting === null || meeting === void 0 ? void 0 : (_meeting$pubSub2 = meeting.pubSub) === null || _meeting$pubSub2 === void 0 ? void 0 : _meeting$pubSub2.unsubscribe(topic, _handlePubSub);
      };
    }
  }, [meeting, isMeetingJoined]);
  return {
    publish,
    messages
  };
};
var useFile = function useFile2() {
  var mMeeting = useMeeting();
  var uploadBase64File = function uploadBase64File2(_ref) {
    var base64Data = _ref.base64Data, token = _ref.token, fileName = _ref.fileName;
    try {
      return Promise.resolve(mMeeting.meeting.uploadBase64File({
        base64Data,
        token,
        fileName
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var fetchBase64File = function fetchBase64File2(_ref2) {
    var url = _ref2.url, token = _ref2.token;
    try {
      return Promise.resolve(mMeeting.meeting.fetchBase64File({
        url,
        token
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return {
    uploadBase64File,
    fetchBase64File
  };
};
var useMediaDevice = function useMediaDevice2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onDeviceChanged = _ref.onDeviceChanged, onDeviceChanged = _ref$onDeviceChanged === void 0 ? function() {
  } : _ref$onDeviceChanged;
  var getDevices = function getDevices2() {
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.getDevices());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getCameras = function getCameras2() {
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.getCameras());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getMicrophones = function getMicrophones2() {
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.getMicrophones());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getPlaybackDevices = function getPlaybackDevices2() {
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.getPlaybackDevices());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var checkPermissions = function checkPermissions2(permissions) {
    if (permissions === void 0) {
      permissions = void 0;
    }
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.checkPermissions(permissions));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var requestPermission = function requestPermission2(permissions) {
    if (permissions === void 0) {
      permissions = void 0;
    }
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.requestPermission(permissions));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  (0, import_react.useEffect)(function() {
    import_js_sdk.VideoSDK.on("device-changed", onDeviceChanged);
    return function() {
      import_js_sdk.VideoSDK.off("device-changed", onDeviceChanged);
    };
  }, []);
  return {
    getDevices,
    getCameras,
    getMicrophones,
    getPlaybackDevices,
    requestPermission,
    checkPermissions
  };
};
var useTranscription = function useTranscription2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onTranscriptionS = _ref.onTranscriptionStateChanged, onTranscriptionStateChanged = _ref$onTranscriptionS === void 0 ? function() {
  } : _ref$onTranscriptionS, _ref$onTranscriptionT = _ref.onTranscriptionText, onTranscriptionText = _ref$onTranscriptionT === void 0 ? function() {
  } : _ref$onTranscriptionT;
  var mMeeting = useMeeting();
  (0, import_react.useEffect)(function() {
    eventEmitter.on(events["transcription-state-changed"], onTranscriptionStateChanged);
    eventEmitter.on(events["transcription-text"], onTranscriptionText);
    return function() {
      eventEmitter.off(events["transcription-state-changed"], onTranscriptionStateChanged);
      eventEmitter.off(events["transcription-text"], onTranscriptionText);
    };
  }, []);
  var startTranscription = function startTranscription2(config) {
    try {
      return Promise.resolve(mMeeting.meeting.startTranscription(config));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var stopTranscription = function stopTranscription2() {
    try {
      return Promise.resolve(mMeeting.meeting.stopTranscription());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return {
    startTranscription,
    stopTranscription
  };
};
var useCharacter = function useCharacter2(_ref, _temp) {
  var interactionId = _ref.interactionId, id = _ref.id, characterMode = _ref.characterMode, displayName = _ref.displayName, characterRole = _ref.characterRole, knowledgeBases = _ref.knowledgeBases, language = _ref.language, metaData = _ref.metaData;
  var _ref2 = _temp === void 0 ? {} : _temp, _ref2$onCharacterStat = _ref2.onCharacterStateChanged, onCharacterStateChanged = _ref2$onCharacterStat === void 0 ? function() {
  } : _ref2$onCharacterStat, _ref2$onCharacterMess = _ref2.onCharacterMessage, onCharacterMessage = _ref2$onCharacterMess === void 0 ? function() {
  } : _ref2$onCharacterMess, _ref2$onUserMessage = _ref2.onUserMessage, onUserMessage = _ref2$onUserMessage === void 0 ? function() {
  } : _ref2$onUserMessage, _ref2$onData = _ref2.onData, onData = _ref2$onData === void 0 ? function() {
  } : _ref2$onData, _ref2$onCharacterJoin = _ref2.onCharacterJoined, onCharacterJoined = _ref2$onCharacterJoin === void 0 ? function() {
  } : _ref2$onCharacterJoin, _ref2$onCharacterLeft = _ref2.onCharacterLeft, onCharacterLeft = _ref2$onCharacterLeft === void 0 ? function() {
  } : _ref2$onCharacterLeft, _ref2$onStreamEnabled = _ref2.onStreamEnabled, onStreamEnabled = _ref2$onStreamEnabled === void 0 ? function() {
  } : _ref2$onStreamEnabled, _ref2$onStreamDisable = _ref2.onStreamDisabled, onStreamDisabled = _ref2$onStreamDisable === void 0 ? function() {
  } : _ref2$onStreamDisable, _ref2$onMediaStatusCh = _ref2.onMediaStatusChanged, onMediaStatusChanged = _ref2$onMediaStatusCh === void 0 ? function() {
  } : _ref2$onMediaStatusCh, _ref2$onVideoQualityC = _ref2.onVideoQualityChanged, onVideoQualityChanged = _ref2$onVideoQualityC === void 0 ? function() {
  } : _ref2$onVideoQualityC;
  var _useState = (0, import_react.useState)(null), webcamStream = _useState[0], setwebcamStream = _useState[1];
  var _useState2 = (0, import_react.useState)(null), micStream = _useState2[0], setMicStream = _useState2[1];
  var mMeeting = useMeeting();
  var _useMemo = (0, import_react.useMemo)(function() {
    var chars = Array.from(mMeeting.characters.values());
    var activeSpeakerId2 = mMeeting === null || mMeeting === void 0 ? void 0 : mMeeting.activeSpeakerId;
    return {
      character: chars.find(function(chars2) {
        return chars2.interactionId == interactionId;
      }) || mMeeting.characters.get(id) || mMeeting.meeting.createCharacter({
        interactionId,
        displayName,
        id,
        characterRole,
        characterMode,
        knowledgeBases,
        language,
        metaData
      }),
      activeSpeakerId: activeSpeakerId2
    };
  }, [mMeeting.characters, interactionId, id, characterMode, displayName, characterRole, knowledgeBases, language, metaData]), character = _useMemo.character, activeSpeakerId = _useMemo.activeSpeakerId;
  var _useState3 = (0, import_react.useState)(character === null || character === void 0 ? void 0 : character.webcamOn), webcamOn = _useState3[0], setWebcamOn = _useState3[1];
  var _useState4 = (0, import_react.useState)(character === null || character === void 0 ? void 0 : character.micOn), micOn = _useState4[0], setMicOn = _useState4[1];
  var _useState5 = (0, import_react.useState)(null), characterState = _useState5[0], setCharacterState = _useState5[1];
  var setTrack = function setTrack2(stream) {
    if (stream.track.readyState === "live") {
      switch (stream.kind) {
        case "video":
          if (webcamStream != null) {
            setwebcamStream(null);
          }
          setwebcamStream(stream);
          break;
        case "audio":
          if (micStream != null) {
            setMicStream(null);
          }
          setMicStream(stream);
          break;
      }
    }
  };
  var unSetTrack = function unSetTrack2(stream) {
    switch (stream.kind) {
      case "video":
        setwebcamStream(null);
        break;
      case "audio":
        setMicStream(null);
        break;
    }
  };
  var _handleCharacterStateChanged = function _handleCharacterStateChanged2(d) {
    var status = d.status;
    setCharacterState(status);
    onCharacterStateChanged(d);
  };
  var _handleCharacterMessage = function _handleCharacterMessage2(d) {
    onCharacterMessage(d);
  };
  var _handleUserMessage = function _handleUserMessage2(d) {
    onUserMessage(d);
  };
  var _handleOnData = function _handleOnData2(topic, d) {
    onData(topic, d);
  };
  var _handleCharacterJoined = function _handleCharacterJoined2() {
    onCharacterJoined();
  };
  var _handleCharacterLeft = function _handleCharacterLeft2() {
    onCharacterLeft();
  };
  var _handleStreamEnabled = function _handleStreamEnabled2(stream) {
    setTrack(stream);
    onStreamEnabled(stream);
  };
  var _handleStreamDisabled = function _handleStreamDisabled2(stream) {
    unSetTrack(stream);
    onStreamDisabled(stream);
  };
  var _handleVideoQualityChanged = function _handleVideoQualityChanged2(data) {
    var peerId = data.peerId, prevQuality = data.prevQuality, currentQuality = data.currentQuality;
    onVideoQualityChanged({
      peerId,
      prevQuality,
      currentQuality
    });
  };
  var _handleMediaStatusChanged = function _handleMediaStatusChanged2(data) {
    var kind = data.kind, peerId = data.peerId, newStatus = data.newStatus;
    if (kind == "audio") {
      setMicOn(newStatus);
    } else if (kind == "video") {
      setWebcamOn(newStatus);
    }
    onMediaStatusChanged({
      kind,
      peerId,
      newStatus
    });
  };
  var enableMic = function enableMic2() {
    character === null || character === void 0 ? void 0 : character.enableMic();
  };
  var disableMic = function disableMic2() {
    character === null || character === void 0 ? void 0 : character.disableMic();
  };
  var enableWebcam = function enableWebcam2() {
    character === null || character === void 0 ? void 0 : character.enableWebcam();
  };
  var disableWebcam = function disableWebcam2() {
    character === null || character === void 0 ? void 0 : character.disableWebcam();
  };
  var join = function join2() {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.join()).then(function() {
    });
  };
  var sendMessage = function sendMessage2(d) {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.sendMessage(d)).then(function() {
    });
  };
  var interrupt = function interrupt2() {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.interrupt()).then(function() {
    });
  };
  var leave = function leave2() {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.leave()).then(function() {
    });
  };
  (0, import_react.useEffect)(function() {
    var streams = character === null || character === void 0 ? void 0 : character.streams;
    if (streams) {
      streams.forEach(function(stream) {
        setTrack(stream);
      });
    }
    if (character !== null && character !== void 0 && character.micOn) {
      setMicOn(micOn);
    }
    if (character !== null && character !== void 0 && character.webcamOn) {
      setWebcamOn(webcamOn);
    }
    character === null || character === void 0 ? void 0 : character.on("character-state-changed", _handleCharacterStateChanged);
    character === null || character === void 0 ? void 0 : character.on("character-message", _handleCharacterMessage);
    character === null || character === void 0 ? void 0 : character.on("user-message", _handleUserMessage);
    character === null || character === void 0 ? void 0 : character.on("data", _handleOnData);
    character === null || character === void 0 ? void 0 : character.on("stream-enabled", _handleStreamEnabled);
    character === null || character === void 0 ? void 0 : character.on("stream-disabled", _handleStreamDisabled);
    character === null || character === void 0 ? void 0 : character.on("media-status-changed", _handleMediaStatusChanged);
    character === null || character === void 0 ? void 0 : character.on("video-quality-changed", _handleVideoQualityChanged);
    character === null || character === void 0 ? void 0 : character.on("character-joined", _handleCharacterJoined);
    character === null || character === void 0 ? void 0 : character.on("character-left", _handleCharacterLeft);
    return function() {
      character === null || character === void 0 ? void 0 : character.off("character-state-changed", _handleCharacterStateChanged);
      character === null || character === void 0 ? void 0 : character.off("character-message", _handleCharacterMessage);
      character === null || character === void 0 ? void 0 : character.off("user-message", _handleUserMessage);
      character === null || character === void 0 ? void 0 : character.off("data", _handleOnData);
      character === null || character === void 0 ? void 0 : character.off("stream-enabled", _handleStreamEnabled);
      character === null || character === void 0 ? void 0 : character.off("stream-disabled", _handleStreamDisabled);
      character === null || character === void 0 ? void 0 : character.off("media-status-changed", _handleMediaStatusChanged);
      character === null || character === void 0 ? void 0 : character.off("video-quality-changed", _handleVideoQualityChanged);
      character === null || character === void 0 ? void 0 : character.off("character-joined", _handleCharacterJoined);
      character === null || character === void 0 ? void 0 : character.off("character-left", _handleCharacterLeft);
    };
  }, [character]);
  return {
    displayName: character === null || character === void 0 ? void 0 : character.displayName,
    webcamStream,
    micStream,
    webcamOn: webcamOn || !!webcamStream,
    micOn: micOn || !!micStream,
    isActiveSpeaker: activeSpeakerId === id,
    interactionId: character === null || character === void 0 ? void 0 : character.interactionId,
    id: character === null || character === void 0 ? void 0 : character.id,
    characterMode: character === null || character === void 0 ? void 0 : character.characterMode,
    characterState: characterState || (character === null || character === void 0 ? void 0 : character.characterState),
    knowledgeBases: character === null || character === void 0 ? void 0 : character.knowledgeBases,
    language: character === null || character === void 0 ? void 0 : character.language,
    enableMic,
    disableMic,
    enableWebcam,
    disableWebcam,
    join,
    leave,
    sendMessage,
    interrupt
  };
};
var _iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator";
var _asyncIteratorSymbol = typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")) : "@@asyncIterator";
function _catch(body, recover) {
  try {
    var result = body();
  } catch (e) {
    return recover(e);
  }
  if (result && result.then) {
    return result.then(void 0, recover);
  }
  return result;
}
var useWhiteboard = function useWhiteboard2() {
  var _useMeeting = useMeeting(), meeting = _useMeeting.meeting, isMeetingJoined = _useMeeting.isMeetingJoined;
  var _useState = (0, import_react.useState)(null), whiteboardUrl = _useState[0], setWhiteboardUrl = _useState[1];
  (0, import_react.useEffect)(function() {
    if (!isMeetingJoined || !meeting) return;
    var handleWhiteboardStarted = function handleWhiteboardStarted2(data) {
      if (data !== null && data !== void 0 && data.url) {
        setWhiteboardUrl(data.url);
      }
    };
    var handleWhiteboardStopped = function handleWhiteboardStopped2() {
      return setWhiteboardUrl(null);
    };
    eventEmitter.on(events["whiteboard-started"], handleWhiteboardStarted);
    eventEmitter.on(events["whiteboard-stopped"], handleWhiteboardStopped);
    return function() {
      eventEmitter.off(events["whiteboard-started"], handleWhiteboardStarted);
      eventEmitter.off(events["whiteboard-stopped"], handleWhiteboardStopped);
    };
  }, [meeting, isMeetingJoined]);
  var startWhiteboard = function startWhiteboard2() {
    try {
      if (!isMeetingJoined || !meeting) {
        return Promise.resolve();
      }
      var _temp = _catch(function() {
        return Promise.resolve(meeting.startWhiteboard()).then(function() {
        });
      }, function(error) {
        console.error("Error starting whiteboard:", error);
      });
      return Promise.resolve(_temp && _temp.then ? _temp.then(function() {
      }) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var stopWhiteboard = function stopWhiteboard2() {
    try {
      if (!isMeetingJoined || !meeting) {
        return Promise.resolve();
      }
      var _temp2 = _catch(function() {
        return Promise.resolve(meeting.stopWhiteboard()).then(function() {
        });
      }, function(error) {
        console.error("Error stopping whiteboard:", error);
      });
      return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function() {
      }) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return {
    whiteboardUrl,
    startWhiteboard,
    stopWhiteboard
  };
};
var _excluded = ["participantId", "type"];
var Constants = import_js_sdk.VideoSDK.Constants;
var createCameraVideoTrack = function createCameraVideoTrack2(_ref) {
  var _ref$cameraId = _ref.cameraId, cameraId = _ref$cameraId === void 0 ? void 0 : _ref$cameraId, _ref$encoderConfig = _ref.encoderConfig, encoderConfig = _ref$encoderConfig === void 0 ? void 0 : _ref$encoderConfig, _ref$facingMode = _ref.facingMode, facingMode = _ref$facingMode === void 0 ? void 0 : _ref$facingMode, _ref$optimizationMode = _ref.optimizationMode, optimizationMode = _ref$optimizationMode === void 0 ? void 0 : _ref$optimizationMode, _ref$multiStream = _ref.multiStream, multiStream = _ref$multiStream === void 0 ? true : _ref$multiStream;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.createCameraVideoTrack({
      cameraId,
      encoderConfig,
      facingMode,
      optimizationMode,
      multiStream
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var createScreenShareVideoTrack = function createScreenShareVideoTrack2(_ref2) {
  var _ref2$encoderConfig = _ref2.encoderConfig, encoderConfig = _ref2$encoderConfig === void 0 ? void 0 : _ref2$encoderConfig, _ref2$optimizationMod = _ref2.optimizationMode, optimizationMode = _ref2$optimizationMod === void 0 ? void 0 : _ref2$optimizationMod, _ref2$withAudio = _ref2.withAudio, withAudio = _ref2$withAudio === void 0 ? "enable" : _ref2$withAudio, _ref2$multiStream = _ref2.multiStream, multiStream = _ref2$multiStream === void 0 ? false : _ref2$multiStream;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.createScreenShareVideoTrack({
      encoderConfig,
      optimizationMode,
      withAudio,
      multiStream
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var createMicrophoneAudioTrack = function createMicrophoneAudioTrack2(_ref3) {
  var _ref3$noiseConfig = _ref3.noiseConfig, noiseConfig = _ref3$noiseConfig === void 0 ? void 0 : _ref3$noiseConfig, _ref3$encoderConfig = _ref3.encoderConfig, encoderConfig = _ref3$encoderConfig === void 0 ? void 0 : _ref3$encoderConfig, _ref3$microphoneId = _ref3.microphoneId, microphoneId = _ref3$microphoneId === void 0 ? void 0 : _ref3$microphoneId;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.createMicrophoneAudioTrack({
      noiseConfig,
      encoderConfig,
      microphoneId
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var getNetworkStats = function getNetworkStats2(_temp) {
  var _ref4 = _temp === void 0 ? {} : _temp, timeoutDuration = _ref4.timeoutDuration, baseUrl = _ref4.baseUrl;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.getNetworkStats({
      timeoutDuration,
      baseUrl
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var withAdaptiveObservers = function withAdaptiveObservers2(VideoPlayerComponent) {
  var intersectionObserverOptions = {
    root: null,
    rootMargin: "0px",
    threshold: 0
  };
  var debounceDelay = 400;
  return function(props) {
    var participantId = props.participantId, type = props.type;
    var ref = (0, import_react.useRef)(null);
    var observerRef = (0, import_react.useRef)(null);
    var resizeObserverRef = (0, import_react.useRef)(null);
    var _useParticipant = useParticipant(participantId), participant = _useParticipant.participant;
    (0, import_react.useEffect)(function() {
      if (type === "share" || !ref.current || !participant) return;
      var element = ref.current;
      if (!element || !participant) return;
      if (observerRef.current) observerRef.current.disconnect();
      var handleIntersectionChange = debounce(function(entries) {
        for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done; ) {
          var entry = _step.value;
          if (entry.intersectionRatio > 0) {
            for (var _iterator2 = _createForOfIteratorHelperLoose(participant.streams.values()), _step2; !(_step2 = _iterator2()).done; ) {
              var stream = _step2.value;
              if (stream.kind === "video" && stream.pausedBy !== "SUB_MANAGER") {
                stream.resume();
              }
            }
          } else {
            for (var _iterator3 = _createForOfIteratorHelperLoose(participant.streams.values()), _step3; !(_step3 = _iterator3()).done; ) {
              var _stream = _step3.value;
              if (_stream.kind === "video") {
                _stream.pause();
              }
            }
          }
        }
      }, debounceDelay);
      observerRef.current = new IntersectionObserver(handleIntersectionChange, intersectionObserverOptions);
      var processResize = function processResize2(width, height) {
        if (width > 0 && height > 0) {
          participant.setViewPort(width, height);
        }
      };
      var handleResize = debounce(function(entries) {
        var _entries$0$contentRec = entries[0].contentRect, width = _entries$0$contentRec.width, height = _entries$0$contentRec.height;
        processResize(width, height);
      }, debounceDelay);
      resizeObserverRef.current = new ResizeObserver(handleResize);
      resizeObserverRef.current.observe(element);
      observerRef.current.observe(element);
      return function() {
        if (observerRef.current) {
          observerRef.current.disconnect();
        }
        if (resizeObserverRef.current) {
          resizeObserverRef.current.disconnect();
        }
      };
    }, []);
    return import_react.default.createElement(VideoPlayerComponent, _extends({
      ref
    }, props));
  };
};
var VideoSDKPlayer = (0, import_react.forwardRef)(function(_ref5, ref) {
  var participantId = _ref5.participantId, _ref5$type = _ref5.type, type = _ref5$type === void 0 ? "video" : _ref5$type, _ref5$containerStyle = _ref5.containerStyle, containerStyle = _ref5$containerStyle === void 0 ? {} : _ref5$containerStyle, _ref5$className = _ref5.className, className = _ref5$className === void 0 ? "" : _ref5$className, _ref5$classNameVideo = _ref5.classNameVideo, classNameVideo = _ref5$classNameVideo === void 0 ? "" : _ref5$classNameVideo, _ref5$videoStyle = _ref5.videoStyle, videoStyle = _ref5$videoStyle === void 0 ? {} : _ref5$videoStyle;
  var _useParticipant2 = useParticipant(participantId), webcamOn = _useParticipant2.webcamOn, webcamStream = _useParticipant2.webcamStream, isLocal = _useParticipant2.isLocal, screenShareStream = _useParticipant2.screenShareStream, screenShareOn = _useParticipant2.screenShareOn;
  var videoRef = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(function() {
    var stream = type === "share" ? screenShareStream : webcamStream;
    var isOn = type === "share" ? screenShareOn : webcamOn;
    if (videoRef.current) {
      if (isOn && stream) {
        var mediaStream = new MediaStream();
        mediaStream.addTrack(stream.track);
        videoRef.current.srcObject = mediaStream;
        videoRef.current.play()["catch"](function(error) {
          return console.error("videoRef.current.play() failed", error);
        });
      } else {
        videoRef.current.srcObject = null;
      }
    }
  }, [type].concat(type === "share" ? [screenShareOn, screenShareStream] : type === "video" ? [webcamOn, webcamStream] : []));
  return import_react.default.createElement("div", {
    ref,
    className: "video-container participant-video-" + participantId + " " + (className || ""),
    style: _extends({
      objectFit: type === "share" ? "contain" : "none",
      height: "100%"
    }, containerStyle)
  }, import_react.default.createElement("video", {
    width: "100%",
    height: "100%",
    ref: videoRef,
    autoPlay: true,
    className: classNameVideo,
    style: isLocal && type !== "share" ? _extends({
      transform: "scaleX(-1)",
      WebkitTransform: "scaleX(-1)"
    }, videoStyle) : videoStyle
  }));
});
var VideoPlayer = function VideoPlayer2(_ref6) {
  var participantId = _ref6.participantId, type = _ref6.type, props = _objectWithoutPropertiesLoose(_ref6, _excluded);
  var VideoPlayerComponent = (0, import_react.useMemo)(function() {
    return type === "share" ? VideoSDKPlayer : withAdaptiveObservers(VideoSDKPlayer);
  }, [type, participantId]);
  return import_react.default.createElement(VideoPlayerComponent, _extends({
    participantId,
    type
  }, props));
};
var AudioPlayer = function AudioPlayer2(_ref7) {
  var participantId = _ref7.participantId, type = _ref7.type;
  var _useParticipant3 = useParticipant(participantId), micStream = _useParticipant3.micStream, isLocal = _useParticipant3.isLocal, screenShareAudioStream = _useParticipant3.screenShareAudioStream;
  var micRef = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(function() {
    if (micRef.current) {
      var audioStream = type === "shareAudio" ? screenShareAudioStream : micStream;
      if (audioStream) {
        var mediaStream = new MediaStream();
        mediaStream.addTrack(audioStream.track);
        micRef.current.srcObject = mediaStream;
        micRef.current.play()["catch"](function(error) {
          return console.error("micRef.current.play() failed", error);
        });
      } else {
        micRef.current.srcObject = null;
      }
    }
  }, [micStream, screenShareAudioStream, type]);
  return import_react.default.createElement("audio", {
    ref: micRef,
    autoPlay: true,
    playsInline: true,
    muted: isLocal
  });
};
var export_CameraDeviceInfo = import_js_sdk2.CameraDeviceInfo;
var export_DeviceInfo = import_js_sdk2.DeviceInfo;
var export_ExternalE2EEKeyProvider = import_js_sdk2.ExternalE2EEKeyProvider;
var export_MicrophoneDeviceInfo = import_js_sdk2.MicrophoneDeviceInfo;
export {
  AudioPlayer,
  export_CameraDeviceInfo as CameraDeviceInfo,
  Constants,
  export_DeviceInfo as DeviceInfo,
  export_ExternalE2EEKeyProvider as ExternalE2EEKeyProvider,
  MeetingConsumer,
  MeetingProvider,
  export_MicrophoneDeviceInfo as MicrophoneDeviceInfo,
  VideoPlayer,
  createCameraVideoTrack,
  createMicrophoneAudioTrack,
  createScreenShareVideoTrack,
  getNetworkStats,
  useCharacter,
  useConnection,
  useFile,
  useMediaDevice,
  useMeeting,
  useParticipant,
  usePubSub,
  useTranscription,
  useWhiteboard,
  withAdaptiveObservers
};
/*! Bundled license information:

@videosdk.live/js-sdk/videosdk.js:
  (*! For license information please see videosdk.js.LICENSE.txt *)
*/
//# sourceMappingURL=@videosdk__live_react-sdk.js.map
